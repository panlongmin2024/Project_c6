/***************************************************************************
 * Copyright (c) 2018 Actions Semi Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * Author: mikeyang<mikeyang@actions-semi.com>
 *
 * Description:    audio driver inner head file
 *
 * Change log:
 *	2018/9/26: Created by mikeyang.
 ****************************************************************************
 */


#ifndef __INCLUDE_AUDIO_INNER_H__
#define __INCLUDE_AUDIO_INNER_H__

#ifndef SYS_LOG_DOMAIN
#define SYS_LOG_DOMAIN "audio_drv"
#endif

#ifndef SYS_LOG_LEVEL
#define SYS_LOG_LEVEL SYS_LOG_LEVEL_INFO
#endif

#include <logging/sys_log.h>

#include <kernel.h>
#include <init.h>
#include <device.h>
#include <irq.h>
#include <soc.h>
#include <string.h>
#include <gpio.h>
#include <board.h>
#include <phy_audio.h>


#ifdef __cplusplus
extern "C" {
#endif

#define AUDIO_DACFIFO0_LEVEL	(32)
#define AUDIO_DACFIFO1_LEVEL	(32)
#define AUDIO_I2STXFIFO_LEVEL	(32)

#define ENABLE_RINGBUF_DMA_RELOAD_MODE

#define AUDIO_OUT_RINGBUF_SIZE	(2*960)

#ifdef ENABLE_RINGBUF_DMA_RELOAD_MODE
#define AUDIO_OUT_RINGBUF_DMASTART_THRESHOLD	(2*960)
#else
#define AUDIO_OUT_RINGBUF_DMASTART_THRESHOLD	(2*960)
#endif

#define AUDIO_OUT_RINGBUF_DMATRANSFER_MIN		(0)

/* PA volume default is fiexed to 0db
 * PA volume level translates to db as shown below:
 * 40 ~ 27: 1db down step
 * 26 ~ 14: 1.5db down step
 * 13 ~ 1: 2db down step
 * 0: -96db down step
 */
#define AOUT_DAC_PA_VOLUME_DEFAULT				(0x28 << 8)

#define VOL_DB_TO_INDEX(x)						(((x) + 374) / 375)
#define VOL_INDEX_TO_DB(x)						((x) * 375)

/**
**	audio module register bits defines
**/


/***********************************************************************************
**							DAC  Module  Register
************************************************************************************/


/* DAC_DIGCTL register */

/* DAC digital enable */
#define DAC_DIGCTL_DDEN					BIT(0)
/* DAC Dith enable */
#define DAC_DIGCTL_ENDITH				BIT(1)
/* DAC over samping rate */
#define DAC_DIGCTL_OSRDA_SHIFT			2
#define DAC_DIGCTL_OSRDA(x)				((x) << DAC_DIGCTL_OSRDA_SHIFT)
#define DAC_DIGCTL_OSRDA_MASK			DAC_DIGCTL_OSRDA(0x3)
#define		DAC_DIGCTL_OSRDA_32X		DAC_DIGCTL_OSRDA(0)
#define		DAC_DIGCTL_OSRDA_64X		DAC_DIGCTL_OSRDA(1)
#define		DAC_DIGCTL_OSRDA_128X		DAC_DIGCTL_OSRDA(2)
#define		DAC_DIGCTL_OSRDA_256X		DAC_DIGCTL_OSRDA(3)

/* DAC fifo0 mix to dac/i2s tx/spdiftx enable  */
#define DAC_DIGCTL_DAF0M2DAEN			BIT(4)
/* DAC fifo1 mix to dac/i2s tx/spdiftx enable  */
#define DAC_DIGCTL_DAF1M2DAEN			BIT(5)

/* DAC interpolation filter rate */
#define DAC_DIGCTL_INTFRS_SHIFT			6
#define DAC_DIGCTL_INTFRS(x)			((x) << DAC_DIGCTL_INTFRS_SHIFT)
#define DAC_DIGCTL_INTFRS_MASK			DAC_DIGCTL_INTFRS(0x3)
#define		DAC_DIGCTL_INTFRS_1X		DAC_DIGCTL_INTFRS(0)
#define		DAC_DIGCTL_INTFRS_2X		DAC_DIGCTL_INTFRS(1)
#define		DAC_DIGCTL_INTFRS_4X		DAC_DIGCTL_INTFRS(2)
#define		DAC_DIGCTL_INTFRS_8X		DAC_DIGCTL_INTFRS(3)

/* enable ADC channel to DMA L&R digital loop back */
#define DAC_DIGCTL_AD2DALPEN			BIT(12)
/* DAC digital debug enable */
#define DAC_DIGCTL_DDDEN				BIT(13)
/* DAC analog debug enable */
#define DAC_DIGCTL_DADEN				BIT(14)

/* DAC debug channel select */
#define DAC_DIGCTL_DADCS_SHIFT			15
#define DAC_DIGCTL_DADCS(x)				((x) << DAC_DIGCTL_DADCS_SHIFT)
#define DAC_DIGCTL_DADCS_MASK			DAC_DIGCTL_DADCS(0x1)
#define		DAC_DIGCTL_DADCS_L			DAC_DIGCTL_DADCS(0)
#define		DAC_DIGCTL_DADCS_R			DAC_DIGCTL_DADCS(1)

/* DAC 128fs/256fs select, only one fs or exist two fs  */
#define DAC_DIGCTL_AUDIO_FS_SHIFT		16
#define DAC_DIGCTL_AUDIO_FS(x)			((x) << DAC_DIGCTL_AUDIO_FS_SHIFT)
#define DAC_DIGCTL_AUDIO_FS_MASK		DAC_DIGCTL_AUDIO_FS(0x1)
#define		DAC_DIGCTL_AUDIO_FS_ONE_FS	DAC_DIGCTL_AUDIO_FS(0)
#define		DAC_DIGCTL_AUDIO_FS_TWO_FS	DAC_DIGCTL_AUDIO_FS(1)

/* reset SDM after has detect noise */
#define DAC_DIGCTL_SDMREEN				BIT(17)

/* SDM noise detection threhold */
#define DAC_DIGCTL_SDMNDTH_SHIFT		18
#define DAC_DIGCTL_SDMNDTH(x)			((x) << DAC_DIGCTL_SDMNDTH_SHIFT)
#define DAC_DIGCTL_SDMNDTH_MASK			DAC_DIGCTL_SDMNDTH(0x3)
#define		DAC_DIGCTL_SDMNDTH_16BIT	DAC_DIGCTL_SDMNDTH(0)
#define		DAC_DIGCTL_SDMNDTH_15BIT	DAC_DIGCTL_SDMNDTH(1)
#define		DAC_DIGCTL_SDMNDTH_14BIT	DAC_DIGCTL_SDMNDTH(2)
#define		DAC_DIGCTL_SDMNDTH_13BIT	DAC_DIGCTL_SDMNDTH(3)

/* SDM mute count select */
#define DAC_DIGCTL_SDMCNT_SHIFT			20
#define DAC_DIGCTL_SDMCNT(x)			((x) << DAC_DIGCTL_SDMCNT_SHIFT)
#define DAC_DIGCTL_SDMCNT_MASK			DAC_DIGCTL_SDMCNT(0x1)
#define		DAC_DIGCTL_SDMCNT_256		DAC_DIGCTL_SDMCNT(0)
#define		DAC_DIGCTL_SDMCNT_512		DAC_DIGCTL_SDMCNT(1)

/* Multi-device function */
#define DAC_DIGCTL_MULT_DEVICE_SHIFT	21
#define DAC_DIGCTL_MULT_DEVICE(x)		((x) << DAC_DIGCTL_MULT_DEVICE_SHIFT)
#define DAC_DIGCTL_MULT_DEVICE_MASK		DAC_DIGCTL_MULT_DEVICE(0x3)
#define		DAC_DIGCTL_MULT_NONE		DAC_DIGCTL_MULT_DEVICE(0)
#define		DAC_DIGCTL_MULT_I2S			DAC_DIGCTL_MULT_DEVICE(1)
#define		DAC_DIGCTL_MULT_SPF			DAC_DIGCTL_MULT_DEVICE(2)
#define		DAC_DIGCTL_MULT_I2SSPF		DAC_DIGCTL_MULT_DEVICE(3)

/* Auto Mute count */
#define DAC_DIGCTL_AMCNT_SHIFT			24
#define DAC_DIGCTL_AMCNT(x)				((x) << DAC_DIGCTL_AMCNT_SHIFT)
#define DAC_DIGCTL_AMCNT_MASK			DAC_DIGCTL_AMCNT(0x3)
#define		DAC_DIGCTL_AMCNT_512		DAC_DIGCTL_AMCNT(0)
#define		DAC_DIGCTL_AMCNT_1024		DAC_DIGCTL_AMCNT(1)
#define		DAC_DIGCTL_AMCNT_2048		DAC_DIGCTL_AMCNT(2)
#define		DAC_DIGCTL_AMCNT_4096		DAC_DIGCTL_AMCNT(3)

/* Auto Mute Detect Pending */
#define DAC_DIGCTL_AMDP					BIT(26)

/* Auto Mute Enable */
#define DAC_DIGCTL_AMEN					BIT(27)


/* DAC FIFO CTL register */

#define DAC_FIFOCTL_DAF0RT				BIT(0)
#define DAC_FIFOCTL_DAF0EDE				BIT(1)
#define DAC_FIFOCTL_DAF0EIE				BIT(2)

#define DAC_FIFOCTL_DAF0IS_SHIFT		4
#define DAC_FIFOCTL_DAF0IS(x)			((x) << DAC_FIFOCTL_DAF0IS_SHIFT)
#define DAC_FIFOCTL_DAF0IS_MASK			DAC_FIFOCTL_DAF0IS(0x3)
#define		DAC_FIFOCTL_DAF0IS_CPU		DAC_FIFOCTL_DAF0IS(0)
#define		DAC_FIFOCTL_DAF0IS_DMA		DAC_FIFOCTL_DAF0IS(1)
#define		DAC_FIFOCTL_DAF0IS_ASRC0	DAC_FIFOCTL_DAF0IS(2)
#define		DAC_FIFOCTL_DAF0IS_DSP		DAC_FIFOCTL_DAF0IS(3)

#define DAC_FIFOCTL_FIFO_DMAWIDTH_SHIFT	7
#define DAC_FIFOCTL_FIFO_DMAWIDTH(x)	((x) << DAC_FIFOCTL_FIFO_DMAWIDTH_SHIFT)
#define DAC_FIFOCTL_FIFO_DMAWIDTH_MASK	DAC_FIFOCTL_FIFO_DMAWIDTH(0x1)
#define		DAC_FIFOCTL_DMAWIDTH_32		DAC_FIFOCTL_FIFO_DMAWIDTH(0)
#define		DAC_FIFOCTL_DMAWIDTH_16		DAC_FIFOCTL_FIFO_DMAWIDTH(1)


#define DAC_FIFOCTL_DAF1RT				BIT(8)
#define DAC_FIFOCTL_DAF1EDE				BIT(9)
#define DAC_FIFOCTL_DAF1EIE				BIT(10)

#define DAC_FIFOCTL_DAF1IS_SHIFT		12
#define DAC_FIFOCTL_DAF1IS(x)			((x) << DAC_FIFOCTL_DAF1IS_SHIFT)
#define DAC_FIFOCTL_DAF1IS_MASK			DAC_FIFOCTL_DAF1IS(0x3)
#define		DAC_FIFOCTL_DAF1IS_CPU		DAC_FIFOCTL_DAF1IS(0)
#define		DAC_FIFOCTL_DAF1IS_DMA		DAC_FIFOCTL_DAF1IS(1)
#define		DAC_FIFOCTL_DAF1IS_ASRC1	DAC_FIFOCTL_DAF1IS(2)
#define		DAC_FIFOCTL_DAF1IS_DSP		DAC_FIFOCTL_DAF1IS(3)


/* DAC_STAT register */

#define DAC_STAT_DAF0F					BIT(6)
#define DAC_STAT_DAF0IP					BIT(7)
#define DAC_STAT_DAF1F					BIT(14)
#define DAC_STAT_DAF1IP					BIT(15)
#define DAC_STAT_DAF1S_SHIFT			8
#define DAC_STAT_DAF1S(x)				((x) << DAC_STAT_DAF1S_SHIFT)
#define DAC_STAT_DAF1S_MASK				DAC_STAT_DAF1S(0x1F)
#define DAC_STAT_DAF0S_SHIFT			0
#define DAC_STAT_DAF0S(x)				((x) << DAC_STAT_DAF0S_SHIFT)
#define DAC_STAT_DAF0S_MASK				DAC_STAT_DAF0S(0x1F)


/* VOL_LCH register */

#define VOL_LCH_VOLL_SHIFT				0
#define VOL_LCH_VOLL(x)					((x) << VOL_LCH_VOLL_SHIFT)
#define VOL_LCH_VOLL_MASK				VOL_LCH_VOLL(0xFF)

#define VOL_LCH_VOLLZCEN				BIT(8)
#define VOL_LCH_VOLLZCTOEN				BIT(9)


/* VOL_RCH register */

#define VOL_RCH_VOLR_SHIFT				0
#define VOL_RCH_VOLR(x)					((x) << VOL_RCH_VOLR_SHIFT)
#define VOL_RCH_VOLR_MASK				VOL_RCH_VOLR(0xFF)

#define VOL_RCH_VOLRZCEN				BIT(8)
#define VOL_RCH_VOLRZCTOEN				BIT(9)


/* DAC_ANACTL  register */

#define DAC_ANACTL_DAENL				BIT(0)
#define DAC_ANACTL_DAENR				BIT(1)
#define DAC_ANACTL_PAENL		    	BIT(2)
#define DAC_ANACTL_PAOSENL				BIT(3)
#define DAC_ANACTL_BIASEN				BIT(4)
#define DAC_ANACTL_DPBM  				BIT(5)
#define DAC_ANACTL_AIN2DMT      		BIT(6)
#define DAC_ANACTL_ZERODT				BIT(7)
#define DAC_ANACTL_OPVROEN				BIT(8)
#define DAC_ANACTL_DDATPR				BIT(9)
#define DAC_ANACTL_DDOVV				BIT(10)
#define DAC_ANACTL_OVLS					BIT(11)
#define DAC_ANACTL_ATPLP2				BIT(12)
#define DAC_ANACTL_PAVDC				BIT(13)
#define DAC_ANACTL_ATP2CE				BIT(14)
#define DAC_ANACTL_P2IB					BIT(15)

#define DAC_ANACTL_PAIQ_SHIFT			16
#define DAC_ANACTL_PAIQ(x)				((x) << DAC_ANACTL_PAIQ_SHIFT)
#define DAC_ANACTL_PAIQ_MASK			DAC_ANACTL_PAIQ(0x3)

#define DAC_ANACTL_PAENR		    	BIT(18)
#define DAC_ANACTL_PAOSENR				BIT(19)
#define DAC_ANACTL_LPANEN_SHIFT  		20
#define DAC_ANACTL_LPANEN				BIT(20)
#define DAC_ANACTL_LPAOSNEN				BIT(21)
#define DAC_ANACTL_RPANEN				BIT(22)
#define DAC_ANACTL_RPAOSNEN				BIT(23)

#define DAC_ANACTL_OP0PAMT				BIT(24)
#define DAC_ANACTL_OP1PAMT				BIT(25)
#define DAC_ANACTL_MOPPAMT				BIT(26)
#define DAC_ANACTL_DACINVL				BIT(27)
#define DAC_ANACTL_DACINVR				BIT(28)


/* DAC PA_VOLUME register */

#define PA_VOLUME_PALRVOL_SHIFT     	0
#define PA_VOLUME_PALRVOL_MASK     		(0x3F<<PA_VOLUME_PALRVOL_SHIFT)
#define PA_VOLUME_PALRSW_SHIFT      	6
#define PA_VOLUME_PALRSW				BIT(6)
#define PA_VOLUME_PALRZCDEN         	BIT(7)
#define PA_VOLUME_PALRTOEN          	BIT(8)


/* DAC FIFO 0 CNT register */

#define DAC_FIFO0_CNT_SHIFT				0
#define DAC_FIFO0_CNT_OVERFLOW_BITS		16
#define DAC_FIFO0_CNT_MASK				(0xFFFF << DAC_FIFO0_CNT_SHIFT)
#define DAC_FIFO0_CNT_GET(of, reg) (((of) << DAC_FIFO0_CNT_OVERFLOW_BITS) | (((reg)&DAC_FIFO0_CNT_MASK) >> DAC_FIFO0_CNT_SHIFT))
#define DAC_FIFO0_CNT_EN				BIT(16)
#define DAC_FIFO0_CNT_IE				BIT(17)
#define DAC_FIFO0_CNT_IP				BIT(18)

/* DAC FIFO 1 CNT register */

#define DAC_FIFO1_CNT_SHIFT				0
#define DAC_FIFO1_CNT_OVERFLOW_BITS		16
#define DAC_FIFO1_CNT_MASK				(0xFFFF << DAC_FIFO1_CNT_SHIFT)
#define DAC_FIFO1_CNT_GET(of, reg) (((of) << DAC_FIFO1_CNT_OVERFLOW_BITS) | (((reg)&DAC_FIFO1_CNT_MASK) >> DAC_FIFO1_CNT_SHIFT))
#define DAC_FIFO1_CNT_EN				BIT(16)
#define DAC_FIFO1_CNT_IE				BIT(17)
#define DAC_FIFO1_CNT_IP				BIT(18)


/***********************************************************************************
**							ADC  Module  Register
************************************************************************************/

/* ADC_DIGCTL  register */

#define ADC_DIGCTL_AADEN				BIT(2)
#define ADC_DIGCTL_ADDEN				BIT(3)
#define ADC_DIGCTL_HPFREN				BIT(6)
#define ADC_DIGCTL_HPFLEN				BIT(7)
#define ADC_DIGCTL_ADCGC_SHIFT     		11
#define ADC_DIGCTL_ADCGC(x)     		((x) << ADC_DIGCTL_ADCGC_SHIFT)
#define ADC_DIGCTL_ADCGC_MASK     		ADC_DIGCTL_ADCGC(0xF)

/* ADC_FIFOCTL  register */
#define ADC_FIFOCTL_ADFRT_SHIFT			0
#define ADC_FIFOCTL_ADFRT				(1<<0)  //BIT(0)

#define ADC_FIFOCTL_ADFFDE_SHIFT		1
#define ADC_FIFOCTL_ADFFDE				(1<<1)  //BIT(1)

#define ADC_FIFOCTL_ADFFIE_SHIFT		2
#define ADC_FIFOCTL_ADFFIE				(1<<2)  //BIT(2)

#define ADC_FIFOCTL_ADFIS_SHIFT			3
#define ADC_FIFOCTL_ADFIS(x)			((x) << ADC_FIFOCTL_ADFIS_SHIFT)
#define ADC_FIFOCTL_ADFIS_MASK			ADC_FIFOCTL_ADFIS(0x01)
#define 	ADC_FIFOCTL_ADFIS_ADC		ADC_FIFOCTL_ADFIS(0)
#define 	ADC_FIFOCTL_ADFIS_I2SRX0	ADC_FIFOCTL_ADFIS(1)
#define ADC_FIFOCTL_ADFOS_SHIFT			4
#define ADC_FIFOCTL_ADFOS(x)			((x) << ADC_FIFOCTL_ADFOS_SHIFT)
#define ADC_FIFOCTL_ADFOS_MASK			ADC_FIFOCTL_ADFOS(0x03)
#define 	ADC_FIFOCTL_ADFOS_CPU		ADC_FIFOCTL_ADFOS(0)
#define 	ADC_FIFOCTL_ADFOS_DMA		ADC_FIFOCTL_ADFOS(1)
#define 	ADC_FIFOCTL_ADFOS_ASRC		ADC_FIFOCTL_ADFOS(2)
#define 	ADC_FIFOCTL_ADFOS_DSP		ADC_FIFOCTL_ADFOS(3)

#define ADC_FIFOCTL_FIFO_DMAWIDTH_SHIFT	7
#define ADC_FIFOCTL_FIFO_DMAWIDTH(x)	((x) << ADC_FIFOCTL_FIFO_DMAWIDTH_SHIFT)
#define ADC_FIFOCTL_FIFO_DMAWIDTH_MASK	ADC_FIFOCTL_FIFO_DMAWIDTH(0x1)
#define		ADC_FIFOCTL_DMAWIDTH_32		ADC_FIFOCTL_FIFO_DMAWIDTH(0)
#define		ADC_FIFOCTL_DMAWIDTH_16		ADC_FIFOCTL_FIFO_DMAWIDTH(1)

/* ADC_STAT  register */

#define ADC_STAT_ADFIP					BIT(6)
#define ADC_STAT_ADFEF					BIT(7)

/* ADC_ANACTL  register */

#define ADC_ANACTL_ADREN				BIT(0)
#define ADC_ANACTL_ADLEN				BIT(1)
#define ADC_ANACTL_OP0LEN				BIT(2)
#define ADC_ANACTL_OP0REN				BIT(3)
#define ADC_ANACTL_OP0G_SHIFT			4
#define ADC_ANACTL_OP0G(x)				((x) << ADC_ANACTL_OP0G_SHIFT)
#define ADC_ANACTL_OP0G_MASK			ADC_ANACTL_OP0G(0x7)

#define ADC_ANACTL_OP1LEN				BIT(7)
#define ADC_ANACTL_OP1REN				BIT(8)
#define ADC_ANACTL_OP1G_SHIFT			9
#define ADC_ANACTL_OP1G(x)				((x) << ADC_ANACTL_OP1G_SHIFT)
#define ADC_ANACTL_OP1G_MASK			ADC_ANACTL_OP1G(0x7)

#define ADC_ANACTL_MOPLEN				BIT(12)
#define ADC_ANACTL_MOPREN				BIT(13)
#define ADC_ANACTL_MOPGBEN				BIT(14)
#define ADC_ANACTL_MFDSES				BIT(15)
#define ADC_ANACTL_MOPG_SHIFT			16
#define ADC_ANACTL_MOPG(x)				((x) << ADC_ANACTL_MOPG_SHIFT)
#define ADC_ANACTL_MOPG_MASK			ADC_ANACTL_MOPG(0x7)

#define ADC_ANACTL_MOPGTEN				BIT(19)
#define ADC_ANACTL_MLMREN				BIT(20)
#define ADC_ANACTL_MRMLEN				BIT(21)
#define ADC_ANACTL_PALMADL				BIT(22)
#define ADC_ANACTL_PARMADR				BIT(23)
#define ADC_ANACTL_PALMADR				BIT(24)
#define ADC_ANACTL_PARMADL				BIT(25)
#define ADC_ANACTL_ADVREN				BIT(26)

#define ADC_ANACTL_ADCCK256ES			BIT(27)
#define ADC_ANACTL_ADLPFEN				BIT(28)
#define ADC_ANACTL_FDMCVREN				BIT(29)
#define ADC_ANACTL_AUXINFDENLH			BIT(30)
#define ADC_ANACTL_AUXFDBTENH			BIT(31)

/* ADC_BIAS register */
#define ADC_BIAS_VRDABC_SHIFT			0
#define ADC_BIAS_VRDABC_MASK			(0x7 << ADC_BIAS_VRDABC_SHIFT)
#define ADC_BIAS_OPBC23_SHIFT			3
#define ADC_BIAS_OPBC23_MASK			(0x3 << ADC_BIAS_OPBC23_SHIFT)
#define ADC_BIAS_OPBC1_SHIFT			5
#define ADC_BIAS_OPBC1_MASK				(0x7 << ADC_BIAS_OPBC1_SHIFT)

#define ADC_BIAS_OP1BC_SHIFT			12
#define ADC_BIAS_OP1BC_MASK				(0x3 << ADC_BIAS_OP1BC_SHIFT)
#define ADC_BIAS_OP0BC_SHIFT			14
#define ADC_BIAS_OP0BC_MASK				(0x3 << ADC_BIAS_OP0BC_SHIFT)

#define ADC_BIAS_OP2LEN					BIT(16)
#define ADC_BIAS_OP2REN					BIT(17)
#define ADC_BIAS_OP2EN_SHIFT			16
#define ADC_BIAS_OP2EN_MASK				(3 << ADC_BIAS_OP2EN_SHIFT)

#define ADC_BIAS_FD1BUFBC_SHIFT			18
#define ADC_BIAS_FD1BUFBC_MASK			(0x3 << ADC_BIAS_FD1BUFBC_SHIFT)

#define ADC_BIAS_FD1BC_SHIFT			22
#define ADC_BIAS_FD1BC_MASK				(0x3 << ADC_BIAS_FD1BC_SHIFT)

#define ADC_BIAS_AUXINFDENRH			BIT(24)

#define ADC_BIAS_LPFBUFBC_SHIFT			27
#define ADC_BIAS_LPFBUFBC_MASK			(0x3 << ADC_BIAS_LPFBUFBC_SHIFT)
#define ADC_BIAS_LPFBC_SHIFT			29
#define ADC_BIAS_LPFBC_MASK				(0x7 << ADC_BIAS_LPFBC_SHIFT)

/* DMIC_CTL  register */

#define DMIC_CTL_PREGAIN_SHIFT			0
#define DMIC_CTL_PREGAIN(x)				((x) << DMIC_CTL_PREGAIN_SHIFT)
#define DMIC_CTL_PREGAIN_MASK			DMIC_CTL_PREGAIN(0x3)
#define		DMIC_CTL_PREGAIN_1X			DMIC_CTL_PREGAIN(0)
#define		DMIC_CTL_PREGAIN_2X			DMIC_CTL_PREGAIN(1)
#define		DMIC_CTL_PREGAIN_4X			DMIC_CTL_PREGAIN(2)
#define		DMIC_CTL_PREGAIN_8X			DMIC_CTL_PREGAIN(3)

#define DMIC_CTL_DMOSRS_SHIFT			2
#define DMIC_CTL_DMOSRS(x)				((x) << DMIC_CTL_DMOSRS_SHIFT)
#define DMIC_CTL_DMOSRS_MASK			DMIC_CTL_DMOSRS(0x1)
#define		DMIC_CTL_DMOSRS_128X		DMIC_CTL_DMOSRS(0)
#define		DMIC_CTL_DMOSRS_64X			DMIC_CTL_DMOSRS(1)

#define DMIC_CTL_DRFS					BIT(3)

#define DMIC_CTL_DMREN					BIT(4)
#define DMIC_CTL_DMLEN					BIT(5)


/***********************************************************************************
**							I2S TX 0  Module  Register
************************************************************************************/

/* I2S_TX0 CTL */

#define I2STX0_CTL_TXEN							BIT(0)

#define I2STX0_CTL_DATA_FORMAT_SHIFT			1
#define I2STX0_CTL_DATA_FORMAT_MASK				(0x3 << 1)
#define I2STX0_CTL_DATA_FORMAT(x)				(((x) & 0x3) << 1)
#define	I2STX0_CTL_DATA_FORMAT_I2S				I2STX0_CTL_DATA_FORMAT(0)
#define	I2STX0_CTL_DATA_FORMAT_LEFT_JUSTIFIED	I2STX0_CTL_DATA_FORMAT(1)
#define	I2STX0_CTL_DATA_FORMAT_RIGHT_JUSTIFIED	I2STX0_CTL_DATA_FORMAT(2)

#define I2STX0_CTL_BCLK_SET_SHIFT		3
#define I2STX0_CTL_BCLK_SET_MASK		(0x1 << 3)
#define I2STX0_CTL_BCLK_SET(x)			(((x) & 0x1) << 3)
#define	I2STX0_CTL_BCLK_SET_64FS		I2STX0_CTL_BCLK_SET(0)
#define	I2STX0_CTL_BCLK_SET_32FS		I2STX0_CTL_BCLK_SET(1)

#define I2STX0_CTL_WIDTH_MASK			(0x3 << 4)
#define I2STX0_CTL_WIDTH(x)				(((x) & 0x3) << 4)
#define	I2STX0_CTL_WIDTH_16BIT			I2STX0_CTL_WIDTH(0)
#define	I2STX0_CTL_WIDTH_20BIT			I2STX0_CTL_WIDTH(1)
#define	I2STX0_CTL_WIDTH_24BIT			I2STX0_CTL_WIDTH(2)

#define I2STX0_CTL_SMCLK_MASK			BIT(6)
#define	I2STX0_CTL_SMCLK_INT			0
#define	I2STX0_CTL_SMCLK_EXT			I2STX0_CTL_SMCLK_MASK

#define I2STX0_CTL_MODE_MASK			BIT(7)
#define	I2STX0_CTL_MODE_MASTER			0
#define	I2STX0_CTL_MODE_SLAVE			I2STX0_CTL_MODE_MASK

#define I2STX0_CTL_LPEN0				BIT(8)
#define I2STX0_CTL_LPEN1				BIT(9)

#define I2STX0_CTL_I2S0RX_PSEUDO_5WEN	BIT(10)
#define I2STX0_CTL_I2S1RX_PSEUDO_5WEN	BIT(11)

#define I2STX0_CTL_I2S0RX5WEN			BIT(12)
#define I2STX0_CTL_I2S1RX5WEN			BIT(13)

#define I2STX0_CTL_MULT_DEVICE_SHIFT	16
#define I2STX0_CTL_MULT_DEVICE(x)		((x) << I2STX0_CTL_MULT_DEVICE_SHIFT)
#define I2STX0_CTL_MULT_DEVICE_MASK		I2STX0_CTL_MULT_DEVICE(0x1)
#define		I2STX0_CTL_MULT_NONE		I2STX0_CTL_MULT_DEVICE(0)
#define		I2STX0_CTL_MULT_SPF			I2STX0_CTL_MULT_DEVICE(1)


/* I2S_TX0 FIFOCTL */

#define I2STX0_FIFOCTL_FIFO_RST_SHIFT		0
#define I2STX0_FIFOCTL_FIFO_RST				BIT(0)

#define I2STX0_FIFOCTL_FIFO_DEN_SHIFT		1
#define I2STX0_FIFOCTL_FIFO_DEN				BIT(1)

#define I2STX0_FIFOCTL_FIFO_IEN_SHIFT		2
#define I2STX0_FIFOCTL_FIFO_IEN				BIT(2)

#define I2STX0_FIFOCTL_FIFO_SEL_SHIFT		3
#define I2STX0_FIFOCTL_FIFO_SEL(x)			((x) << I2STX0_FIFOCTL_FIFO_SEL_SHIFT)
#define I2STX0_FIFOCTL_FIFO_SEL_MASK		I2STX0_FIFOCTL_FIFO_SEL(0x01)
#define 	I2STX0_FIFOCTL_FIFO_SEL_DAC		I2STX0_FIFOCTL_FIFO_SEL(0)
#define 	I2STX0_FIFOCTL_FIFO_SEL_I2STX0	I2STX0_FIFOCTL_FIFO_SEL(1)

#define I2STX0_FIFOCTL_FIFO_IN_SHIFT		4
#define I2STX0_FIFOCTL_FIFO_IN(x)			((x) << I2STX0_FIFOCTL_FIFO_IN_SHIFT)
#define I2STX0_FIFOCTL_FIFO_IN_MASK			I2STX0_FIFOCTL_FIFO_IN(0x03)
#define 	I2STX0_FIFOCTL_FIFO_IN_CPU		I2STX0_FIFOCTL_FIFO_IN(0)
#define 	I2STX0_FIFOCTL_FIFO_IN_DMA		I2STX0_FIFOCTL_FIFO_IN(1)
#define 	I2STX0_FIFOCTL_FIFO_IN_ASRC		I2STX0_FIFOCTL_FIFO_IN(2)
#define 	I2STX0_FIFOCTL_FIFO_IN_DSP		I2STX0_FIFOCTL_FIFO_IN(3)

#define I2STX0_FIFOCTL_ASRC_SEL_SHIFT		6
#define I2STX0_FIFOCTL_ASRC_SEL(x)			((x) << I2STX0_FIFOCTL_ASRC_SEL_SHIFT)
#define I2STX0_FIFOCTL_ASRC_SEL_MASK		I2STX0_FIFOCTL_ASRC_SEL(0x01)
#define 	I2STX0_FIFOCTL_ASRC_SEL_ASRC0	I2STX0_FIFOCTL_ASRC_SEL(0)
#define 	I2STX0_FIFOCTL_ASRC_SEL_ASRC1	I2STX0_FIFOCTL_ASRC_SEL(1)

#define I2STX0_FIFOCTL_FIFO_DMAWIDTH_SHIFT	7
#define I2STX0_FIFOCTL_FIFO_DMAWIDTH(x)		((x) << I2STX0_FIFOCTL_FIFO_DMAWIDTH_SHIFT)
#define I2STX0_FIFOCTL_FIFO_DMAWIDTH_MASK	I2STX0_FIFOCTL_FIFO_DMAWIDTH(0x1)
#define		I2STX0_FIFOCTL_DMAWIDTH_32		I2STX0_FIFOCTL_FIFO_DMAWIDTH(0)
#define		I2STX0_FIFOCTL_DMAWIDTH_16		I2STX0_FIFOCTL_FIFO_DMAWIDTH(1)


/* I2S_TX0 FIFOSTAT */

#define I2STX0_STAT_TFFU					BIT(6)
#define I2STX0_STAT_IP						BIT(7)
#define I2STX0_STAT_FIFOS_SHIFT				0
#define I2STX0_STAT_FIFOS(x)				((x) << I2STX0_STAT_FIFOS_SHIFT)
#define I2STX0_STAT_FIFOS_MASK				I2STX0_STAT_FIFOS(0x1F)

/* I2STX_SRDCTL */
#define I2ST0_SRDCTL_MUTE_EN                BIT(12) /* If detect sample rate or channel width changing, mute the TX output as 0 */
#define I2ST0_SRDCTL_SRD_IE                 BIT(8) /* sample rate detect result change interrupt enable */

#define I2ST0_SRDCTL_CNT_TIM_SHIFT          (4) /* slave mode sample rate detect counter period select */
#define I2ST0_SRDCTL_CNT_TIM_MASK           (0x3 << I2ST0_SRDCTL_CNT_TIM_SHIFT)
#define I2ST0_SRDCTL_CNT_TIM(x)             ((x) << I2ST0_SRDCTL_CNT_TIM_SHIFT)

#define I2ST0_SRDCTL_SRD_TH_SHIFT           (1) /* sample rate detecting sensitivity setting */
#define I2ST0_SRDCTL_SRD_TH_MASK            (0x7 << I2ST0_SRDCTL_SRD_TH_SHIFT)
#define I2ST0_SRDCTL_SRD_TH(x)              ((x) << I2ST0_SRDCTL_SRD_TH_SHIFT)

#define I2ST0_SRDCTL_SRD_EN                 BIT(0) /* slave mode sample rate detect enable */

/* I2STX_SRDSTA */
#define I2ST0_SRDSTA_CNT_SHIFT              (12) /* CNT of LRCLK which sampling by SRC_CLK */
#define I2ST0_SRDSTA_CNT_MASK               (0x1FFF << I2ST0_SRDSTA_CNT_SHIFT)
#define I2ST0_SRDSTA_CNT(x)                 ((x) << I2ST0_SRDSTA_CNT_SHIFT)

#define I2ST0_SRDSTA_TO_PD                  BIT(11) /* SRD timput irq pending */
#define I2ST0_SRDSTA_SRC_PD                 BIT(10) /* sample rate changing detection interrupt pending */
#define I2ST0_SRDSTA_CHW_PD                 BIT(8) /* channel width change irq pending */

#define I2ST0_SRDSTA_WL_SHIFT               (0) /* channel word lenght */
#define I2ST0_SRDSTA_WL_MASK                (0x3 << I2ST0_SRDSTA_WL_SHIFT)
#define I2ST0_SRDSTA_WL(x)                  ((x) << I2ST0_SRDSTA_WL_SHIFT)

/* I2STX_FIFO_CNT */
#define I2ST0_FIFO_CNT_IP                   BIT(18) /* I2STX FIFO counter overflow irq pending */
#define I2ST0_FIFO_CNT_IE                   BIT(17) /* I2STX FIFO counter overflow irq enable */
#define I2ST0_FIFO_CNT_EN                   BIT(16) /* I2STX FIFO counter enable */
#define I2ST0_FIFO_CNT_CNT_SHIFT            (0) /* I2STX FIFO counter */
#define I2ST0_FIFO_CNT_CNT_MASK             (0xFFFF << I2ST0_FIFO_CNT_CNT_SHIFT)

/***********************************************************************************
**							I2S RX0  Module  Register
************************************************************************************/

/* I2S_RX0 CTL */

#define I2SRX0_CTL_RXEN						BIT(0)

#define I2SRX0_CTL_DATA_FORMAT_SHIFT		1
#define I2SRX0_CTL_DATA_FORMAT_MASK				(0x3 << I2SRX0_CTL_DATA_FORMAT_SHIFT)
#define I2SRX0_CTL_DATA_FORMAT(x)				(((x) & 0x3) << I2SRX0_CTL_DATA_FORMAT_SHIFT)
#define	I2SRX0_CTL_DATA_FORMAT_I2S				I2SRX0_CTL_DATA_FORMAT(0)
#define	I2SRX0_CTL_DATA_FORMAT_LEFT_JUSTIFIED	I2SRX0_CTL_DATA_FORMAT(1)
#define	I2SRX0_CTL_DATA_FORMAT_RIGHT_JUSTIFIED	I2SRX0_CTL_DATA_FORMAT(2)

#define I2SRX0_CTL_BCLK_SET_SHIFT		3
#define I2SRX0_CTL_BCLK_SET_MASK		(0x1 << 3)
#define I2SRX0_CTL_BCLK_SET(x)			(((x) & 0x1) << 3)
#define	I2SRX0_CTL_BCLK_SET_64FS		I2SRX0_CTL_BCLK_SET(0)
#define	I2SRX0_CTL_BCLK_SET_32FS		I2SRX0_CTL_BCLK_SET(1)

#define I2SRX0_CTL_WIDTH_MASK			(0x3 << 4)
#define I2SRX0_CTL_WIDTH(x)				(((x) & 0x3) << 4)
#define	I2SRX0_CTL_WIDTH_16BIT			I2SRX0_CTL_WIDTH(0)
#define	I2SRX0_CTL_WIDTH_20BIT			I2SRX0_CTL_WIDTH(1)
#define	I2SRX0_CTL_WIDTH_24BIT			I2SRX0_CTL_WIDTH(2)

#define I2SRX0_CTL_SMCLK_MASK			BIT(6)
#define	I2SRX0_CTL_SMCLK_INT			0
#define	I2SRX0_CTL_SMCLK_EXT			I2SRX0_CTL_SMCLK_MASK

#define I2SRX0_CTL_MODE_MASK			BIT(7)
#define	I2SRX0_CTL_MODE_MASTER			0
#define	I2SRX0_CTL_MODE_SLAVE			I2SRX0_CTL_MODE_MASK

#define I2SRX0_CTL_RX0RX15WEN			BIT(12)


/***********************************************************************************
**							I2S RX1  Module  Register
************************************************************************************/

/* I2S_RX1 CTL */

#define I2SRX1_CTL_RXEN						BIT(0)

#define I2SRX1_CTL_DATA_FORMAT_SHIFT		1
#define I2SRX1_CTL_DATA_FORMAT_MASK				(0x3 << I2SRX1_CTL_DATA_FORMAT_SHIFT)
#define I2SRX1_CTL_DATA_FORMAT(x)				(((x) & 0x3) << I2SRX1_CTL_DATA_FORMAT_SHIFT)
#define	I2SRX1_CTL_DATA_FORMAT_I2S				I2SRX1_CTL_DATA_FORMAT(0)
#define	I2SRX1_CTL_DATA_FORMAT_LEFT_JUSTIFIED	I2SRX1_CTL_DATA_FORMAT(1)
#define	I2SRX1_CTL_DATA_FORMAT_RIGHT_JUSTIFIED	I2SRX1_CTL_DATA_FORMAT(2)

#define I2SRX1_CTL_BCLK_SET_SHIFT		3
#define I2SRX1_CTL_BCLK_SET_MASK		(0x1 << 3)
#define I2SRX1_CTL_BCLK_SET(x)			(((x) & 0x1) << 3)
#define	I2SRX1_CTL_BCLK_SET_64FS		I2SRX1_CTL_BCLK_SET(0)
#define	I2SRX1_CTL_BCLK_SET_32FS		I2SRX1_CTL_BCLK_SET(1)

#define I2SRX1_CTL_WIDTH_MASK			(0x3 << 4)
#define I2SRX1_CTL_WIDTH(x)				(((x) & 0x3) << 4)
#define	I2SRX1_CTL_WIDTH_16BIT			I2SRX1_CTL_WIDTH(0)
#define	I2SRX1_CTL_WIDTH_20BIT			I2SRX1_CTL_WIDTH(1)
#define	I2SRX1_CTL_WIDTH_24BIT			I2SRX1_CTL_WIDTH(2)

#define I2SRX1_CTL_SMCLK_MASK			BIT(6)
#define	I2SRX1_CTL_SMCLK_INT			0
#define	I2SRX1_CTL_SMCLK_EXT			I2SRX1_CTL_SMCLK_MASK

#define I2SRX1_CTL_MODE_MASK			BIT(7)
#define	I2SRX1_CTL_MODE_MASTER			0
#define	I2SRX1_CTL_MODE_SLAVE			I2SRX1_CTL_MODE_MASK

/* I2S_RX1 FIFOCTL */
#define I2SRX1_FIFOCTL_RXFRT_SHIFT		0
#define I2SRX1_FIFOCTL_RXFRT			BIT(0)

#define I2SRX1_FIFOCTL_RXFFDE_SHIFT		1
#define I2SRX1_FIFOCTL_RXFFDE			BIT(1)

#define I2SRX1_FIFOCTL_RXFFIE_SHIFT		2
#define I2SRX1_FIFOCTL_RXFFIE			BIT(2)


#define I2SRX1_FIFOCTL_RXFIS_SHIFT		3
#define I2SRX1_FIFOCTL_RXFIS(x)			((x) << I2SRX1_FIFOCTL_RXFIS_SHIFT)
#define I2SRX1_FIFOCTL_RXFIS_MASK			I2SRX1_FIFOCTL_RXFIS(0x01)
#define 	I2SRX1_FIFOCTL_RXFIS_I2S1RX		I2SRX1_FIFOCTL_RXFIS(0)
#define 	I2SRX1_FIFOCTL_RXFIS_SPDIFRX	I2SRX1_FIFOCTL_RXFIS(1)

#define I2SRX1_FIFOCTL_RXFOS_SHIFT		4
#define I2SRX1_FIFOCTL_RXFOS(x)			((x) << I2SRX1_FIFOCTL_RXFOS_SHIFT)
#define I2SRX1_FIFOCTL_RXFOS_MASK			I2SRX1_FIFOCTL_RXFOS(0x03)
#define 	I2SRX1_FIFOCTL_RXFOS_CPU		I2SRX1_FIFOCTL_RXFOS(0)
#define 	I2SRX1_FIFOCTL_RXFOS_DMA		I2SRX1_FIFOCTL_RXFOS(1)
#define 	I2SRX1_FIFOCTL_RXFOS_ASRC		I2SRX1_FIFOCTL_RXFOS(2)
#define 	I2SRX1_FIFOCTL_RXFOS_DSP		I2SRX1_FIFOCTL_RXFOS(3)

#define I2SRX1_FIFOCTL_FIFO_DMAWIDTH_SHIFT	7
#define I2SRX1_FIFOCTL_FIFO_DMAWIDTH(x)		((x) << I2SRX1_FIFOCTL_FIFO_DMAWIDTH_SHIFT)
#define I2SRX1_FIFOCTL_FIFO_DMAWIDTH_MASK	I2SRX1_FIFOCTL_FIFO_DMAWIDTH(0x1)
#define		I2SRX1_FIFOCTL_DMAWIDTH_32		I2SRX1_FIFOCTL_FIFO_DMAWIDTH(0)
#define		I2SRX1_FIFOCTL_DMAWIDTH_16		I2SRX1_FIFOCTL_FIFO_DMAWIDTH(1)

/* I2S_RX1 FIFOSTAT */

#define I2SRX1_STAT_RXFIP					BIT(6)
#define I2SRX1_STAT_RXFEF					BIT(7)


/***********************************************************************************
**							SPDIF TX   Module  Register
************************************************************************************/

/* SPDTX_CTL */
#define SPDTX_CTL_SPDEN						BIT(0)

#define SPDTX_CTL_SPD_DIS_CTL               BIT(1)
#define SPDTX_CTL_VALIDITY                  BIT(2)


/***********************************************************************************
**							SPDIF RX  Module  Register
************************************************************************************/

/* SPDIFRX_CTL0 */
#define SPDIF_RXEN                          BIT(0)

#define SPDIF_CKEDG_SHIFT                   1
#define SPDIF_CKEDG_MASK		 			(0x1 << SPDIF_CKEDG_SHIFT)
#define SPDIF_CKEDG_SET(x)					(((x) & 0x1) << SPDIF_CKEDG_SHIFT)
#define	SPDIF_CKEDG_SET_POS					SPDIF_CKEDG_SET(0)
#define	SPDIF_CKEDG_SET_NEG					SPDIF_CKEDG_SET(1)

#define SPDIF_RXCTL0_CAL_MODE_SHIFT         2
#define SPDIF_RXCTL0_CAL_MODE_MASK		 	(0x1 << SPDIF_RXCTL0_CAL_MODE_SHIFT)
#define SPDIF_RXCTL0_CAL_MODE_SET(x)		(((x) & 0x1) << SPDIF_RXCTL0_CAL_MODE_SHIFT)
#define	SPDIF_RXCTL0_CAL_MODE_SET_SW		SPDIF_RXCTL0_CAL_MODE_SET(0)
#define	SPDIF_RXCTL0_CAL_MODE_SET_HW		SPDIF_RXCTL0_CAL_MODE_SET(1)

#define SPDIF_RXCTL0_DELTA_MODE_SHIFT       3
#define SPDIF_RXCTL0_DELTA_MODE_MASK		(0x1 << SPDIF_RXCTL0_DELTA_MODE_SHIFT)
#define SPDIF_RXCTL0_DELTA_MODE_SET(x)		(((x) & 0x1) << SPDIF_RXCTL0_DELTA_MODE_SHIFT)
#define	SPDIF_RXCTL0_DELTA_MODE_SET_SW		SPDIF_RXCTL0_DELTA_MODE_SET(0)
#define	SPDIF_RXCTL0_DELTA_MODE_SET_HW		SPDIF_RXCTL0_DELTA_MODE_SET(1)

#define SPDIF_RXCTL0_DELTA_MIN_SHIFT        4
#define SPDIF_RXCTL0_DELTA_MIN_MASK			(0xF << SPDIF_RXCTL0_DELTA_MIN_SHIFT)
#define SPDIF_RXCTL0_DELTA_MIN_SET(x)		(((x) & 0xF) << SPDIF_RXCTL0_DELTA_MIN_SHIFT)

#define SPDIF_RXCTL0_DELTA_ADD_SHIFT        8
#define SPDIF_RXCTL0_DELTA_ADD_MASK			(0xF << SPDIF_RXCTL0_DELTA_ADD_SHIFT)
#define SPDIF_RXCTL0_DELTA_ADD_SET(x)		(((x) & 0xF) << SPDIF_RXCTL0_DELTA_ADD_SHIFT)

#define SPDIF_RX_DAMEN                      BIT(12)

#define SPDIF_RX_DAMS						BIT(13)

#define SPDIF_RX_VBM						BIT(14)


/* SPDIFRX_CTL1 */
#define SPDIF_RX_WID1TCFG_SHIFT 			0
#define SPDIF_RX_WID1TCFG_MASK				(0xFF << SPDIF_RX_WID1TCFG_SHIFT)
#define SPDIF_RX_WID1TCFG_SET(x)			(((x) & 0xFF) << SPDIF_RX_WID1TCFG_SHIFT)

#define SPDIF_RX_WID1P5TCFG_SHIFT 			8
#define SPDIF_RX_WID1P5TCFG_MASK			(0xFF << SPDIF_RX_WID1P5TCFG_SHIFT)
#define SPDIF_RX_WID1P5TCFG_SET(x)			(((x) & 0xFF) << SPDIF_RX_WID1P5TCFG_SHIFT)

#define SPDIF_RX_WID2TCFG_SHIFT 			16
#define SPDIF_RX_WID2TCFG_MASK				(0xFF << SPDIF_RX_WID2TCFG_SHIFT)
#define SPDIF_RX_WID2TCFG_SET(x)			(((x) & 0xFF) << SPDIF_RX_WID2TCFG_SHIFT)


/* SPDIFRX_CTL2 */
#define SPDIF_RX_WID2P5TCFG_SHIFT 			0
#define SPDIF_RX_WID2P5TCFG_MASK			(0x1FF << SPDIF_RX_WID2P5TCFG_SHIFT)
#define SPDIF_RX_WID2P5TCFG_SET(x)			(((x) & 0x1FF) << SPDIF_RX_WID2P5TCFG_SHIFT)

#define SPDIF_RX_WID3TCFG_SHIFT 			9
#define SPDIF_RX_WID3TCFG_MASK				(0x1FF << SPDIF_RX_WID3TCFG_SHIFT)
#define SPDIF_RX_WID3TCFG_SET(x)			(((x) & 0x1FF) << SPDIF_RX_WID3TCFG_SHIFT)


#define SPDIF_RX_WID4TCFG_SHIFT 			18
#define SPDIF_RX_WID4TCFG_MASK				(0x1FF << SPDIF_RX_WID4TCFG_SHIFT)
#define SPDIF_RX_WID4TCFG_SET(x)			(((x) & 0x1FF) << SPDIF_RX_WID4TCFG_SHIFT)


/* SPDIFRX_PD */
#define SPDIF_RX_BLKIRQEN					BIT(0)
#define SPDIF_RX_SUBIRQEN					BIT(1)
#define SPDIF_RX_BMCIRQEN					BIT(2)
#define SPDIF_RX_SRCIRQEN					BIT(3)
#define SPDIF_RX_CSUPIRQEN					BIT(4)
#define SPDIF_RX_CSSRCIRQEN					BIT(5)
#define SPDIF_RX_SRTOEN						BIT(6)

#define SPDIF_RX_BLKRCVPD					BIT(8)
#define SPDIF_RX_SUBRCVPD					BIT(9)
#define SPDIF_RX_BMCERPD					BIT(10)
#define SPDIF_RX_SRCPD						BIT(11)
#define SPDIF_RX_CSUPPD						BIT(12)
#define SPDIF_RX_CSSRUPPD					BIT(13)
#define SPDIF_RX_SRTOPD						BIT(14)

#define SPDIF_RX_BL_HEADPD					BIT(16)


/* SPDIFRX_SAMP */
#define SPDIF_RX_SAMP_EN					BIT(0)

#define SPDIF_RX_SAMP_DELTA_SHIFT         	1
#define SPDIF_RX_SAMP_DELTA_MASK		 	(0xF << SPDIF_RX_SAMP_DELTA_SHIFT)
#define SPDIF_RX_SAMP_DELTA_SET(x)			(((x) & 0xF) << SPDIF_RX_SAMP_DELTA_SHIFT)

#define SPDIF_RX_SAMP_CNT_SHIFT         	16
#define SPDIF_RX_SAMP_CNT_MASK		 		(0xFFF << SPDIF_RX_SAMP_CNT_SHIFT)

#define SPDIF_RX_SAMP_VALID_SHIFT         	28
#define SPDIF_RX_SAMP_VALID_MASK		 	(0x1 << SPDIF_RX_SAMP_VALID_SHIFT)


/* SPDIFRX_SRTO_THRES */
#define SPDIF_RX_SRTO_THRES_SHIFT         	0
#define SPDIF_RX_SRTO_THRES_MASK		 	(0xFFFFFF << SPDIF_RX_SRTO_THRES_SHIFT)
#define SPDIF_RX_SRTO_THRES_SET(x)			(((x) & 0xFFFFFF) << SPDIF_RX_SRTO_THRES_SHIFT)


/***********************************************************************************
**							ASRC  Module  Register
************************************************************************************/

/* ASRC OUT0 CTL */
#define ASRC_OUT0_CTL_BYPASSEN_SHIFT		0
#define ASRC_OUT0_CTL_BYPASSEN				BIT(0)

#define ASRC_OUT0_CTL_OUTCH0EN              BIT(1)

#define ASRC_OUT0_CTL_RAMSEL_SHIFT          3
#define ASRC_OUT0_CTL_RAMSEL(x)				((x) << ASRC_OUT0_CTL_RAMSEL_SHIFT)
#define ASRC_OUT0_CTL_RAMSEL_MASK			ASRC_OUT0_CTL_RAMSEL(0x7)
#define		ASRC_OUT0_CTL_RAMSEL_P012		ASRC_OUT0_CTL_RAMSEL(0)
#define		ASRC_OUT0_CTL_RAMSEL_P01		ASRC_OUT0_CTL_RAMSEL(1)
#define		ASRC_OUT0_CTL_RAMSEL_P0			ASRC_OUT0_CTL_RAMSEL(2)
#define		ASRC_OUT0_CTL_RAMSEL_U0			ASRC_OUT0_CTL_RAMSEL(3)
#define		ASRC_OUT0_CTL_RAMSEL_U0P5		ASRC_OUT0_CTL_RAMSEL(4)

#define ASRC_OUT0_CTL_OUTCH0_WCLK_SHIFT     6
#define ASRC_OUT0_CTL_OUTCH0_WCLK(x)		((x) << ASRC_OUT0_CTL_OUTCH0_WCLK_SHIFT)
#define ASRC_OUT0_CTL_OUTCH0_W_CLKSEL_MASK	ASRC_OUT0_CTL_OUTCH0_WCLK(0x3)
#define		ASRC_OUT0_CTL_WCLKSEL_CPU		ASRC_OUT0_CTL_OUTCH0_WCLK(0)
#define		ASRC_OUT0_CTL_WCLKSEL_DMA		ASRC_OUT0_CTL_OUTCH0_WCLK(2)
#define		ASRC_OUT0_CTL_WCLKSEL_DSP		ASRC_OUT0_CTL_OUTCH0_WCLK(3)

#define ASRC_OUT0_CTL_OUTCH0_RCLK_SHIFT     8
#define ASRC_OUT0_CTL_OUTCH0_RCLK(x)		((x) << ASRC_OUT0_CTL_OUTCH0_RCLK_SHIFT)
#define ASRC_OUT0_CTL_OUTCH0_R_CLKSEL_MASK	ASRC_OUT0_CTL_OUTCH0_RCLK(0x3)
#define		ASRC_OUT0_CTL_RCLKSEL_CPU		ASRC_OUT0_CTL_OUTCH0_RCLK(0)
#define		ASRC_OUT0_CTL_RCLKSEL_I2S		ASRC_OUT0_CTL_OUTCH0_RCLK(1)
#define		ASRC_OUT0_CTL_RCLKSEL_DAC		ASRC_OUT0_CTL_OUTCH0_RCLK(2)

#define ASRC_OUT0_CTL_OUTCH0_MODESEL_SHIFT	10
#define ASRC_OUT0_CTL_OUTCH0_MODESEL(x)		((x) << ASRC_OUT0_CTL_OUTCH0_MODESEL_SHIFT)
#define ASRC_OUT0_CTL_OUTCH0_MODESEL_MASK	ASRC_OUT0_CTL_OUTCH0_MODESEL(0x1)
#define		ASRC_OUT0_CTL_MODESEL_SRC		ASRC_OUT0_CTL_OUTCH0_MODESEL(0)
#define		ASRC_OUT0_CTL_MODESEL_ASRC		ASRC_OUT0_CTL_OUTCH0_MODESEL(1)


#define ASRC_OUT0_CTL_RESETWFIFO			BIT(11)
#define ASRC_OUT0_CTL_RESETRFIFO			BIT(12)

#define ASRC_OUT0_CTL_OUTCH0_AVERAGENUM_SHIFT	16
#define ASRC_OUT0_CTL_OUTCH0_AVERAGENUM(x)  ((x) << ASRC_OUT0_CTL_OUTCH0_AVERAGENUM_SHIFT)

/* ASRC OUT1 CTL */
#define ASRC_OUT1_CTL_BYPASSEN_SHIFT		0
#define ASRC_OUT1_CTL_BYPASSEN				BIT(0)

#define ASRC_OUT1_CTL_OUTCH1EN              BIT(1)

#define ASRC_OUT1_CTL_RAMSEL_SHIFT          3
#define ASRC_OUT1_CTL_RAMSEL(x)				((x) << ASRC_OUT1_CTL_RAMSEL_SHIFT)
#define ASRC_OUT1_CTL_RAMSEL_MASK			ASRC_OUT1_CTL_RAMSEL(0x7)
#define		ASRC_OUT1_CTL_RAMSEL_P2			ASRC_OUT1_CTL_RAMSEL(0)
#define		ASRC_OUT1_CTL_RAMSEL_P3			ASRC_OUT1_CTL_RAMSEL(1)
#define		ASRC_OUT1_CTL_RAMSEL_P12_16		ASRC_OUT1_CTL_RAMSEL(2)
#define		ASRC_OUT1_CTL_RAMSEL_P1			ASRC_OUT1_CTL_RAMSEL(4)
#define		ASRC_OUT1_CTL_RAMSEL_P12_24		ASRC_OUT1_CTL_RAMSEL(5)

#define ASRC_OUT1_CTL_OUTCH1_WCLK_SHIFT     6
#define ASRC_OUT1_CTL_OUTCH1_WCLK(x)		((x) << ASRC_OUT1_CTL_OUTCH1_WCLK_SHIFT)
#define ASRC_OUT1_CTL_OUTCH1_W_CLKSEL_MASK	ASRC_OUT1_CTL_OUTCH1_WCLK(0x3)
#define		ASRC_OUT1_CTL_WCLKSEL_CPU		ASRC_OUT1_CTL_OUTCH1_WCLK(0)
#define		ASRC_OUT1_CTL_WCLKSEL_DMA		ASRC_OUT1_CTL_OUTCH1_WCLK(2)
#define		ASRC_OUT1_CTL_WCLKSEL_DSP		ASRC_OUT1_CTL_OUTCH1_WCLK(3)


#define ASRC_OUT1_CTL_OUTCH1_RCLK_SHIFT		8
#define ASRC_OUT1_CTL_OUTCH1_RCLK(x)		((x) << ASRC_OUT1_CTL_OUTCH1_RCLK_SHIFT)
#define ASRC_OUT1_CTL_OUTCH1_R_CLKSEL_MASK	ASRC_OUT1_CTL_OUTCH1_RCLK(0x3)
#define		ASRC_OUT1_CTL_RCLKSEL_CPU		ASRC_OUT1_CTL_OUTCH1_RCLK(0)
#define		ASRC_OUT1_CTL_RCLKSEL_I2S		ASRC_OUT1_CTL_OUTCH1_RCLK(1)
#define		ASRC_OUT1_CTL_RCLKSEL_DAC		ASRC_OUT1_CTL_OUTCH1_RCLK(2)


#define ASRC_OUT1_CTL_OUTCH1_MODESEL_SHIFT	10
#define ASRC_OUT1_CTL_OUTCH1_MODESEL(x)		((x) << ASRC_OUT1_CTL_OUTCH1_MODESEL_SHIFT)
#define ASRC_OUT1_CTL_OUTCH1_MODESEL_MASK	ASRC_OUT1_CTL_OUTCH1_MODESEL(0x1)
#define		ASRC_OUT1_CTL_MODESEL_SRC		ASRC_OUT1_CTL_OUTCH1_MODESEL(0)
#define		ASRC_OUT1_CTL_MODESEL_ASRC		ASRC_OUT1_CTL_OUTCH1_MODESEL(1)


#define ASRC_OUT1_CTL_RESETWFIFO			BIT(11)
#define ASRC_OUT1_CTL_RESETRFIFO			BIT(12)

#define ASRC_OUT1_CTL_OUTCH1_AVERAGENUM_SHIFT	16
#define ASRC_OUT1_CTL_OUTCH1_AVERAGENUM(x)  ((x) << ASRC_OUT1_CTL_OUTCH1_AVERAGENUM_SHIFT)


/* ASRC IN CTL */
#define ASRC_IN_CTL_BYPASSEN_SHIFT			0
#define ASRC_IN_CTL_BYPASSEN				BIT(0)

#define ASRC_IN_CTL_INEN		            BIT(1)

#define ASRC_IN_CTL_TABLESEL_SHIFT          2
#define ASRC_IN_CTL_TABLESEL(x)				((x) << ASRC_IN_CTL_TABLESEL_SHIFT)
#define ASRC_IN_CTL_TABLESEL_MASK			ASRC_IN_CTL_TABLESEL(0x1)
#define		ASRC_IN_CTL_TABLESEL_512		ASRC_IN_CTL_TABLESEL(0)
#define		ASRC_IN_CTL_TABLESEL_1024		ASRC_IN_CTL_TABLESEL(1)

#define ASRC_IN_CTL_RAMSEL_SHIFT          	3
#define ASRC_IN_CTL_RAMSEL(x)				((x) << ASRC_IN_CTL_RAMSEL_SHIFT)
#define ASRC_IN_CTL_RAMSEL_MASK				ASRC_IN_CTL_RAMSEL(0x7)
#define		ASRC_IN_CTL_RAMSEL_P12			ASRC_IN_CTL_RAMSEL(0)
#define		ASRC_IN_CTL_RAMSEL_P2		 	ASRC_IN_CTL_RAMSEL(1)
#define		ASRC_IN_CTL_RAMSEL_U1			ASRC_IN_CTL_RAMSEL(2)
#define		ASRC_IN_CTL_RAMSEL_U1P4		 	ASRC_IN_CTL_RAMSEL(3)

#define ASRC_IN_CTL_RCLKSEL_SHIFT           6
#define ASRC_IN_CTL_RCLKSEL(x)				((x) << ASRC_IN_CTL_RCLKSEL_SHIFT)
#define ASRC_IN_CTL_RCLKSEL_MASK			ASRC_IN_CTL_RCLKSEL(0x3)
#define		ASRC_IN_CTL_RCLKSEL_CPU			ASRC_IN_CTL_RCLKSEL(0)
#define		ASRC_IN_CTL_RCLKSEL_DMA			ASRC_IN_CTL_RCLKSEL(2)
#define		ASRC_IN_CTL_RCLKSEL_DSP			ASRC_IN_CTL_RCLKSEL(3)

#define ASRC_IN_CTL_WCLKSEL_SHIFT           8
#define ASRC_IN_CTL_WCLKSEL(x)				((x) << ASRC_IN_CTL_WCLKSEL_SHIFT)
#define ASRC_IN_CTL_WCLKSEL_MASK			ASRC_IN_CTL_WCLKSEL(0x3)
#define		ASRC_IN_CTL_WCLKSEL_CPU			ASRC_IN_CTL_WCLKSEL(0)
#define		ASRC_IN_CTL_WCLKSEL_I2SRX1		ASRC_IN_CTL_WCLKSEL(1)
#define		ASRC_IN_CTL_WCLKSEL_I2SRX0		ASRC_IN_CTL_WCLKSEL(2)

#define ASRC_IN_CTL_INCH0_MODESEL_SHIFT		10
#define ASRC_IN_CTL_INCH0_MODESEL(x)		((x) << ASRC_IN_CTL_INCH0_MODESEL_SHIFT)
#define ASRC_IN_CTL_INCH0_MODESEL_MASK		ASRC_IN_CTL_INCH0_MODESEL(0x1)
#define		ASRC_IN_CTL_MODESEL_SRC			ASRC_IN_CTL_INCH0_MODESEL(0)
#define		ASRC_IN_CTL_MODESEL_ASRC		ASRC_IN_CTL_INCH0_MODESEL(1)

#define ASRC_IN_CTL_RESETRFIFO				BIT(11)
#define ASRC_IN_CTL_RESETWFIFO				BIT(12)

#define ASRC_IN_CTL_INCH0_AVERAGENUM_SHIFT	16
#define ASRC_IN_CTL_INCH0_AVERAGENUM(x)  	((x) << ASRC_IN_CTL_INCH0_AVERAGENUM_SHIFT)


/* ASRC IN 1 CTL */
#define ASRC_IN1_CTL_BYPASSEN_SHIFT			0
#define ASRC_IN1_CTL_BYPASSEN				BIT(0)

#define ASRC_IN1_CTL_INEN		            BIT(1)

#define ASRC_IN1_CTL_RAMSEL_SHIFT          	3
#define ASRC_IN1_CTL_RAMSEL(x)				((x) << ASRC_IN1_CTL_RAMSEL_SHIFT)
#define ASRC_IN1_CTL_RAMSEL_MASK			ASRC_IN1_CTL_RAMSEL(0x7)
#define		ASRC_IN1_CTL_RAMSEL_P3			ASRC_IN1_CTL_RAMSEL(0)
#define		ASRC_IN1_CTL_RAMSEL_P1		 	ASRC_IN1_CTL_RAMSEL(2)
#define		ASRC_IN1_CTL_RAMSEL_P36			ASRC_IN1_CTL_RAMSEL(3)

#define ASRC_IN1_CTL_RCLKSEL_SHIFT           6
#define ASRC_IN1_CTL_RCLKSEL(x)				((x) << ASRC_IN1_CTL_RCLKSEL_SHIFT)
#define ASRC_IN1_CTL_RCLKSEL_MASK			ASRC_IN1_CTL_RCLKSEL(0x3)
#define		ASRC_IN1_CTL_RCLKSEL_CPU		ASRC_IN1_CTL_RCLKSEL(0)
#define		ASRC_IN1_CTL_RCLKSEL_DMA		ASRC_IN1_CTL_RCLKSEL(2)
#define		ASRC_IN1_CTL_RCLKSEL_DSP		ASRC_IN1_CTL_RCLKSEL(3)

#define ASRC_IN1_CTL_WCLKSEL_SHIFT           8
#define ASRC_IN1_CTL_WCLKSEL(x)				((x) << ASRC_IN1_CTL_WCLKSEL_SHIFT)
#define ASRC_IN1_CTL_WCLKSEL_MASK			ASRC_IN1_CTL_WCLKSEL(0x3)
#define		ASRC_IN1_CTL_WCLKSEL_CPU		ASRC_IN1_CTL_WCLKSEL(0)
#define		ASRC_IN1_CTL_WCLKSEL_I2SRX1		ASRC_IN1_CTL_WCLKSEL(1)
#define		ASRC_IN1_CTL_WCLKSEL_I2SRX0		ASRC_IN1_CTL_WCLKSEL(2)

#define ASRC_IN1_CTL_INCH1_MODESEL_SHIFT	10
#define ASRC_IN1_CTL_INCH1_MODESEL(x)		((x) << ASRC_IN1_CTL_INCH1_MODESEL_SHIFT)
#define ASRC_IN1_CTL_INCH1_MODESEL_MASK		ASRC_IN1_CTL_INCH1_MODESEL(0x1)
#define		ASRC_IN1_CTL_MODESEL_SRC			ASRC_IN1_CTL_INCH1_MODESEL(0)
#define		ASRC_IN1_CTL_MODESEL_ASRC		ASRC_IN1_CTL_INCH1_MODESEL(1)

#define ASRC_IN1_CTL_RESETRFIFO				BIT(11)
#define ASRC_IN1_CTL_RESETWFIFO				BIT(12)

#define ASRC_IN1_CTL_INCH1_AVERAGENUM_SHIFT	16
#define ASRC_IN1_CTL_INCH1_AVERAGENUM(x)  	((x) << ASRC_IN1_CTL_INCH1_AVERAGENUM_SHIFT)


/***********************************************************************************
**							Audio Hardware Register
************************************************************************************/

/* audio dac hardware controller */
struct acts_audio_dac {
	volatile uint32_t digctl;
	volatile uint32_t fifoctl;
	volatile uint32_t stat;
	volatile uint32_t dat0;
	volatile uint32_t dat1;
	volatile uint32_t vol_lch;
	volatile uint32_t vol_rch;
	volatile uint32_t anactl;
	volatile uint32_t bias;
	volatile uint32_t vol;
	volatile uint32_t dat0cnt;
	volatile uint32_t dat1cnt;
};

/* audio i2s tx0 hardware controller */
struct acts_audio_i2stx0 {
	volatile uint32_t tx0_ctl;
	volatile uint32_t tx0_fifoctl;
	volatile uint32_t tx0_fifostat;
	volatile uint32_t tx0_dat;
	volatile uint32_t tx0_srdctl;
	volatile uint32_t tx0_srdstat;
	volatile uint32_t tx0_reserved0;
	volatile uint32_t tx0_reserved1;
	volatile uint32_t tx0_fifocnt;
};

/* audio spdiftx hardware controller */
struct acts_audio_spdiftx {
	volatile uint32_t spdtx_ctl;
	volatile uint32_t spdtx_csl;
	volatile uint32_t spdtx_csh;
};

/* audio asrc hardware controller */
struct acts_audio_asrc {
	volatile uint32_t asrc_in_ctl;
	volatile uint32_t asrc_in_dec0;
	volatile uint32_t asrc_in_dec1;
	volatile uint32_t asrc_in_num;
	volatile uint32_t asrc_in_rfifo;
	volatile uint32_t asrc_in_wfifo;
	volatile uint32_t asrc_in_lgain;
	volatile uint32_t asrc_in_rgain;
	volatile uint32_t asrc_in_ip;
	volatile uint32_t asrc_in_time;
	volatile uint32_t asrc_in_thres_hf;
	volatile uint32_t asrc_in_thres_he;
	volatile uint32_t asrc_out0_ctl;
	volatile uint32_t asrc_out0_dec0;
	volatile uint32_t asrc_out0_dec1;
	volatile uint32_t asrc_out0_num;
	volatile uint32_t asrc_out0_rfifo;
	volatile uint32_t asrc_out0_wfifo;
	volatile uint32_t asrc_out0_lgain;
	volatile uint32_t asrc_out0_rgain;
	volatile uint32_t asrc_out0_ip;
	volatile uint32_t asrc_out0_time;
	volatile uint32_t asrc_out0_thres_hf;
	volatile uint32_t asrc_out0_thres_he;
	volatile uint32_t asrc_out1_ctl;
	volatile uint32_t asrc_out1_dec0;
	volatile uint32_t asrc_out1_dec1;
	volatile uint32_t asrc_out1_num;
	volatile uint32_t asrc_out1_rfifo;
	volatile uint32_t asrc_out1_wfifo;
	volatile uint32_t asrc_out1_lgain;
	volatile uint32_t asrc_out1_rgain;
	volatile uint32_t asrc_out1_ip;
	volatile uint32_t asrc_out1_time;
	volatile uint32_t asrc_out1_thres_hf;
	volatile uint32_t asrc_out1_thres_he;
	volatile uint32_t asrc_in1_ctl;
	volatile uint32_t asrc_in1_dec0;
	volatile uint32_t asrc_in1_dec1;
	volatile uint32_t asrc_in1_num;
	volatile uint32_t asrc_in1_rfifo;
	volatile uint32_t asrc_in1_wfifo;
	volatile uint32_t asrc_in1_lgain;
	volatile uint32_t asrc_in1_rgain;
	volatile uint32_t asrc_in1_ip;
	volatile uint32_t asrc_in1_time;
	volatile uint32_t asrc_in1_thres_hf;
	volatile uint32_t asrc_in1_thres_he;
	volatile uint32_t asrc_clk_ctl;
	volatile uint32_t asrc_in_dmactl;
	volatile uint32_t asrc_out0_dmactl;
	volatile uint32_t asrc_out1_dmactl;
	volatile uint32_t asrc_in1_dmactl;
	volatile uint32_t asrc_int_en;
	volatile uint32_t asrc_int_pd;
	volatile uint32_t asrc_in_int_thres;
	volatile uint32_t asrc_out0_int_thres;
	volatile uint32_t asrc_out1_int_thres;
	volatile uint32_t asrc_in1_int_thres;
	volatile uint32_t asrc_out0_st_level;
	volatile uint32_t asrc_out1_st_level;
};


/* audio adc hardware controller */
struct acts_audio_adc {
	volatile uint32_t digctl;
	volatile uint32_t fifoctl;
	volatile uint32_t stat;
	volatile uint32_t dat;
	volatile uint32_t anactl;
	volatile uint32_t bias;
	volatile uint32_t reserved0;
	volatile uint32_t reserved1;
	volatile uint32_t dmicctl;
};

/* audio i2s rx0 hardware controller */
struct acts_audio_i2srx0 {
	volatile uint32_t rx0_ctl;
	volatile uint32_t reserved0;
	volatile uint32_t reserved1;
	volatile uint32_t reserved2;
	volatile uint32_t rx0_srdctl;
	volatile uint32_t rx0_srdsta;
};

/* audio i2s rx1 hardware controller */
struct acts_audio_i2srx1 {
	volatile uint32_t rx1_ctl;
	volatile uint32_t rx1_fifoctl;
	volatile uint32_t rx1_fifostat;
	volatile uint32_t rx1_dat;
	volatile uint32_t rx1_srdctl;
	volatile uint32_t rx1_srdsta;
};

/* audio spdifrx hardware controller */
struct acts_audio_spdifrx {
	volatile uint32_t spdrx_ctl0;
	volatile uint32_t spdrx_ctl1;
	volatile uint32_t spdrx_ctl2;
	volatile uint32_t spdrx_pd;
	volatile uint32_t spdrx_dbg;
	volatile uint32_t spdrx_cnt;
	volatile uint32_t spdrx_csl;
	volatile uint32_t spdrx_csh;
	volatile uint32_t spdrx_samp;
	volatile uint32_t spdrx_srto_thres;
};

/**********************************************************************************************/

#define		PLL_49152			49152000
#define		PLL_24576			24576000
#define 	PLL_16384			16384000
#define		PLL_12288			12288000
#define		PLL_8192			8192000
#define		PLL_6144			6144000
#define		PLL_4096			4096000
#define		PLL_3072			3072000
#define		PLL_2048			2048000
#define		PLL_451584			45158400
#define		PLL_22579			22579200
#define		PLL_11289			11289600
#define		PLL_5644			5644800
#define		PLL_2822			2822400

/**********************************************************************************************/
#define DAC_VOLUME_SET(pa, da)	((pa) << 8 | (da))
#define DAC_VOLUME_PA_GET(v)	((v) >> 8)
#define DAC_VOLUME_DA_GET(v)    ((v) & 0xFF)

/**********************************************************************************************/

/**
**	audio in driver data
**/
struct acts_audio_in_data {
	struct device *dma_dev;

	uint8_t aa_channel_open_flag:1;
	uint8_t adc_channel_open_flag:1;
	uint8_t dmic_channel_open_flag:1;
	uint8_t i2srx0_channel_open_flag:1;
	uint8_t i2srx1_channel_open_flag:1;
	uint8_t spdif_channel_open_flag:1;
	uint8_t flag_reserved:2;

	uint8_t cur_asrc_in0_ramindex;
	uint8_t cur_asrc_in1_ramindex;
};

/**
**	audio in driver config
**/
struct acts_audio_in_config {
	struct acts_audio_asrc *asrc;

	struct acts_audio_adc *adc;
	struct acts_audio_i2srx0 *i2srx0;
	struct acts_audio_i2srx1 *i2srx1;
	struct acts_audio_spdifrx *spdifrx;
};

/**
**	audio out driver data
**/
struct acts_audio_out_data {
	struct device *dma_dev;
	struct device *amp_dev;

	uint8_t pa_open_flag;					/* PA 是否已经打开*/

	uint8_t aa_channel_open_flag:1;			/* 是否存在已经open 的a-a 通路*/
	uint8_t dac_channel_open_flag:1;		/* 是否存在已经open 的dac 独立通路*/
	uint8_t i2s_channel_open_flag:1; 		/* 是否存在已经open 的i2stx 独立通路*/
	uint8_t spdif_channel_open_flag:1;		/* 是否存在已经open 的spdiftx 独立通路*/
	uint8_t link_dac_i2s_open_flag:1;		/* 是否存在已经open 的dac-i2s  联动通路*/
	uint8_t link_dac_spdif_open_flag:1;		/* 是否存在已经open 的dac-spdif 联动通路*/
	uint8_t link_dac_i2s_spdif_open_flag:1; /* 是否存在已经open 的dac-i2s-spdif 联动通路*/
	uint8_t link_i2s_spdif_open_flag:1; 	/* 是否存在已经open 的i2s-spdif 联动通路*/

	uint8_t cur_asrc_out0_ramindex; 		/* 当前asrc out 0 的ram 配置*/
	uint8_t cur_asrc_out1_ramindex;			/* 当前asrc out 1 的ram 配置*/
};

/**
**	audio out driver config
**/
struct acts_audio_out_config {
	struct acts_audio_asrc *asrc;

	struct acts_audio_dac *dac;
	struct acts_audio_i2stx0 *i2stx;
	struct acts_audio_spdiftx *spdiftx;
};


/**
**	command for sample count function
**/
typedef enum {
	CMD_SAMPLECNT_ENABLE = 0,
	CMD_SAMPLECNT_DISABLE,
	CMD_SAMPLECNT_RESET,
	CMD_SAMPLECNT_GETCNT,
} sample_cnt_cmd_e;

/**audio pll interface*/
extern int PHY_check_audiopll(audiopll_type_e index, uint8_t* series);
extern int PHY_config_audiopll(uint8_t pll_index, uint8_t fs_series);

/* ADC  物理层接口*/
extern int PHY_audio_enable_adc(struct device *dev, PHY_audio_in_param_t *setting, ain_channel_node_t *ain_channel_node);
extern int PHY_audio_disable_adc(struct device *dev, ain_channel_node_t *ain_channel_node);
extern int PHY_audio_set_adc_gain(struct device *dev, uint32_t gain_value);
extern int PHY_audio_set_inputsrc_gain(struct device *dev, ain_source_type_e inputsrc, uint32_t gain_value);
extern int PHY_audio_enable_inputsrc(struct device *dev, PHY_audio_in_param_t *setting);
extern int PHY_audio_disable_inputsrc(struct device *dev, ain_channel_node_t *channel_node);
extern int PHY_audio_ioctl_adc(struct device *dev, ain_channel_node_t *ptr_channel, uint32_t cmd, void *param);

extern int PHY_audio_enable_dmic(struct device *dev, PHY_audio_in_param_t *setting, ain_channel_node_t *ain_channel_node);
extern int PHY_audio_disable_dmic(struct device *dev);
extern int PHY_audio_set_dmic_gain(struct device *dev, uint32_t gain_value);

/* DAC 物理层接口*/
extern int enable_dac_digital(struct device *dev, PHY_audio_out_param_t *param);
extern int enable_dac_analog(struct device *dev, PHY_audio_out_param_t *param);
extern int PHY_audio_get_dac_samplerate(void);
extern int PHY_audio_set_dac_gain(struct device *dev, uint32_t vol_pa_da);
extern int PHY_audio_get_dac_gain(struct device *dev);
extern int PHY_audio_enable_dac(struct device *dev, PHY_audio_out_param_t *aout_param, aout_channel_node_t *ptr_channel);
extern int PHY_audio_disable_dac(struct device *dev, aout_channel_node_t *ptr_channel);
extern int PHY_audio_ioctl_dac(struct device *dev, aout_channel_node_t *ptr_channel, uint32_t cmd, void *param);

/* ASRC  物理层接口*/
extern void asrc_buf_init(void);
extern int switch_asrc_memory(uint16_t ram_bitmap, uint8_t mode);
extern bool asrc_status_check(struct device *dev, uint8_t index);
extern int PHY_init_asrc(struct device *dev);
extern int PHY_open_asrc_out(struct device *dev, phy_asrc_param_t *phy_asrc_set);
extern int PHY_close_asrc_out(struct device *dev, uint8_t asrc_ramsel);
extern int PHY_set_asrc_out_rate(struct device *dev, aout_channel_node_t *channel_node, uint32_t asrc_rate, uint32_t asrc_offset);
extern int PHY_asrc_get_changed_samples_cnt(struct device *dev, aout_channel_node_t *channel_node, int duration);
extern int PHY_asrc_reset_changed_samples_cnt(struct device *dev, aout_channel_node_t *channel_node);


extern int PHY_open_asrc_in(struct device *dev, phy_asrc_param_t *phy_asrc_set);
extern int PHY_close_asrc_in(struct device *dev, uint8_t asrc_ramsel);
extern int PHY_set_asrc_in_rate(struct device *dev, ain_channel_node_t *channel_node, uint32_t asrc_rate, uint32_t asrc_offset);
extern int PHY_reset_asrc_in_fifo(struct device *dev, ain_channel_node_t *channel_node);
extern int asrc_freq_adjust(struct device *dev);

extern void config_asrc_channel_clk(struct acts_audio_asrc *asrc_reg, uint8_t index, uint32_t enable);

extern int prepare_asrc_out_param(struct device *dev, PHY_audio_out_param_t *setting, aout_channel_node_t *channel);
extern int prepare_asrc_in_param(struct device *dev, PHY_audio_in_param_t *setting, ain_channel_node_t *channel);

extern int get_asrc_in_reg_param(PHY_audio_in_param_t *setting);
extern int get_asrc_out_reg_param(PHY_audio_out_param_t *setting);
extern int PHY_set_asrc_out_vol_gain(asrc_type_e type,u32_t gain);
extern int PHY_get_asrc_out_vol_gain(asrc_type_e type);

extern int PHY_write_zero_to_asrc_fifo_by_cpu(asrc_type_e type,u32_t sample);

extern int phy_reset_asrc_fifo(asrc_type_e type, u8_t reset_w, u8_t reset_r);

extern int PHY_get_asrc_out_remain_samples_by_type(asrc_type_e type);

extern int PHY_request_asrc_irq(void (*asrc_callback)(void), u32_t threashold);

extern void PHY_audio_inc_apll_refcnt(u8_t pll_index, u8_t series);
extern void PHY_audio_dec_apll_refcnt(u8_t pll_index);

/* PA  物理层接口*/
extern int PHY_audio_enable_pa(struct device *dev, phy_pa_setting_t *param, int antipop_enable);
extern int PHY_audio_disable_pa(struct device *dev, int antipop_enable);
extern int PHY_audio_pa_mute(struct device *dev, pa_mute_setting_t *pa_mute_param);
extern int PHY_audio_out_mute(struct device *dev, aout_channel_node_t *channel_node, uint8_t mode);


/* I2S TX 物理层接口*/
extern int PHY_audio_enable_i2stx(struct device *dev, PHY_audio_out_param_t *aout_param, aout_channel_node_t *ptr_channel);
extern int PHY_audio_disable_i2stx(struct device *dev, aout_channel_node_t *ptr_channel);
extern int PHY_audio_ioctl_i2stx(struct device *dev, aout_channel_node_t *ptr_channel, uint32_t cmd, void *param);

/* I2S RX 物理层接口*/
extern int PHY_audio_enable_i2srx(struct device *dev, PHY_audio_in_param_t *ain_param, ain_channel_node_t *ptr_channel);
extern int PHY_audio_disable_i2srx(struct device *dev, ain_channel_node_t *ain_channel_node);
extern int PHY_audio_ioctl_i2srx(struct device *dev, ain_channel_node_t *ptr_channel, uint32_t cmd, void *param);

/* Spdif TX 物理层接口*/
extern int PHY_audio_enable_spdiftx(struct device *dev, PHY_audio_out_param_t *aout_param, aout_channel_node_t *ptr_channel);
extern int PHY_audio_disable_spdiftx(struct device *dev, aout_channel_node_t *ptr_channel);
extern int PHY_audio_ioctl_spdiftx(struct device *dev, aout_channel_node_t *ptr_channel, uint32_t cmd, void *param);


/* Spdif RX 物理层接口*/
extern int PHY_audio_enable_spdifrx(struct device *dev, PHY_audio_in_param_t *ain_param, ain_channel_node_t *ptr_channel);
extern int PHY_audio_disable_spdifrx(struct device *dev);
extern void PHY_audio_spdifrx_irq_enable(struct device *dev);
extern void PHY_audio_spdifrx_irq_disable(struct device *dev);
extern int PHY_audio_ioctl_spdifrx(struct device *dev, ain_channel_node_t *ptr_channel, uint32_t cmd, void *param);

/* 其他物理层接口*/
extern int PHY_audio_set_aps(struct device *dev, void *channel_node, int32_t value, int32_t mode, bool is_in);
extern int PHY_audio_get_aps(struct device *dev, void *channel_node, int32_t mode, bool is_in);

extern int PHY_audio_set_samplerate(uint8_t sample_rate, void *ptr_channel, uint8_t dac_adc, int8_t pll_index);
extern int PHY_audio_unset_samplerate(void *ptr_channel, uint8_t dac_adc);

extern void drv_audio_out_lock(void);
extern void drv_audio_out_unlock(void);

extern int audio_out_asrc_config(struct device *dev, phy_asrc_param_t *phy_asrc_set);
extern int audio_out_asrc_close(struct device *dev, asrc_type_e out_channel);


extern void drv_audio_in_lock(void);
extern void drv_audio_in_unlock(void);

extern int audio_in_asrc_config(struct device *dev, phy_asrc_param_t *phy_asrc_set);
extern int audio_in_asrc_close(struct device *dev, asrc_type_e in_channel);

extern int PHY_audio_enable_aa_out(struct device *dev, PHY_audio_out_param_t *aout_param);
extern int PHY_audio_disable_aa(struct device *dev, aout_channel_node_t *ptr_channel);

extern int PHY_audio_config_fifo_cnt(struct device *dev, aout_channel_node_t *ptr_channel, sample_cnt_cmd_e mode);

extern void audio_out_dac_isr(void* arg);
extern void phy_i2stx_isr(void *arg);
extern void phy_i2srx_isr(void *arg);
extern void audio_out_dac_irq_enable(void);
extern void audio_out_i2stx_irq_enable(void);
extern void audio_in_i2srx_irq_enable(ain_channel_type_e channel_type);

extern void audio_in_spdifrx_irq_enable(void);
extern void spdifrx_acts_irq(void* arg);

extern int audio_device_enable_pa_antipop(struct device *dev);
extern int audio_device_disable_pa_antipop(struct device *dev);

extern int audio_out_open_pa(struct device *dev, phy_pa_setting_t *pa_param, int antipop_enable);
extern int audio_out_close_pa(struct device *dev, int antipop_enable);
extern int audio_out_get_pa_status(struct device *dev, uint32_t *value);
extern int audio_out_set_gain(struct device *dev, uint32_t vol_param);
extern int audio_out_get_gain(struct device *dev, int *vol);
extern int audio_out_pa_mute(struct device *dev, pa_mute_setting_t *pa_mute_param);

extern void ringbuf_dma_cb(struct device *dev, u32_t priv_data, int reson);

extern int enable_channel_linkage(struct device *dev, aout_channel_node_t *channel_node);
extern int disable_channel_linkage(struct device *dev, aout_channel_node_t *channel_node);

/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif  /* __INCLUDE_AUDIO_INNER_H__ */
