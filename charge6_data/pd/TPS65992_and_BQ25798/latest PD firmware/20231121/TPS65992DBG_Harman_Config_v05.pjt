



import os
import sys
import types

appcust_path = os.path.abspath(os.path.join('..', 'src'))
sys.path.append(appcust_path)
template_path = "templates"
sys.path.append(template_path)

import register_class
import function_class
import bintable_class
import helper_functions
from operator import itemgetter
from collections import OrderedDict

# Common functions

def get_updater_function(function_name):
    if function_name in globals():
        return globals()[function_name]


def remove_all_child(parent):
    if isinstance(parent, register_class.cRegister):
        parent.dataModel.dataModelChildrenArray = []
    elif isinstance(parent, register_class.cDataModelArray):
        parent.dataModelChildrenArray = []
    return parent


def remove_child(child, parent=None):
    if parent is None:
        parent = child.parent
    if parent is None:
        return
    if isinstance(parent, register_class.cRegister):
        if child in parent.dataModel.dataModelChildrenArray:
            #child.setFromInt(0)
            parent.dataModel.dataModelChildrenArray.remove(child)
    elif isinstance(parent, register_class.cDataModelArray):
        if child in parent.dataModelChildrenArray:
            # Update child bits to reset to 0 if child being removed has bits no longer on display
            if child.rawValue() != 0:
                #print '-----------------------TRYING TO REMOVE---------------------------------'
                child_start = child.offsetInRegister()
                child_end = child_start + child.length - 1
                child_bytes = range(child_start, child_end+1)
                #print parent.name
                #print child.reference_name
                #print child_start
                #print child_end
                #print 'Value initial : ', hex(child.rawValue())
                #print 'Child Bytes: ', str(child_bytes)

                # Iterate through all items in DM array looking to see if child bits are still on display
                # Only maintain child data if bits are still visible. Otherwise reset to zero
                update_required = True
                zero = [True] * (child_end-child_start+1)
                for item in parent.dataModelChildrenArray:
                    #print '     ', item.reference_name ,'[', item.offsetInRegister(), ':', item.offsetInRegister() + item.length-1, ']=' ,hex(item.rawValue())
                    # Skip child's item entry in DM array
                    if item.reference_name == child.reference_name:
                        continue
                    # Grab item's start and end bit index
                    item_start = item.offsetInRegister()
                    item_end = item_start + item.length - 1
                    item_bytes = range(item_start, item_end+1)
                    # Get the bits from child that exist in item (intersection)
                    shared = []
                    for bit in child_bytes:
                        if bit in item_bytes:
                            shared.append(bit)
                    # Mark these bits to be maintained since they're still being displayed
                    for bit in shared:
                        zero[bit-child_start] = False
                    # Break out if all bits have been marked
                    if all(not bit for bit in zero):
                        update_required = False
                        #print 'No update required'
                        #print '--------------------------------------------------------'
                        break
                    
                # Only update child if value if some bits need to be reset to zero
                if update_required:
                    # Grab child data and convert into list of bits and reverse (to preserve endianness)
                    data = list(map(int, bin(child.rawValue())[2:].zfill(len(zero))))
                    data.reverse()
                    # Reset any bits that are no longer on display to zero
                    for index, reset in enumerate(zero):
                        if reset:
                            data[index] = 0
                    # Convert data back to a int value and reset as child's value
                    child_value = 0
                    for bit in reversed(data):
                        child_value = (child_value << 1) | bit
                    # Make sure new child_value is within child's max-min parameters, otherwise just reset to 0
                    if child_value <= child.getMaxValue():
                        child.setFromInt(child_value)
                    else:
                        child.setFromInt(0)
                    #print 'Value Final : ', hex(child.rawValue())
                    #print '--------------------------------------------------------'
            # Remove child
            parent.dataModelChildrenArray.remove(child)


def get_child_object(parent, child_hierarchy):
    if type(child_hierarchy) in [str, unicode]:
        child_hierarchy = [child_hierarchy]
    if type(child_hierarchy) is list and len(child_hierarchy) > 0:
        if len(child_hierarchy) == 1:
            if isinstance(parent, register_class.cRegister):
                return parent.dataModel.getChildByName(child_hierarchy[0])
            elif isinstance(parent, register_class.cDataModelArray):
                return parent.getChildByName(child_hierarchy[0])
        else:
            if isinstance(parent, register_class.cRegister) or isinstance(parent, register_class.cDataModelArray):
                group_object = get_child_object(parent, child_hierarchy[0])
                return get_child_object(group_object, child_hierarchy[1:])


def getChildByReferenceName(dataModel, reference_name):
    for child in dataModel.dataModelChildrenArray :
        if hasattr(child, "reference_name") and child.reference_name == reference_name :
            return child


def get_child_object_with_refname(parent, child_hierarchy, ref_name):
    if type(child_hierarchy) in [str, unicode]:
        child_hierarchy = [child_hierarchy]
    if type(child_hierarchy) is list:
        if len(child_hierarchy) == 0:
            child_hierarchy.append(ref_name)
        else:
            child_hierarchy[-1] = ref_name
        if len(child_hierarchy) == 1:
            if isinstance(parent, register_class.cRegister):
                return getChildByReferenceName(parent.dataModel, child_hierarchy[0])
            elif isinstance(parent, register_class.cDataModelArray):
                return getChildByReferenceName(parent, child_hierarchy[0])
        else:
            if isinstance(parent, register_class.cRegister) or isinstance(parent, register_class.cDataModelArray):
                group_object = get_child_object(parent, child_hierarchy[0])
                return get_child_object_with_refname(group_object, child_hierarchy[1:], ref_name)


def convert_obj_to_values(argList):
    return_list = []
    for arg in argList:
        if callable(arg):
            fxn = arg
            return_list.append(fxn())
        else:
            return_list.append(arg)
    return return_list


def find_max(argList, item_count):
    item_count = item_count if item_count < len(argList) else len(argList)
    argList = argList[:item_count]
    argList = convert_obj_to_values(argList)
    if len(argList) > 0:
        return max(argList)
    return 0


def find_min(argList, item_count):
    item_count = item_count if item_count < len(argList) else len(argList)
    argList = argList[item_count]
    argList = convert_obj_to_values(argList)
    if len(argList) > 0:
        return min(argList)
    return 0

def remove_child_if_not_none(child):
    if child is not None:
        remove_child(child)

def add_field_if_none(item, parent, child):
    if item is None:
        parent.addChild(child)
        child.unhide()
    else:
        item.unhide()

def find_port(field):
    parentObj = field.parent
    if isinstance(parentObj, register_class.cRegister):       
        return parentObj.device
    elif parentObj == None:
        return None
    else:
        return find_port(parentObj)



# Device Dictionaries - automated

I2CEvents ={0: 'I2C_CNTLR_EVENT__NULL', 1: 'I2C_CNTLR_EVENT__ATTACH_UU', 2: 'I2C_CNTLR_EVENT__ATTACH_UD', 3: 'I2C_CNTLR_EVENT__DP_ENTER_UU', 4: 'I2C_CNTLR_EVENT__DP_ENTER_UD', 5: 'I2C_CNTLR_EVENT__DP_CONFIG_ACE_UU', 6: 'I2C_CNTLR_EVENT__DP_CONFIG_ACE_UD', 7: 'I2C_CNTLR_EVENT__DP_CONFIG_BDF_UU', 8: 'I2C_CNTLR_EVENT__DP_CONFIG_BDF_UD', 9: 'I2C_CNTLR_EVENT__TBT_ENTER_UU', 10: 'I2C_CNTLR_EVENT__TBT_ENTER_UD', 11: 'I2C_CNTLR_EVENT__USER_MODE_1_ENTER_UU', 12: 'I2C_CNTLR_EVENT__USER_MODE_1_ENTER_UD', 13: 'I2C_CNTLR_EVENT__USER_MODE_2_ENTER_UU', 14: 'I2C_CNTLR_EVENT__USER_MODE_2_ENTER_UD', 15: 'I2C_CNTLR_EVENT__USER_MODE_3_ENTER_UU', 16: 'I2C_CNTLR_EVENT__USER_MODE_3_ENTER_UD', 17: 'I2C_CNTLR_EVENT__USER_MODE_4_ENTER_UU', 18: 'I2C_CNTLR_EVENT__USER_MODE_4_ENTER_UD', 19: 'I2C_CNTLR_EVENT__DEBUG_ATTACH_UU', 20: 'I2C_CNTLR_EVENT__DEBUG_ATTACH_UD', 21: 'I2C_CNTLR_EVENT__AUDIO_ATTACH_UU', 22: 'I2C_CNTLR_EVENT__AUDIO_ATTACH_UD', 23: 'I2C_CNTLR_EVENT__DP_EXIT_UU', 24: 'I2C_CNTLR_EVENT__DP_EXIT_UD', 25: 'I2C_CNTLR_EVENT__TBT_EXIT_UU', 26: 'I2C_CNTLR_EVENT__TBT_EXIT_UD', 27: 'I2C_CNTLR_EVENT__USER_MODE_1_EXIT_UU', 28: 'I2C_CNTLR_EVENT__USER_MODE_1_EXIT_UD', 29: 'I2C_CNTLR_EVENT__USER_MODE_2_EXIT_UU', 30: 'I2C_CNTLR_EVENT__USER_MODE_2_EXIT_UD', 31: 'I2C_CNTLR_EVENT__USER_MODE_3_EXIT_UU', 32: 'I2C_CNTLR_EVENT__USER_MODE_3_EXIT_UD', 33: 'I2C_CNTLR_EVENT__USER_MODE_4_EXIT_UU', 34: 'I2C_CNTLR_EVENT__USER_MODE_4_EXIT_UD', 35: 'I2C_CNTLR_EVENT__POWER_ON_RESET', 36: 'I2C_CNTLR_EVENT__DETACH', 37: 'I2C_CNTLR_EVENT__HARD_RESET', 38: 'I2C_CNTLR_EVENT__SRC_PDO1_NEGOTIATED', 39: 'I2C_CNTLR_EVENT__SRC_PDO2_NEGOTIATED', 40: 'I2C_CNTLR_EVENT__SRC_PDO3_NEGOTIATED', 41: 'I2C_CNTLR_EVENT__SRC_PDO4_NEGOTIATED', 42: 'I2C_CNTLR_EVENT__SRC_PDO5_NEGOTIATED', 43: 'I2C_CNTLR_EVENT__SRC_PDO6_NEGOTIATED', 44: 'I2C_CNTLR_EVENT__SRC_PDO7_NEGOTIATED', 45: 'I2C_CNTLR_EVENT__SNK_PDO1_NEGOTIATED', 46: 'I2C_CNTLR_EVENT__SNK_PDO2_NEGOTIATED', 47: 'I2C_CNTLR_EVENT__SNK_PDO3_NEGOTIATED', 48: 'I2C_CNTLR_EVENT__SNK_PDO4_NEGOTIATED', 49: 'I2C_CNTLR_EVENT__SNK_PDO5_NEGOTIATED', 50: 'I2C_CNTLR_EVENT__SNK_PDO6_NEGOTIATED', 51: 'I2C_CNTLR_EVENT__SNK_PDO7_NEGOTIATED', 52: 'I2C_CNTLR_EVENT__HPD_HIGH', 53: 'I2C_CNTLR_EVENT__HPD_LOW', 54: 'I2C_CNTLR_EVENT__HPD_IRQ', 55: 'I2C_CNTLR_EVENT__I2CW_4CC', 56: 'I2C_CNTLR_EVENT__VCONN_ON', 57: 'I2C_CNTLR_EVENT__VCONN_OFF', 58: 'I2C_CNTLR_EVENT__PP1_SW_ON', 59: 'I2C_CNTLR_EVENT__PP2_SW_ON', 60: 'I2C_CNTLR_EVENT__PP3_SW_ON', 61: 'I2C_CNTLR_EVENT__PP4_SW_ON', 62: 'I2C_CNTLR_EVENT__PP1_SW_OFF', 63: 'I2C_CNTLR_EVENT__PP2_SW_OFF', 64: 'I2C_CNTLR_EVENT__PP3_SW_OFF', 65: 'I2C_CNTLR_EVENT__PP4_SW_OFF', 66: 'I2C_CNTLR_EVENT__FRS_ARMED_AS_SRC', 67: 'I2C_CNTLR_EVENT__FRS_ARMED_AS_SNK', 68: 'I2C_CNTLR_EVENT__FRS_DISARMED_NEW_SNK', 69: 'I2C_CNTLR_EVENT__FRS_DISARMED_NEW_SRC', 70: 'I2C_CNTLR_EVENT__I2CW_RETIMER', 71: 'I2C_CNTLR_EVENT__WAKEUP_SLAVE_0', 72: 'I2C_CNTLR_EVENT__WAKEUP_SLAVE_1', 73: 'I2C_CNTLR_EVENT__WAKEUP_SLAVE_2', 74: 'I2C_CNTLR_EVENT__WAKEUP_SLAVE_3', 75: 'I2C_CNTLR_EVENT__WAKEUP_SLAVE_4', 76: 'I2C_CNTLR_EVENT__WAKEUP_SLAVE_5', 77: 'I2C_CNTLR_EVENT__WAKEUP_SLAVE_6', 78: 'I2C_CNTLR_EVENT__WAKEUP_SLAVE_7', 80: 'I2C_CNTLR_EVENT__ENTER_USB_USB2_UU', 81: 'I2C_CNTLR_EVENT__ENTER_USB_USB2_UD', 82: 'I2C_CNTLR_EVENT__ENTER_USB_USB3_UU', 83: 'I2C_CNTLR_EVENT__ENTER_USB_USB3_UD', 84: 'I2C_CNTLR_EVENT__ENTER_USB_USB4_UU', 85: 'I2C_CNTLR_EVENT__ENTER_USB_USB4_UD', 86: 'I2C_CNTLR_EVENT__USB3_EVENT_UU', 87: 'I2C_CNTLR_EVENT__USB3_EVENT_UD', 88: 'I2C_CNTLR_EVENT__USB4_OR_TBT3_EVENT_UU', 89: 'I2C_CNTLR_EVENT__USB4_OR_TBT3_EVENT_UD', 90: 'I2C_CNTLR_EVENT__NEW_MODE_ENTERED_UU', 91: 'I2C_CNTLR_EVENT__NEW_MODE_ENTERED_UD', 92: 'I2C_CNTLR_EVENT_HARD_RESET_VBUS_OFF', 93: 'I2C_CNTLR_EVENT__USB4_OR_TBT3_PASSIVE_CABLE_UU', 94: 'I2C_CNTLR_EVENT__USB4_OR_TBT3_PASSIVE_CABLE_UD', 95: 'I2C_CNTLR_EVENT__USB4_OR_TBT3_ACTIVE_CABLE_UNIDIR_UU', 96: 'I2C_CNTLR_EVENT__USB4_OR_TBT3_ACTIVE_CABLE_UNIDIR_UD', 97: 'I2C_CNTLR_EVENT__USB4_OR_TBT3_ACTIVE_CABLE_BIDIR_UU', 98: 'I2C_CNTLR_EVENT__USB4_OR_TBT3_ACTIVE_CABLE_BIDIR_UD', 99: 'I2C_CNTLR_EVENT__SRC_PDO9_NEGOTIATED', 100: 'I2C_CNTLR_EVENT__SRC_PDO10_NEGOTIATED', 101: 'I2C_CNTLR_EVENT__SRC_PDO11_NEGOTIATED', 102: 'I2C_CNTLR_EVENT__SRC_PDO12_NEGOTIATED', 103: 'I2C_CNTLR_EVENT__SRC_PDO13_NEGOTIATED', 104: 'I2C_CNTLR_EVENT__SNK_PDO8_NEGOTIATED', 105: 'I2C_CNTLR_EVENT__SNK_PDO9_NEGOTIATED', 106: 'I2C_CNTLR_EVENT__SNK_PDO10_NEGOTIATED', 107: 'I2C_CNTLR_EVENT__SNK_PDO11_NEGOTIATED', 108: 'I2C_CNTLR_EVENT__SNK_PDO12_NEGOTIATED', 109: 'I2C_CNTLR_EVENT__SNK_PDO13_NEGOTIATED', 110: 'I2C_CNTLR_EVENT__SRC_PDO8_NEGOTIATED', 111: 'I2C_CNTLR_EVENT_BILLBOARD_ENABLE', 112: 'I2C_CNTLR_EVENT_BILLBOARD_DISABLE', 113: 'I2C_CNTLR_EVENT__DP_SAFE_MODE_UU', 114: 'I2C_CNTLR_EVENT__DP_SAFE_MODE_UD', 115: 'I2C_CONTROLLER_EVENT__PP5_SW_ON', 119: 'I2C_CONTROLLER_EVENT__PP5_SW_OFF', 123: 'I2C_CNTLR_EVENT__EXTDCDC_CONFIG', 124: 'I2C_CNTLR_EVENT__EXTDCDC_OUTPUT_ENABLE', 125: 'I2C_CNTLR_EVENT__EXTDCDC_OUTPUT_DISABLE', 126: 'I2C_CNTLR_EVENT__EXTDCDC_PRE_VOUT_SETTING', 127: 'I2C_CNTLR_EVENT__EXTDCDC_SET_VOUT_CONTAINER', 128: 'I2C_CNTLR_EVENT__EXTDCDC_POST_VOUT_SETTING', 129: 'I2C_CNTLR_EVENT__EXTDCDC_PRE_ILIM_SETTING', 130: 'I2C_CNTLR_EVENT__EXTDCDC_SET_ILIM_CONTAINER', 131: 'I2C_CNTLR_EVENT__EXTDCDC_POST_ILIM_SETTING', 132: 'I2C_CNTLR_EVENT__EXTDCDC_VBUS_DISCHARGE_ENABLE', 133: 'I2C_CNTLR_EVENT__EXTDCDC_VBUS_DISCHARGE_DISABLE', 134: 'I2C_CNTLR_EVENT__EXTDCDC_POST_PSRDY_SETTING', 144: 'I2C_CNTLR_EVENT__EXTDCDC_FORWARD_CONTROL', 145: 'I2C_CNTLR_EVENT__EXTDCDC_REVERSE_CONTROL', 146: 'I2C_CNTLR_EVENT__EXTDCDC_PRE_DPM_SETTINGS', 147: 'I2C_CNTLR_EVENT__EXTDCDC_SET_I_DPM_CONTAINER', 148: 'I2C_CNTLR_EVENT__EXTDCDC_SET_V_DPM_CONTAINER', 149: 'I2C_CNTLR_EVENT__EXTDCDC_POST_DPM_SETTING'}

PD_state_debug_dict ={'0x3E': 'PEState_BIST_End_Continuous_Test', '0x3D': 'PEState_BIST_TestData', '0x28': 'PEState_Sink_TransitionSink', '0x29': 'PEState_Sink_TransitionSink_PS_RDY', '0x3A': 'PEState_PRS_SourceOn', '0x3C': 'PEState_BIST_CarrierMode2', '0x3B': 'PEState_PRS_SourceOn_PS_RDY', '0x22': 'PEState_Sink_Discovery', '0x39': 'PEState_PRS_SourceOff', '0x20': 'PEState_UnUsed_0x20', '0x21': 'PEState_Sink_Startup', '0x26': 'PEState_Sink_EvaluateCapability', '0x27': 'PEState_Sink_SelectCapability', '0x24': 'PEState_Sink_WaitForCapabilities', '0x25': 'PEState_UnUsed_0x25', '0xFF': 'PEState_Invalid', '0x35': 'PEState_PRS_AssertRd', '0x34': 'PEState_PRS_AssertRp', '0x37': 'PEState_PRS_TransitionToOff_Sink', '0x36': 'PEState_PRS_TransitionToOff', '0x31': 'PEState_PRS_Evaluate_PR_Swap', '0x30': 'PEState_PD_Send_Custom_Message', '0x33': 'PEState_PRS_Accept_PR_Swap', '0x32': 'PEState_PRS_Send_PR_Swap', '0x2B': 'PEState_RxCapabilitiesOk__Stop', '0x2C': 'PEState_Reject_Request', '0x2A': 'PEState_Sink_Ready', '0x2F': 'PEState_Response_Send_Wait', '0x38': 'PEState_PRS_TransitionToOff_Source', '0x2D': 'PEState_Enable_VCONN', '0x2E': 'PEState_Enable_VBUS', '0xAD': 'PEState_LAST_VALID', '0xA9': 'PEState_Reserved_0xA9', '0xAC': 'PEState_Reserved_0xAC', '0xA8': 'PEState_Reserved_0xA8', '0xAB': 'PEState_Reserved_0xAB', '0x40': 'PEState_VCS_Wait_for_VCONN', '0x41': 'PEState_VCS_Turn_Off_VCONN', '0x42': 'PEState_VCS_Turn_On_VCONN', '0x43': 'PEState_VCS_Send_PS_Rdy', '0x44': 'PEState_VCS_Evaluate_Swap', '0x45': 'PEState_VCS_Accept_Swap', '0x46': 'PEState_VCS_Force_VConn', '0x47': 'PEState_DRS_Evaluate_DR_Swap', '0x48': 'PEState_DRS_Accept_DR_Swap', '0x49': 'PEState_DRS_DFP_UFP_Change_to_UFP', '0xA5': 'PEState_FRS_Sink_VBUS_Applied', '0x5C': 'PEState_UFP_VDM_Mipi_Config_ACK', '0x5B': 'PEState_UFP_VDM_SendDataMsg_ACK', '0x5A': 'PEState_UFP_VDM_Handle_SendDataMsg', '0xA4': 'PEState_FRS_TransitionToOff_Sink', '0x5F': 'PEState_Init_VDM_BUSY_Response', '0x5E': 'PEState_Receive_UVDM', '0x5D': 'PEState_UnUsed_0x5E', '0xA3': 'PEState_FRS_TransitionToOff', '0xA7': 'PEState_Reserved_0xA7', '0xA2': 'PEState_FRS_AssertRp', '0xA1': 'PEState_FRS_Send_FR_Swap', '0xA0': 'PEState_CustomMessage_ErrorHandler', '0xA6': 'PEState_FRS_SourceOn', '0x53': 'PEState_UFP_VDM_Mode_Exit', '0x52': 'PEState_UFP_VDM_Mode_Entry_NAK', '0x51': 'PEState_UFP_VDM_Mode_Entry_ACK', '0x3F': 'PEState_VCS_Send_Swap', '0x57': 'PEState_UFP_VDM_Status_Request', '0x56': 'PEState_Init_VDM_Attention_Request', '0x55': 'PEState_UFP_VDM_Mode_Exit_NAK', '0x54': 'PEState_UFP_VDM_Mode_Exit_ACK', '0x59': 'PEState_UFP_VDM_Config_ACK', '0x58': 'PEState_UFP_VDM_Config_Request', '0x4A': 'PEState_DRS_Send_DR_Swap', '0x4B': 'PEState_DRS_UFP_DFP_Change_to_DFP', '0x4C': 'PEState_Resp_VDM_Send_NAK', '0x4D': 'PEState_Resp_VDM_Send_Identity', '0x4E': 'PEState_Resp_VDM_Send_SVIDs', '0x4F': 'PEState_Resp_VDM_Send_Modes', '0x50': 'PEState_UFP_VDM_Evaluate_Mode_Entry', '0x23': 'PEState_RxCapabilitiesOk__Start', '0x68': 'PEState_Init_VDM_Modes_NAKed', '0x69': 'PEState_DFP_VDM_Mode_Entry_Request', '0x66': 'PEState_Init_VDM_Modes_Request', '0x67': 'PEState_Init_VDM_Modes_ACKed', '0x64': 'PEState_Init_VDM_SVIDs_ACKed', '0x65': 'PEState_Init_VDM_SVIDs_NAKed', '0x62': 'PEState_Init_VDM_Identity_NAKed', '0x63': 'PEState_Init_VDM_SVIDs_Request', '0x60': 'PEState_Init_VDM_Identity_Request', '0x61': 'PEState_Init_VDM_Identity_ACKed', '0x7A': 'PEState_PLUG_Send_SoftReset_Request', '0x7C': 'PEState_DFP2PLUG_VDM_Identity_Request', '0x7B': 'PEState_PLUG_CableReset', '0x7E': 'PEState_DFP2PLUG_VDM_Identity_NAKed', '0x7D': 'PEState_DFP2PLUG_VDM_Identity_ACKed', '0x7F': 'PEState_DFP2PLUG_VDM_SVIDs_Request', '0x79': 'PESTATE_SRC2PLUG_VDM_Identity_NAKed', '0x78': 'PESTATE_SRC2PLUG_VDM_Identity_ACKed', '0x71': 'PEState_Init_VDM_Send_Data', '0x70': 'PEState_DFP_VDM_Config_NAKed', '0x73': 'PEState_Init_VDM_Get_Msg_RCV', '0x72': 'PEState_Init_VDM_Send_Data_ACK', '0x75': 'PEState_TBT_Send_Attention', '0x74': 'PEState_DFP_VDM_Status_Update', '0x77': 'PESTATE_SRC2PLUG_VDM_Identity_Request', '0x76': 'PEState_UFP_VDM_Mipi_Status_ACK', '0x6F': 'PEState_DFP_VDM_Config_ACK', '0x6D': 'PEState_DFP_VDM_Exit_Mode_ACKed', '0x6E': 'PEState_DFP_VDM_Config_Request', '0x6B': 'PEState_DFP_VDM_Mode_Entry_NAKed', '0x6C': 'PEState_DFP_VDM_Mode_Exit_Request', '0xAA': 'PEState_Reserved_0xAA', '0x6A': 'PEState_DFP_VDM_Mode_Entry_ACKed', '0x9F': 'PEState_ExtMsg_SendPacket', '0x9E': 'PEState_ExtMsg_RequestChunk', '0x9D': 'PEState_ExtMsg_ReceivedPacket', '0x9C': 'PEState_Alert_Rx', '0x9B': 'PEState_Send_Alert', '0x9A': 'PEState_GiveManufacturerInfo', '0x1F': 'PEState_Source_TransitionSupply_PS_RDY', '0x1E': 'PEState_Source_TransitionSupply_SetAlarmsNew', '0x1D': 'PEState_UnUsed_0x1D', '0x1C': 'PEState_Source_TransitionSupply', '0x1B': 'PEState_Source_TransitionSupply_Accept', '0x1A': 'PEState_Source_TransitionSupply_GotoMin', '0x08': 'PEState_SendSoftReset_Accept', '0x09': 'PEState_SoftReset_Exit', '0x04': 'PEState_SendSoftReset', '0x05': 'PEState_SoftReset', '0x06': 'PEState_HardReset', '0x07': 'PEState_Priority__Stop', '0x00': 'PEState_Start', '0x01': 'PEState_CableTypeDetect', '0x02': 'PEState_LaunchPolicyEngine', '0x03': 'PEState_Priority__Start', '0x84': 'PEState_DFP2PLUG_VDM_Modes_NAKed', '0x85': 'PEState_DFP2PLUG_VDM_Mode_Entry_Request', '0x86': 'PEState_DFP2PLUG_VDM_Mode_Entry_ACKed', '0x87': 'PEState_DFP2PLUG_VDM_Mode_Entry_NAKed', '0x80': 'PEState_DFP2PLUG_VDM_SVIDs_ACKed', '0x81': 'PEState_DFP2PLUG_VDM_SVIDs_NAKed', '0x82': 'PEState_DFP2PLUG_VDM_Modes_Request', '0x83': 'PEState_DFP2PLUG_VDM_Modes_ACKed', '0x88': 'PEState_DFP2PLUG_VDM_Mode_Exit_Request', '0x89': 'PEState_DFP2PLUG_VDM_Mode_Exit_ACKed', '0x8D': 'PEState_DFP2PLUG_VDM_DP_Config_NAK', '0x8E': 'PEState_Extended_DataMessage_Timeout', '0x8F': 'PEState_Legacy', '0x8A': 'PEState_DFP2PLUG_VDM_Mode_Exit_NAKed', '0x8B': 'PEState_DFP2PLUG_VDM_DP_Status_Update', '0x8C': 'PEState_DFP2PLUG_VDM_DP_Config_Request', '0x0D': 'PEState_GiveSinkCap', '0x0E': 'PEState_GetCap', '0x0F': 'PEState_GetCap_Rx', '0x0A': 'PEState_Start_WrapUp', '0x0B': 'PEState_WrapUpDone', '0x0C': 'PEState_GiveSourceCap', '0x19': 'PEState_Source_NegotiateCapability', '0x18': 'PEState_Source_CapabilityResponse', '0x17': 'PEState_Source_Ready', '0x16': 'PEState_Source_SendCapabilities', '0x15': 'PEState_Source_Discovery', '0x14': 'PEState_Source_Startup_Continue', '0x13': 'PEState_Source_Startup', '0x12': 'PEState_Not_Supported_Rx', '0x11': 'PEState_Send_Not_Supported', '0x10': 'PEState_GetCap_Timeout', '0x97': 'PEState_GiveStatus', '0x96': 'PEState_Sink_GiveSinkCapExt', '0x95': 'PEState_Source_GiveSourceCapExt', '0x94': 'PEState_GiveCountryInfo', '0x93': 'PEState_GiveCountryCodes', '0x92': 'PEState_Get_PortOrPlugInfo', '0x91': 'PEState_ErrorRecovery', '0x90': 'PEState_Disabled', '0x99': 'PEState_GiveBatteryCap', '0x98': 'PEState_GiveBatteryStatus'}

SLEEP_state_debug_dict ={'0x04': 'SLEEP_STATE_READY_TO_SLEEP', '0x00': 'SLEEP_STATE_AWAKE', '0x01': 'SLEEP_STATE_SLEEP_LITE_ACE', '0x02': 'SLEEP_STATE_SLEEP_DEEP_ACE', '0x03': 'SLEEP_STATE_PREPARE_TO_SLEEP'}

PROTOCOL_state_debug_dict ={'0x08': 'PRState_SQUELCH_IDLE', '0x09': 'PRState_SOP_RECEIVED', '0x04': 'PRState_SinkTx_Checked', '0x05': 'PRState_Source_AMS_Tx', '0x06': 'PRState_Sink_AMS_Tx', '0x07': 'PRState_SQUELCH_ACTIVE', '0x00': 'PRState_Source_SinkTxOk', '0x01': 'PRState_Source_SinkTxNG', '0x02': 'PRState_Sink_SinkTxOk', '0x03': 'PRState_Sink_SinkTxNG', '0x0D': 'PRState_HARDRESET_RECEIVED', '0x0E': 'PRState_CABLERESET_RECEIVED', '0x0F': 'PRState_TXDONE', '0x0A': 'PRState_SOP_PRIME_RECEIVED', '0x0B': 'PRState_SOP_DPRIME_RECEIVED', '0x0C': 'PRState_RX_BUF_RDY', '0x17': 'PRState_RX_BUFFER_OVERFLOW', '0x16': 'PRState_AUTO_GOODCRC_TXDONE', '0x15': 'PRState_ReTransmit_Discarded_TxBuffer', '0x14': 'PRState_TxBuffer_Discarded', '0x13': 'PRState_RECEIVED_BADCRC', '0x12': 'PRState_TX_AUTOGOODCRC_DONE', '0x11': 'PRState_RECEIVED_GOODCRC', '0x10': 'PRState_INVALID_BIT_TIME'}

VBUS_state_debug_dict ={'0xCC': 'VBUSState_MON_HILO', '0xAF': 'VBUSState_UVP_Disabled', '0xCD': 'VBUSState_OVP_UVP', '0x92': 'VBUSState_VBUSOn', '0x91': 'VBUSState_MON_LO', '0x90': 'VBUSState_MON_HI', '0xB2': 'VBUSState_FRS_SIGNAL_RECEIVED', '0xB3': 'VBUSState_UVP_CHECKFALLING', '0xB0': 'VBUSState_FirstPDOSwitch_Enabled', '0xB1': 'VBUSState_CommonHandler_Exited', '0xB6': 'VBUSState_GOOD_RISING', '0xB7': 'VBUSState_GOOD_FALLING', '0xB4': 'VBUSState_OVP_ENTERED', '0xB5': 'VBUSState_SNK_DISCONNECT'}

GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]

GPIOMuxDictList = [{'pin': 'GPIO 11', 'bit': '11', 'name': 'I2C2s_IRQ', 'inout': 'output'}, {'pin': 'GPIO 10', 'bit': '10', 'name': 'I2C1s_IRQ', 'inout': 'output'}, {'pin': 'GPIO 7', 'bit': '7', 'name': 'SWD_CLK', 'inout': 'input'}, {'pin': 'GPIO 6', 'bit': '6', 'name': 'SWD_DAT', 'inout': 'i/o'}, {'pin': 'GPIO 5', 'bit': 5, 'name': 'DM', 'inout': 'i/o'}, {'pin': 'GPIO 4', 'bit': 4, 'name': 'DP', 'inout': 'i/o'}, {'pin': 'GPIO 3', 'bit': 3, 'name': 'HPD_RX1', 'inout': 'input'}, {'pin': 'GPIO 1', 'bit': '1', 'name': 'HPD_TX1', 'inout': 'output'}]



# ----------------------MANUAL EDITS SECTION--------------------------------------
# --------------------------------------------------------------------------------
# ----------------Updater functions for Registers---------------------------------


# Updater function for Device

def device_updater(self):
    "Uncomment the necessary device function calls"
    self.setPDDumpFunction(pdStateDump)
    self.setHIFirmwareUpdateFunction(HIFirmwareUpdate)

    
# ----------------------END OF MANUAL EDITS SECTION--------------------------------------

# Device specific definitions# ==========================================================================
# MANUAL - Import sections
# ==========================================================================

import time
import array

# ==========================================================================
# END - MANUAL - Import sections
# ==========================================================================


#  ==========================================================================
# MANUAL - Template Info
# ==========================================================================

templateDevice = "TPS65992"
templateVersion = " "

template_contains_template_descriptions = True

descript_TemplateInfo = [
    {'field': 'device', 'answer': 'TPS65992'},
    {'field': 'expected binary', 'answer': 'F809.11'},
    {'field': 'supportsNEWVIFGeneration', 'answer' : 'Yes1Port'},
    {'field': 'device family', 'answer': 'saruman'},
    {'field': 'EEPROMFlashViaI23Supported', 'answer': 'Yes'},
]

XML_VIF_ALIAS_TO_HI_MAPPING = [

#VIF FIELD : USB_PD_Support
 {'alias': 'XML_VIF_ALIAS_USB_PD_Support', 'hi register': 'Port Configuration',
     'hi field': 'Disable PD'},

#VIF FIELD : PD_Port_Type
 {'alias': 'XML_VIF_ALIAS_PD_Port_Type__1__TypeC_State_machine', 'hi register': 'Port Configuration',
     'hi field': 'TypeC State machine'},
 {'alias': 'XML_VIF_ALIAS_PD_Port_Type__2__Process_Swap_to_Source', 'hi register': 'Port Control',
     'hi field': 'Process Swap to Source'},
 {'alias': 'XML_VIF_ALIAS_PD_Port_Type__3__Process_Swap_to_Sink', 'hi register': 'Port Control',
     'hi field': 'Process Swap to Sink'},

#VIF FIELD : USB4_Supported
#VIF FIELD : USB4_DFP_Supported
#VIF FIELD : USB4_UFP_Supported
{'alias': 'XML_VIF_ALIAS_USB4_Supported__1__Number_Valid_VDOs', 'hi register': 'Tx Identity',
     'hi field': 'Number Valid VDOs'},
{'alias': 'XML_VIF_ALIAS_USB4_Supported__2__Host_Capable', 'hi register': 'Tx Identity',
     'hi field': 'Host Capable'},
{'alias': 'XML_VIF_ALIAS_USB4_Supported__3__Device_Capable', 'hi register': 'Tx Identity',
     'hi field': 'Device Capable'},

#VIF FIELD : DFP_VDO_Port_Number
{'alias': 'XML_VIF_ALIAS_Port_Number', 'hi register': 'Tx Identity',
     'hi field': 'Port Number'},

#VIF FIELD : Type_C_State_Machine
 {'alias': 'XML_VIF_ALIAS_Type_C_State_Machine', 'hi register': 'Port Configuration',
     'hi field': 'TypeC State machine'},

#VIF FIELD : Port_Battery_Powered
 {'alias': 'XML_VIF_ALIAS_Port_Battery_Powered', 'hi register': 'Port Control',
     'hi field': 'Unconstrained Power'},

#VIF FIELD : BC_1_2_Support
 {'alias': 'XML_VIF_ALIAS_BC_1_2_Support__1__Charger_Advertise_Enable', 'hi register': 'Port Control',
     'hi field': 'Charger Advertise Enable'},
 {'alias': 'XML_VIF_ALIAS_BC_1_2_Support__2__Charger_Detect_Enable', 'hi register': 'Port Control',
     'hi field': 'Charger Detect Enable'},

#VIF FIELD : PD_Specification_Revision
 {'alias': 'XML_VIF_ALIAS_PD_Specification_Revision', 'hi register': 'PD3 Configuration',
     'hi field': 'Port Max Spec Revision'},

#VIF FIELD : Manufacturer_Info_Supported_Port
 {'alias': 'XML_VIF_ALIAS_Manufacturer_Info_Supported_Port', 'hi register': 'PD3 Configuration',
     'hi field': 'Support Manufacture Info Message'},

#VIF FIELD : Manufacturer_Info_VID_Port
    {'alias': 'XML_VIF_ALIAS_Manufacturer_Info_VID_Port', 'hi register': 'TX Identity',
     'hi field': 'Vendor ID'},

#VIF FIELD : Manufacturer_Info_PID_Port
    {'alias': 'XML_VIF_ALIAS_Manufacturer_Info_PID_Port', 'hi register': 'TX Identity',
     'hi field': 'USB Product ID'},

#VIF FIELD : USB_Comms_Capable
    {'alias': 'XML_VIF_ALIAS_USB_Comms_Capable', 'hi register': 'Port Configuration',
     'hi field': 'USB Communication Capable'},

#VIF FIELD : DR_Swap_To_DFP_Supported
    {'alias': 'XML_VIF_ALIAS_DR_Swap_To_DFP_Supported', 'hi register': 'Port Control',
     'hi field': 'Process Swap to DFP'},

#VIF FIELD : DR_Swap_To_UFP_Supported
    {'alias': 'XML_VIF_ALIAS_DR_Swap_To_UFP_Supported', 'hi register': 'Port Control',
     'hi field': 'Process Swap to UFP'},

#VIF FIELD : Unconstrained_Power
    {'alias': 'XML_VIF_ALIAS_Unconstrained_Power', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Unconstrained Power'},

#VIF FIELD : Responds_To_Discov_SOP_UFP
 {'alias': 'XML_VIF_ALIAS_Responds_To_Discov_SOP_UFP', 'hi register': 'TX Identity',
     'hi field': 'Number Valid VDOs'},

#VIF FIELD : Responds_To_Discov_SOP_DFP
 {'alias': 'XML_VIF_ALIAS_Responds_To_Discov_SOP_DFP', 'hi register': 'TX Identity',
     'hi field': 'Number Valid VDOs'},

#VIF FIELD : Attempts_Discov_SOP
 {'alias': 'XML_VIF_ALIAS_Attempts_Discov_SOP', 'hi register': 'Port Control',
     'hi field': 'Automatic ID Request'},

#VIF FIELD : Unchunked_Extended_Messages_Supported
    {'alias': 'XML_VIF_ALIAS_Unchunked_Extended_Messages_Supported__PDO1', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Unchunked Extended Message Support', 'start position': '48', 'end position': '48'},

#VIF FIELD : Num_Fixed_Batteries
    {'alias': 'XML_VIF_ALIAS_Num_Fixed_Batteries', 'hi register': 'Transmit Sink Capabilities Extended Data Block',
     'hi field': 'Number of Fixed Batteries'},

#VIF FIELD : Num_Swappable_Battery_Slots
    {'alias': 'XML_VIF_ALIAS_Num_Swappable_Battery_Slots','hi register': 'Transmit Sink Capabilities Extended Data Block',
     'hi field': 'Number of Hot-Swappable Batteries'},

#VIF FIELD : Type_C_Can_Act_As_Host
    {'alias': 'XML_VIF_ALIAS_Type_C_Can_Act_As_Host', 'hi register': 'TX Identity',
     'hi field': 'USB Communication Capable as Host'},

#VIF FIELD : Type_C_Can_Act_As_Device
    {'alias': 'XML_VIF_ALIAS_Type_C_Can_Act_As_Device', 'hi register': 'TX Identity',
     'hi field': 'USB Communication Capable as Device'},

#VIF FIELD : Type_C_Implements_Try_SRC
#VIF FIELD : Type_C_Implements_Try_SNK
 {'alias': 'XML_VIF_ALIAS_Type_C_Implements_Try_SRC_SNK', 'hi register': 'Port Configuration',
     'hi field': 'TypeC Support Options'},

#VIF FIELD : RP_Value
 {'alias': 'XML_VIF_ALIAS_RP_Value', 'hi register': 'Port Control',
     'hi field': 'TypeC Current'},

#VIF FIELD : USB4_DP_Tunneling_Supported
 {'alias': 'XML_VIF_ALIAS_USB4_DP_Tunneling_Supported', 'hi register': 'USB Config',
     'hi field': 'DP Supported'},

#VIF FIELD : USB4_PCIe_Tunneling_Supported
 {'alias': 'XML_VIF_ALIAS_USB4_PCIe_Tunneling_Supported', 'hi register': 'USB Config',
     'hi field': 'PCIe Supported'},

#VIF FIELD : USB4_TBT3_Compatibility_Supported
 {'alias': 'XML_VIF_ALIAS_USB4_TBT3_Compatibility_Supported', 'hi register': 'USB Config',
     'hi field': 'TBT3 Supported'},

#VIF FIELD : Host_Supports_USB_Data
{'alias': 'XML_VIF_ALIAS_Host_Supports_USB_Data', 'hi register': 'Port Configuration',
     'hi field': 'TypeC State machine'},

#VIF FIELD : Device_Supports_USB_Data
{'alias': 'XML_VIF_ALIAS_Device_Supports_USB_Data', 'hi register': 'Port Configuration',
     'hi field': 'TypeC State machine'},

#VIF FIELD : PD_Power_As_Source
 {'alias': 'XML_VIF_ALIAS_PD_Power_As_Source', 'hi register': 'Tx Source Capabilities Extended Data Block',
     'hi field': 'Source PDP'},

#VIF FIELD : FR_Swap_Type_C_Current_Capability_As_Initial_Sink
    {'alias': 'XML_VIF_ALIAS_FR_Swap_Type_C_Current_Capability_As_Initial_Sink',
     'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Fast Role Swap required USB Type-C Current'},

#VIF FIELD : Num_Src_PDOs
#VIF FIELD : SrcPdoList
 #########################################  SOURCE PDOs ##################################################################

 {'alias': 'XML_VIF_ALIAS_Num_Src_PDOs', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Number Valid PDOs'},

 {'alias': 'XML_VIF_ALIAS_Src_PDO_Supply_Type__PDO1', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Supply Type', 'start position': '54', 'end position': '55'},

 #fixed
 {'alias': 'XML_VIF_ALIAS_Src_PDO_Peak_Current__PDO1', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Peak Current', 'start position': '44', 'end position': '45'},
 {'alias': 'XML_VIF_ALIAS_Src_PDO_Voltage__PDO1', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Voltage', 'start position': '34', 'end position': '43'},
 {'alias': 'XML_VIF_ALIAS_Src_PDO_Max_Current__PDO1', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Maximum Current', 'start position': '24', 'end position': '33'},

 #battery
 {'alias': 'XML_VIF_ALIAS_Src_PDO_Max_Power__PDO2', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Maximum Power', 'start position': '56', 'end position': '65'},
 {'alias': 'XML_VIF_ALIAS_Src_PDO_Max_Voltage__PDO2', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Maximum Voltage', 'start position': '76', 'end position': '85'},
 {'alias': 'XML_VIF_ALIAS_Src_PDO_Min_Voltage__PDO2', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Minimum Voltage', 'start position': '66', 'end position': '75'},

 # variable
 {'alias': 'XML_VIF_ALIAS_Src_PDO_Max_Current__PDO2', 'hi register': 'Transmit Source Capabilities',
     'hi field': 'Maximum Current', 'start position': '56', 'end position': '65'},
 # {'alias': 'XML_VIF_ALIAS_Src_PDO_Max_Voltage__PDO2', 'hi register': 'Transmit Source Capabilities',
 #     'hi field': 'Maximum Voltage', 'start position': '76', 'end position': '85'},
 # {'alias': 'XML_VIF_ALIAS_Src_PDO_Min_Voltage__PDO2', 'hi register': 'Transmit Source Capabilities',
 #     'hi field': 'Minimum Voltage', 'start position': '66', 'end position': '75'},

 #########################################  END SOURCE PDOS ############################################################

#VIF FIELD : PD_Power_As_Sink
 {'alias': 'XML_VIF_ALIAS_PD_Power_As_Sink', 'hi register': 'Transmit Sink Capabilities Extended Data Block',
     'hi field': 'Sink Maximum PDP'},

#VIF FIELD : Higher_Capability_Set
 {'alias': 'XML_VIF_ALIAS_Higher_Capability_Set', 'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Higher Capability'},



#VIF FIELD : Num_Snk_PDOs
#VIF FIELD : SnkPdoList
 #########################################  SINK PDOS ##################################################################

 {'alias': 'XML_VIF_ALIAS_Num_Snk_PDOs', 'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Number Valid PDOs'},

 {'alias': 'XML_VIF_ALIAS_Snk_PDO_Supply_Type__PDO1', 'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Supply Type', 'start position': '38', 'end position': '39'},

 # fixed
 {'alias': 'XML_VIF_ALIAS_Snk_PDO_Voltage__PDO1', 'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Voltage', 'start position': '18', 'end position': '27'},
 {'alias': 'XML_VIF_ALIAS_Snk_PDO_Op_Current__PDO1', 'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Operating Current', 'start position': '8', 'end position': '17'},

 # battery
 {'alias': 'XML_VIF_ALIAS_Snk_PDO_Op_Power__PDO2', 'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Operating Power', 'start position': '40', 'end position': '49'},
 {'alias': 'XML_VIF_ALIAS_Snk_PDO_Max_Voltage__PDO2', 'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Maximum Voltage', 'start position': '60', 'end position': '69'},
 {'alias': 'XML_VIF_ALIAS_Snk_PDO_Min_Voltage__PDO2', 'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Minimum Voltage', 'start position': '50', 'end position': '59'},


 # variable
 {'alias': 'XML_VIF_ALIAS_Snk_PDO_Op_Current__PDO2', 'hi register': 'Transmit Sink Capabilities',
     'hi field': 'Operating Current', 'start position': '40', 'end position': '49'},

 #########################################  END SINK PDOS ##################################################################


#VIF FIELD : Accepts_PR_Swap_As_Src
 {'alias': 'XML_VIF_ALIAS_Accepts_PR_Swap_As_Src', 'hi register': 'Port Control',
     'hi field': 'Process Swap to Source'},

#VIF FIELD : Accepts_PR_Swap_As_Snk
 {'alias': 'XML_VIF_ALIAS_Accepts_PR_Swap_As_Snk', 'hi register': 'Port Control',
     'hi field': 'Process Swap to Sink'},

#VIF FIELD : Requests_PR_Swap_As_Src
 {'alias': 'XML_VIF_ALIAS_Requests_PR_Swap_As_Src', 'hi register': 'Port Control',
     'hi field': 'Initiate Swap to Sink'},

#VIF FIELD : Requests_PR_Swap_As_Snk
 {'alias': 'XML_VIF_ALIAS_Requests_PR_Swap_As_Snk', 'hi register': 'Port Control',
     'hi field': 'Initiate Swap to Source'},

#VIF FIELD : FR_Swap_Supported_As_Initial_Sink
 {'alias': 'XML_VIF_ALIAS_FR_Swap_Supported_As_Initial_Sink', 'hi register': 'Port Control',
     'hi field': 'FR Swap Enabled'},

#VIF FIELD : Data_Capable_As_USB_Host_SOP
 {'alias': 'XML_VIF_ALIAS_Data_Capable_As_USB_Host_SOP', 'hi register': 'TX Identity',
     'hi field': 'USB Communication Capable as Host'},

#VIF FIELD : Data_Capable_As_USB_Device_SOP
 {'alias': 'XML_VIF_ALIAS_Data_Capable_As_USB_Device_SOP', 'hi register': 'TX Identity',
     'hi field': 'USB Communication Capable as Device'},

#VIF FIELD : Product_Type_UFP_SOP
 {'alias': 'XML_VIF_ALIAS_Product_Type_UFP_SOP', 'hi register': 'TX Identity',
     'hi field': 'Product Type UFP'},

#VIF FIELD : Product_Type_DFP_SOP
 {'alias': 'XML_VIF_ALIAS_Product_Type_DFP_SOP', 'hi register': 'TX Identity',
     'hi field': 'Product Type DFP'},

#VIF FIELD : Modal_Operation_Supported_SOP
 {'alias': 'XML_VIF_ALIAS_Modal_Operation_Supported_SOP', 'hi register': 'TX Identity',
     'hi field': 'Modal Operation Supported'},

#VIF FIELD : XID_SOP
 {'alias': 'XML_VIF_ALIAS_XID_SOP', 'hi register': 'TX Identity',
     'hi field': 'Certification Test ID'},

#VIF FIELD : USB_VID_SOP
 {'alias': 'XML_VIF_ALIAS_USB_VID_SOP', 'hi register': 'TX Identity',
     'hi field': 'Vendor ID'},

#VIF FIELD : PID_SOP
 {'alias': 'XML_VIF_ALIAS_PID_SOP', 'hi register': 'TX Identity',
     'hi field': 'USB Product ID'},

#VIF FIELD : bcdDevice_SOP
 {'alias': 'XML_VIF_ALIAS_bcdDevice_SOP', 'hi register': 'TX Identity',
     'hi field': 'BCD Device'},

#VIF FIELD : Product_Total_Source_Power_mW
 {'alias': 'XML_VIF_ALIAS_Product_Total_Source_Power_mW', 'hi register': 'Tx Source Capabilities Extended Data Block',
     'hi field': 'Source PDP'},


#VIF FIELD : Num_SVIDs_Min_SOP
 {'alias': 'XML_VIF_ALIAS_Num_SVIDs_Min_SOP__1__Enable_DP_SID', 'hi register': 'Display Port Configuration',
     'hi field': 'Enable DP SID'},
 {'alias': 'XML_VIF_ALIAS_Num_SVIDs_Min_SOP__2__Intel_VID_Enabled', 'hi register': 'Thunderbolt Configuration',
     'hi field': 'Thunderbolt VID Enabled'},
 {'alias': 'XML_VIF_ALIAS_SOPSVIDList__3__Enable_User_SID', 'hi register': 'User Alternate Mode Configuration',
     'hi field': 'USVID Enabled'},


#VIF FIELD : Num_SVIDs_Max_SOP
 {'alias': 'XML_VIF_ALIAS_Num_SVIDs_Max_SOP__1__Enable_DP_SID', 'hi register': 'Display Port Configuration',
     'hi field': 'Enable DP SID'},
 {'alias': 'XML_VIF_ALIAS_Num_SVIDs_Min_SOP__2__Intel_VID_Enabled', 'hi register': 'Thunderbolt Configuration',
     'hi field': 'Thunderbolt VID Enabled'},
 {'alias': 'XML_VIF_ALIAS_SOPSVIDList__3__Enable_User_SID', 'hi register': 'User Alternate Mode Configuration',
     'hi field': 'USVID Enabled'},


#VIF FIELD : SOPSVIDList
 {'alias': 'XML_VIF_ALIAS_SOPSVIDList__1__Enable_DP_SID', 'hi register': 'Display Port Configuration',
     'hi field': 'Enable DP SID'},
 {'alias': 'XML_VIF_ALIAS_Num_SVIDs_Min_SOP__2__Intel_VID_Enabled', 'hi register': 'Thunderbolt Configuration',
     'hi field': 'Thunderbolt VID Enabled'},
 {'alias': 'XML_VIF_ALIAS_SOPSVIDList__3__Enable_User_SID', 'hi register': 'User Alternate Mode Configuration',
     'hi field': 'USVID Enabled'},
 {'alias': 'XML_VIF_ALIAS_SOPSVIDList__3__User_ALT_Mode_SVID_Value', 'hi register': 'User Alternate Mode Configuration',
     'hi field': 'User ALT Mode SVID Value'},
 {'alias': 'XML_VIF_ALIAS_SOPSVIDList__3__User_Mode_1_Enabled', 'hi register': 'User Alternate Mode Configuration',
     'hi field': 'User Mode 1 Enabled'},
 {'alias': 'XML_VIF_ALIAS_SOPSVIDList__3__User_Mode_2_Enabled', 'hi register': 'User Alternate Mode Configuration',
     'hi field': 'User Mode 2 Enabled'},
 {'alias': 'XML_VIF_ALIAS_SOPSVIDList__3__User_Mode_3_Enabled', 'hi register': 'User Alternate Mode Configuration',
     'hi field': 'User Mode 3 Enabled'},
 {'alias': 'XML_VIF_ALIAS_SOPSVIDList__3__User_Mode_4_Enabled', 'hi register': 'User Alternate Mode Configuration',
     'hi field': 'User Mode 4 Enabled'},

 {'alias': 'XML_VIF_ALIAS_EPR_Supported_As_SNK', 'hi register': 'Global System Configuration',
     'hi field': 'EPR Supported As Sink'},
 {'alias': 'XML_VIF_ALIAS_EPR_Supported_As_SRC', 'hi register': 'Global System Configuration',
     'hi field': 'EPR Supported As Source'},

]


# ==========================================================================
# END - MANUAL - Template Info
# ==========================================================================



# ==========================================================================
# Helper classes that generate data models
# ==========================================================================

class cPDOCurrentField(register_class.cScalingDMTerminator) :
    def __init__(self, register, iDict, ppsType = False):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        if (False == ppsType):
            self.dictScaleUnits = {'' : 0.01, 'A' : 0.01, 'mA' : 10.0}
        else:
            self.dictScaleUnits = {'' : 0.05, 'A' : 0.05, 'mA' : 20.0}
        self.defaultUnit = 'A'


class cPDOVoltageField(register_class.cScalingDMTerminator) :
    def __init__(self, register, iDict, ppsType = False):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        if (False == ppsType):
            self.dictScaleUnits = {'' : 0.05, 'V' : 0.05, 'mV' : 50.0}
        else:
            self.dictScaleUnits = {'' : 0.1, 'V' : 0.1, 'mV' : 25.0}
        self.defaultUnit = 'V'

class cPDOPowerField(register_class.cScalingDMTerminator) :
    def __init__(self, register, iDict, ppsType = False):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'' : 0.25, 'W' : 0.25, 'mW' : 250.0}
        self.defaultUnit = 'W'


class cThresholdVoltageField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 0.2, 'V': 0.2, 'mV': 100.0}
        self.defaultUnit = 'V'


class cThresholdPowerField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 0.5, 'W': 0.5, 'mW': 500.0}
        self.defaultUnit = 'W'


class cOVPVoltageField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 0.32, 'V': 0.32, 'mV': 320.0}
        self.defaultUnit = 'V'
        self.scalingOffset = 12


class cI2CTimeoutField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 25.0, 'mS': 25.0, 'S': 0.025}
        self.defaultUnit = 'mS'
        self.scalingOffset = 1


class cEventDelay500uSField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 0.5, 'mS': 0.5}
        self.defaultUnit = 'mS'


class cEventDelay250uSField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 0.25, 'mS': 0.25}
        self.defaultUnit = 'mS'


class cFRSInitmS(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 1, 'mS': 1}
        self.defaultUnit = 'mS'

class cDMBatterySourcePdoArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(cPDOPowerField(self.register, {'name': 'Maximum Power',
                                                     'offset': 0,
                                                     'bit length': 10}))

        self.addChild(cPDOVoltageField(self.register, {'name': 'Minimum Voltage',
                                                       'offset': 10,
                                                       'bit length': 10}))

        self.addChild(cPDOVoltageField(self.register, {'name': 'Maximum Voltage',
                                                       'offset': 20,
                                                       'bit length': 10}))

        supplyType = register_class.cListDMTerminator(self.register, {'name': 'Supply Type',
                                                                      'offset': 30,
                                                                      'bit length': 2})
        supplyType.help = """Supply type that will source this PDO."""
        supplyType.setReportList(['Fixed Source', 'Battery Source', 'Variable Source'])
        supplyType.addUpdateRegisterByName("self")
        supplyType.setMaxValue(2)

        self.addChild(supplyType)

class cPDPPowerField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 1, 'W': 1}
        self.defaultUnit = 'W'


class cDMFixedSourcePdoArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(cPDOCurrentField(self.register, {'name': 'Maximum Current',
                                                       'offset': 0,
                                                       'bit length': 10}))

        self.addChild(cPDOVoltageField(self.register, {'name': 'Voltage',
                                                       'offset': 10,
                                                       'bit length': 10}))

        PeakCurrent = register_class.cListDMTerminator(self.register, {'name': 'Peak Current',
                                                                       'offset': 20,
                                                                       'bit length': 2})
        PeakCurrent.help = """Set the percentage that the Source current can peak over the max before an OCP event occurs."""
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])

        self.addChild(PeakCurrent)

        reserved = register_class.cForceSetDMTerminator(self.register, {'name': "reserved",
                                                                        'offset': 22,
                                                                        'bit length': 8,
                                                                        'force value': int(0),
                                                                        'force display': 'reserved, set 0'})

        reserved.setFromInt(0)
        reserved.hide()
        self.addChild(reserved)

        supplyType = register_class.cListDMTerminator(self.register, {'name': 'Supply Type',
                                                                      'offset': 30,
                                                                      'bit length': 2})
        supplyType.help = """Select what type of supply will source this PDO."""
        supplyType.setReportList(['Fixed Source', 'Battery Source', 'Variable Source'])
        supplyType.addUpdateRegisterByName("self")
        supplyType.setMaxValue(2)

        self.addChild(supplyType)

class cDMVariableSourcePdoArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(cPDOCurrentField(self.register, {'name': 'Maximum Current',
                                                       'offset': 0,
                                                       'bit length': 10}))

        self.addChild(cPDOVoltageField(self.register, {'name': 'Minimum Voltage',
                                                       'offset': 10,
                                                       'bit length': 10}))

        self.addChild(cPDOVoltageField(self.register, {'name': 'Maximum Voltage',
                                                       'offset': 20,
                                                       'bit length': 10}))

        supplyType = register_class.cListDMTerminator(self.register, {'name': 'Supply Type',
                                                                      'offset': 30,
                                                                      'bit length': 2})
        supplyType.help = """Supply Type that will Source this PDO."""
        supplyType.setReportList(['Fixed Source', 'Battery Source', 'Variable Source'])
        supplyType.addUpdateRegisterByName("self")
        supplyType.setMaxValue(2)

        self.addChild(supplyType)


class cDMFixedSinkPdoArray(register_class.cDataModelArray) :
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(cPDOCurrentField( self.register,  { 'name' : 'Operating Current',
                                                                'offset' : 0,
                                                                'bit length' : 10}))

        self.addChild(cPDOVoltageField( self.register,  { 'name' : 'Voltage',
                                                                'offset' : 10,
                                                                'bit length' : 10}))

        PeakCurrent = register_class.cListDMTerminator( self.register,  { 'name' : 'Peak Current',
                                                                'offset' : 20,
                                                                'bit length' : 2})
        PeakCurrent.help = """Set the percentage that the Sink current can peak over the max before an OCP event occurs."""
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])

        self.addChild(PeakCurrent)

        reserved = register_class.cForceSetDMTerminator( self.register,  { 'name' : "reserved",
                                                        'offset' : 22,
                                                        'bit length' : 8,
                                                        'force value' : int(0),
                                                        'force display' : 'reserved, set 0'})

        reserved.setFromInt(0)
        reserved.hide()
        self.addChild(reserved)

        supplyType = register_class.cListDMTerminator( self.register,  { 'name' : 'Supply Type',
                                                                'offset' : 30,
                                                                'bit length' : 2})
        supplyType.help = """Select what type of supply will be attached to this Sink PDO."""
        supplyType.setReportList(['Fixed Sink', 'Battery Sink', 'Variable Sink','PPS Sink'])
        supplyType.addUpdateRegisterByName("self")
        supplyType.setMaxValue(3)

        self.addChild(supplyType)

        if ('No RDO Extensions' in iDict) and (iDict['No RDO Extensions'] == True) :
            pass
        else :
            self.addChild(cPDOCurrentField( self.register,  { 'name' : 'Maximum Operating Current',
                                                                    'offset' : 224,
                                                                    'bit length' : 10}))

            self.addChild(cPDOCurrentField( self.register,  { 'name' : 'Minimum Operating Current',
                                                                    'offset' : 234,
                                                                    'bit length' : 10}))

            self.addChild(register_class.cBooleanDMTerminator( self.register,  { 'name' : 'Ask For Max',
                                                                    'offset' : 254,
                                                                    'bit length' : 1}))

class cDMSinkPdo1Array(register_class.cDataModelArray) :
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        if ('Is Receive' in iDict) and (iDict['Is Receive'] == True) :
            isReceive = True
        else :
            isReceive = False

        self.addChild(cPDOCurrentField( self.register,  { 'name' : 'Operating Current',
                                                                'offset' : 0,
                                                                'bit length' : 10}))

        fvDisplayWidget = cPDOVoltageField( self.register,  { 'name' : 'Voltage',
                                                                'offset' : 10,
                                                                'bit length' : 10})


        fixedVoltage = register_class.cForceSetDMTerminator( self.register,  { 'name' : 'Voltage',
                                                                'offset' : 10,
                                                                'bit length' : 10,
                                                                'force value' : int(100),
                                                                'force display' : '5 V',
                                                                'display widget' : fvDisplayWidget })

        fixedVoltage.help = """Sink PDO1 will always be 5V to be PD Spec compliant."""
        self.addChild(fixedVoltage)
        fixedVoltage.setFromInt(100)

        PeakCurrent = register_class.cListDMTerminator( self.register,  { 'name' : 'Peak Current',
                                                                'offset' : 20,
                                                                'bit length' : 2})
        PeakCurrent.help = """Set the percentage that the Sink current can peak over the max before an OCP event occurs."""
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])

        self.addChild(PeakCurrent)

        reserved = register_class.cForceSetDMTerminator( self.register,  { 'name' : "reserved",
                                                        'offset' : 22,
                                                        'bit length' : 1,
                                                        'force value' : int(0),
                                                        'force display' : 'reserved, set 0'})

        reserved.setFromInt(0)
        reserved.hide()
        self.addChild(reserved)

        # Dual Role and Externally Powered are overwritten by firmware, so avoid confusion by not listing in GUI
        # USB capable is set in autonegotiate sink register
        # Higher Capability is set automatically if there are any >5V contracts
        # These are shown in receive registers, but not transmit registers, which are configuration registers

        frsCurrent = register_class.cListDMTerminator( self.register,  { 'name' : 'Fast Role Swap required USB Type-C Current',
                                                                'offset' : 23,
                                                                'bit length' : 2})
        frsCurrent.setReportList(['Fast Swap not Supported', 'Default USB Power', '5V, 1.5A', '5V, 3.0A'])

        self.addChild(frsCurrent)


        if ('Is Receive' in iDict ) and (iDict['Is Receive'] == True ) :
            self.addChild(register_class.cBooleanDMTerminator( self.register,  { 'name' : 'Dual Role Data',
                                                                    'offset' : 25,
                                                                    'bit length' : 1}))

            self.addChild(register_class.cBooleanDMTerminator( self.register,  { 'name' : 'USB Capable',
                                                                    'offset' : 26,
                                                                    'bit length' : 1}))

            self.addChild(register_class.cBooleanDMTerminator( self.register,  { 'name' : 'Externally Powered',
                                                                    'offset' : 27,
                                                                    'bit length' : 1}))

            self.addChild(register_class.cBooleanDMTerminator( self.register,  { 'name' : 'Higher Capability',
                                                                    'offset' : 28,
                                                                    'bit length' : 1}))

            self.addChild(register_class.cBooleanDMTerminator( self.register,  { 'name' : 'Dual Role Power',
                                                                    'offset' : 29,
                                                                    'bit length' : 1}))

        supplyType = register_class.cListDMTerminator( self.register,  { 'name' : 'Supply Type',
                                                                'offset' : 30,
                                                                'bit length' : 2})
        supplyType.help = """Select what type of supply this PDO will sink."""
        supplyType.setReportList(['Fixed Sink', 'Battery Sink', 'Variable Sink', 'PPS Sink'])
        supplyType.addUpdateRegisterByName("self")
        supplyType.setMaxValue(3)

        fixedSupplyType = register_class.cForceSetDMTerminator( self.register,  { 'name' : 'Supply Type',
                                                                'offset' : 30,
                                                                'bit length' : 2,
                                                                'force value' : int(0),
                                                                'force display' : 'Fixed Sink',
                                                                'display widget' : supplyType })

        fixedSupplyType.help = """Supply Type that will source PDO1."""
        self.addChild(fixedSupplyType)
        fixedSupplyType.setFromInt(0)


        if (('No RDO Extensions' in iDict) and (iDict['No RDO Extensions'] == True)) or (('Is Receive' in iDict) and (iDict['Is Receive'] == True)) :
            pass
        else :
            self.addChild(cPDOCurrentField( self.register,  { 'name' : 'Maximum Operating Current',
                                                                    'offset' : 224,
                                                                    'bit length' : 10}))

            self.addChild(cPDOCurrentField( self.register,  { 'name' : 'Minimum Operating Current',
                                                                    'offset' : 234,
                                                                    'bit length' : 10}))

            self.addChild(register_class.cBooleanDMTerminator( self.register,  { 'name' : 'Ask For Max',
                                                                    'offset' : 254,
                                                                    'bit length' : 1}))

class cDMVariableSinkPdoArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(cPDOCurrentField(self.register, {'name': 'Operating Current',
                                                       'offset': 0,
                                                       'bit length': 10}))

        self.addChild(cPDOVoltageField(self.register, {'name': 'Minimum Voltage',
                                                       'offset': 10,
                                                       'bit length': 10}))

        self.addChild(cPDOVoltageField(self.register, {'name': 'Maximum Voltage',
                                                       'offset': 20,
                                                       'bit length': 10}))

        supplyType = register_class.cListDMTerminator(self.register, {'name': 'Supply Type',
                                                                      'offset': 30,
                                                                      'bit length': 2})
        supplyType.help = """Supply Type that will be used for this Sink PDO."""
        supplyType.setReportList(['Fixed Sink', 'Battery Sink', 'Variable Sink', 'PPS Sink'])
        supplyType.addUpdateRegisterByName("self")
        supplyType.setMaxValue(3)

        self.addChild(supplyType)

        if ('No RDO Extensions' in iDict) and (iDict['No RDO Extensions'] == True):
            pass
        else:
            self.addChild(cPDOCurrentField(self.register, {'name': 'Maximum Operating Current',
                                                           'offset': 224,
                                                           'bit length': 10}))

            self.addChild(cPDOCurrentField(self.register, {'name': 'Minimum Operating Current',
                                                           'offset': 234,
                                                           'bit length': 10}))

            self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'Ask For Max',
                                                                              'offset': 254,
                                                                              'bit length': 1}))

class cDMAnySinkPdoArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        self.prependChildrenArray = []
        self.appendChildrenArray = []

        self.fixedOverlay = cDMFixedSinkPdoArray(register, self.tier, iDict)
        self.variableOverlay = cDMVariableSinkPdoArray(register, self.tier, iDict)
        self.batteryOverlay = cDMBatterySinkPdoArray(register, self.tier, iDict)
        self.ppsOverlay = cDMAugumentedSinkPdoArray(register, self.tier, iDict)

        # self.dataModelChildrenArray must contain the children in all three of the overlays
        self.dataModelChildrenArray = []
        self.dataModelChildrenArray.extend(self.fixedOverlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.variableOverlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.batteryOverlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.ppsOverlay.dataModelChildrenArray)

        self.dataModelGenerator = self.AnyPdoArrayDMGenerator

    def findDependentRegisters(self):
        # only update forcevals in current overlay
        type = self.fixedOverlay.getChildByName('Supply Type').valueToInt()
        if type == 0:
            return self.fixedOverlay.findDependentRegisters()

        elif type == 1:
            return self.variableOverlay.findDependentRegisters()

        elif type == 2:
            return self.batteryOverlay.findDependentRegisters()

        elif type == 3:
            return self.ppsOverlay.findDependentRegisters()

    def updateForceVal(self):
        # todo: should make a set parent call instead of allowing to be set directly
        #       then the objects can correctly set sub-object parent relationships
        self.fixedOverlay.parent = self.parent
        self.variableOverlay.parent = self.parent
        self.batteryOverlay.parent = self.parent

        # only update forcevals in current overlay
        type = self.fixedOverlay.getChildByName('Supply Type').valueToInt()
        if type == 0:
            self.fixedOverlay.updateForceVal()

        elif type == 1:
            self.variableOverlay.updateForceVal()

        elif type == 2:
            self.batteryOverlay.updateForceVal()

        elif type == 3:
            self.ppsOverlay.updateForceVal()

    def prependChild(self, child):
        self.prependChildrenArray[:0] = [child, ]
        # it is okay to append to the dataModelChildrenArray because it is not directly used in the
        #    data model generator.
        self.dataModelChildrenArray.append(child)

    def addChild(self, child):
        child.parent = self
        self.appendChildrenArray.append(child)
        self.dataModelChildrenArray.append(child)

    # return the first child with a matching name or none if no match
    def getChildByName(self, name):
        for child in self.prependChildrenArray:
            if child.name == name:
                return child

        for child in self.appendChildrenArray:
            if child.name == name:
                return child

        type = self.fixedOverlay.getChildByName('Supply Type').valueToInt()
        if type == 0:
            for child in self.fixedOverlay:
                if child.name == name:
                    return child
        elif type == 1:
            for child in self.variableOverlay:
                if child.name == name:
                    return child
        elif type == 2:
            for child in self.batteryOverlay:
                if child.name == name:
                    return child
        elif type == 3:
            for child in self.ppsOverlay:
                if child.name == name:
                    return child

        return None

    def AnyPdoArrayDMGenerator(self):
        # todo: should make a set parent call instead of allowing to be set directly
        #       then the objects can correctly set sub-object parent relationships
        self.fixedOverlay.parent = self.parent
        self.variableOverlay.parent = self.parent
        self.batteryOverlay.parent = self.parent
        self.ppsOverlay.parent = self.parent

        type = self.fixedOverlay.getChildByName('Supply Type').valueToInt()
        retDict = {'name': self.name, 'grouping tier': self.tier, 'show': self.show, 'data model list': []}
        if type == 0:
            for child in self.prependChildrenArray:
                if isinstance(child, dict):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
            retDict['data model list'].extend(self.fixedOverlay.dataModelGenerator()['data model list'])
            for child in self.appendChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
        elif type == 1:
            for child in self.prependChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
            retDict['data model list'].extend(self.batteryOverlay.dataModelGenerator()['data model list'])
            for child in self.appendChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
        elif type == 2:
            for child in self.prependChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
            retDict['data model list'].extend(self.variableOverlay.dataModelGenerator()['data model list'])
            for child in self.appendChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
        elif type == 3:
            for child in self.prependChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
            retDict['data model list'].extend(self.ppsOverlay.dataModelGenerator()['data model list'])
            for child in self.appendChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
        else:
            # invalid setting
            # TODO: improve error handling
            retDict['data model list'] = []

        return retDict

class cDMBatterySinkPdoArray(register_class.cDataModelArray) :
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(cPDOPowerField( self.register,  { 'name' : 'Operating Power',
                                                                'offset' : 0,
                                                                'bit length' : 10}))

        self.addChild(cPDOVoltageField( self.register,  { 'name' : 'Minimum Voltage',
                                                                'offset' : 10,
                                                                'bit length' : 10}))

        self.addChild(cPDOVoltageField( self.register,  { 'name' : 'Maximum Voltage',
                                                                'offset' : 20,
                                                                'bit length' : 10}))

        supplyType = register_class.cListDMTerminator( self.register,  { 'name' : 'Supply Type',
                                                                'offset' : 30,
                                                                'bit length' : 2})
        supplyType.help = """Supply Type that will be used for this Sink PDO."""
        supplyType.setReportList(['Fixed Sink', 'Battery Sink', 'Variable Sink', 'PPS Sink'])
        supplyType.addUpdateRegisterByName("self")
        supplyType.setMaxValue(2)

        self.addChild(supplyType)

        self.addChild(cPDOPowerField( self.register,  { 'name' : 'Maximum Operating Power',
                                                                'offset' : 224,
                                                                'bit length' : 10}))

        self.addChild(cPDOPowerField( self.register,  { 'name' : 'Minimum Operating Power',
                                                                'offset' : 234,
                                                                'bit length' : 10}))

        self.addChild(register_class.cBooleanDMTerminator( self.register,  { 'name' : 'Ask For Max',
                                                                'offset' : 254,
                                                                'bit length' : 1}))


class cDMAugumentedSinkPdoArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(cPDOCurrentField(self.register, {'name': 'Maximum Current',
                                                       'offset': 0,
                                                       'bit length': 7}, True))

        self.addChild(cPDOVoltageField(self.register, {'name': 'Minimum Voltage',
                                                       'offset': 8,
                                                       'bit length': 8}, True))

        self.addChild(cPDOVoltageField(self.register, {'name': 'Maximum Voltage',
                                                       'offset': 17,
                                                       'bit length': 8}, True))

        ppsupplyType = register_class.cListDMTerminator(self.register, {'name': 'PP Supply Type',
                                                                        'offset': 28,
                                                                        'bit length': 2})

        supplyType = register_class.cListDMTerminator(self.register, {'name': 'Supply Type',
                                                                      'offset': 30,
                                                                      'bit length': 2})

        ppsupplyType.help = """Supply Type that will be used for this Sink PDO."""
        ppsupplyType.setReportList(['Programmable Power Suppy'])
        ppsupplyType.addUpdateRegisterByName("self")
        ppsupplyType.setMaxValue(0)
        self.addChild(ppsupplyType)

        supplyType.help = """Supply Type that will be used for this Sink PDO."""
        supplyType.setReportList(['Fixed Sink', 'Battery Sink', 'Variable Sink', 'PPS Sink'])
        supplyType.addUpdateRegisterByName("self")
        supplyType.setMaxValue(3)

        self.addChild(supplyType)


class cIDHeaderVDO(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(register_class.cHexDMTerminator(self.register, {'name': 'USB Vendor ID',
                                                                      'offset': 0,
                                                                      'bit length': 16}))

        productTypeDFP = register_class.cListDMTerminator(self.register, {'name': 'Product Type (DFP)',
                                                                          'offset': 23,
                                                                          'bit length': 3})
        productTypeDFP.setReportList(
            ['Undefined', 'Hub', 'Host', 'Brick', 'Alternate Mode Controller'])

        self.addChild(productTypeDFP)

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'Modal Operation Supported',
                                                                          'offset': 26,
                                                                          'bit length': 1}))

        productTypeUFP = register_class.cListDMTerminator(self.register, {'name': 'Product Type (UFP)',
                                                                       'offset': 27,
                                                                       'bit length': 3})
        productTypeUFP.setMaxValue(6)
        productTypeUFP.setReportList(
            ['Undefined', 'Hub', 'Peripheral', 'Passive Cable', 'Active Cable', 'Alternate Mode Adapter',
             'Power Brick'])

        self.addChild(productTypeUFP)

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'Data Capable as USB Device',
                                                                          'offset': 30,
                                                                          'bit length': 1}))

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'Data Capable as USB Host',
                                                                          'offset': 31,
                                                                          'bit length': 1}))


class cUFPProductVDO(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(register_class.cHexDMTerminator(self.register, {'name': 'BCD Device',
                                                                      'offset': 0,
                                                                      'bit length': 16}))

        self.addChild(register_class.cHexDMTerminator(self.register, {'name': 'USB Product ID',
                                                                      'offset': 16,
                                                                      'bit length': 16}))


class cCableVDO(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        usbSSSignal = register_class.cListDMTerminator(self.register, {'name': 'USB SS Signalling',
                                                                       'offset': 0,
                                                                       'bit length': 3})
        usbSSSignal.setMaxValue(2)
        usbSSSignal.setReportList(['USB 2.0 Only', 'USB 3.1 Gen 1', 'USB 3.1 Gen 1 and 2'])

        self.addChild(usbSSSignal)

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'SOP" Controller Present',
                                                                          'offset': 3,
                                                                          'bit length': 1}))

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'VBus Through Cable',
                                                                          'offset': 4,
                                                                          'bit length': 1}))

        currentCap = register_class.cListDMTerminator(self.register, {'name': 'VBus Current Capability',
                                                                      'offset': 5,
                                                                      'bit length': 2})
        currentCap.setMaxValue(3)
        currentCap.setReportList(['1.5 A', '3.0 A', '5 A'])

        self.addChild(currentCap)

        ssrx2dir = register_class.cListDMTerminator(self.register, {'name': 'SSRx 2 Directionality',
                                                                    'offset': 7,
                                                                    'bit length': 1})
        ssrx2dir.setReportList(['Fixed', 'Configurable'])

        self.addChild(ssrx2dir)

        ssrx1dir = register_class.cListDMTerminator(self.register, {'name': 'SSRx 1 Directionality',
                                                                    'offset': 8,
                                                                    'bit length': 1})
        ssrx1dir.setReportList(['Fixed', 'Configurable'])

        self.addChild(ssrx1dir)

        sstx2dir = register_class.cListDMTerminator(self.register, {'name': 'SSTx 2 Directionality',
                                                                    'offset': 9,
                                                                    'bit length': 1})
        sstx2dir.setReportList(['Fixed', 'Configurable'])

        self.addChild(sstx2dir)

        sstx1dir = register_class.cListDMTerminator(self.register, {'name': 'SSTx 1 Directionality',
                                                                    'offset': 10,
                                                                    'bit length': 1})
        sstx1dir.setReportList(['Fixed', 'Configurable'])

        self.addChild(sstx1dir)

        cableTerm = register_class.cListDMTerminator(self.register, {'name': 'Cable Termination Type',
                                                                     'offset': 11,
                                                                     'bit length': 2})
        cableTerm.setReportList(['Both Ends Passive, VConn Not Required', 'Both Ends Passive, VConn Is Required',
                                 'One End Active, One End Passive, VConn Is Required',
                                 'Both Ends Active, VConn Is Required'])

        self.addChild(cableTerm)

        cableLat = register_class.cListDMTerminator(self.register, {'name': 'Cable Latency',
                                                                    'offset': 13,
                                                                    'bit length': 4})

        cableLat.setMaxValue(10)
        cableLat.setReportList(
            ['reserved (0000b)', '< 10nS (~1m)', '10-20nS (~2m)', '20-30nS (~3m)', '30-40nS (~4m)', '40-50nS (~5m)',
             '50-60nS (~6m)', '60-70nS (~7m)', '1000nS (~100m)', '2000nS (~200m)', '3000nS (~300m)'])

        self.addChild(cableLat)

        plugRec = register_class.cListDMTerminator(self.register, {'name': 'Type-C Plug/Receptacle',
                                                                   'offset': 17,
                                                                   'bit length': 1})

        plugRec.setMaxValue(10)
        plugRec.setReportList(['Plug', 'Receptacle'])

        self.addChild(plugRec)

        typeCto = register_class.cListDMTerminator(self.register, {'name': 'Type-C to Type-A/B/C',
                                                                   'offset': 18,
                                                                   'bit length': 2})

        typeCto.setMaxValue(2)
        typeCto.setReportList(['Type-A', 'Type-B', 'Type-C'])

        self.addChild(typeCto)

        self.addChild(register_class.cHexDMTerminator(self.register, {'name': 'Cable Firmware Version',
                                                                      'offset': 24,
                                                                      'bit length': 4}))

        self.addChild(register_class.cHexDMTerminator(self.register, {'name': 'Cable Hardware Version',
                                                                      'offset': 28,
                                                                      'bit length': 4}))


class cAMAVDO(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        usbSSSignal = register_class.cListDMTerminator(self.register, {'name': 'USB SS Signalling',
                                                                       'offset': 0,
                                                                       'bit length': 3})
        usbSSSignal.setMaxValue(3)
        usbSSSignal.setReportList(['USB 2.0 Only', 'USB 3.1 Gen 1', 'USB 3.1 Gen 1 and 2', 'USB 2.0 Billboard Only'])

        self.addChild(usbSSSignal)

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'VBus Required',
                                                                          'offset': 3,
                                                                          'bit length': 1}))

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'VConn Required',
                                                                          'offset': 4,
                                                                          'bit length': 1}))

        vConnPower = register_class.cListDMTerminator(self.register, {'name': 'VConn Power',
                                                                      'offset': 5,
                                                                      'bit length': 3})
        vConnPower.setMaxValue(6)
        vConnPower.setReportList(['1 W', '1.5 W', '2 W', '3 W', '4 W', '5 W', '6 W'])

        self.addChild(vConnPower)

        ssrx2dir = register_class.cListDMTerminator(self.register, {'name': 'SSRx 2 Directionality',
                                                                    'offset': 8,
                                                                    'bit length': 1})
        ssrx2dir.setReportList(['Fixed', 'Configurable'])

        self.addChild(ssrx2dir)

        ssrx1dir = register_class.cListDMTerminator(self.register, {'name': 'SSRx 1 Directionality',
                                                                    'offset': 9,
                                                                    'bit length': 1})
        ssrx1dir.setReportList(['Fixed', 'Configurable'])

        self.addChild(ssrx1dir)

        sstx2dir = register_class.cListDMTerminator(self.register, {'name': 'SSTx 2 Directionality',
                                                                    'offset': 10,
                                                                    'bit length': 1})
        sstx2dir.setReportList(['Fixed', 'Configurable'])

        self.addChild(sstx2dir)

        sstx1dir = register_class.cListDMTerminator(self.register, {'name': 'SSTx 1 Directionality',
                                                                    'offset': 11,
                                                                    'bit length': 1})
        sstx1dir.setReportList(['Fixed', 'Configurable'])

        self.addChild(sstx1dir)

        self.addChild(register_class.cHexDMTerminator(self.register, {'name': 'AMA Firmware Version',
                                                                      'offset': 24,
                                                                      'bit length': 4}))

        self.addChild(register_class.cHexDMTerminator(self.register, {'name': 'AMA Hardware Version',
                                                                      'offset': 28,
                                                                      'bit length': 4}))


class cCrInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte3Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Port',
                                                     'offset': 16,
                                                     'bit length': 8})
        Byte3Num.setReportList(['Reserved', 'Port A', 'Port B'])
        Byte3Num.setMinValue(1)
        Byte3Num.setMaxValue(2)
        self.addChild(Byte3Num)


class cCrOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(task_return_dict)
        self.addChild(Byte1Num)


class cGcInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)


class cGcOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(task_return_dict)
        self.addChild(Byte1Num)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Disabled State Supported',
                                                         'offset': 8,
                                                         'bit length': 1})
        self.addChild(disableSS)

        batCharge = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Battery Charging',
                                                         'offset': 9,
                                                         'bit length': 1})
        self.addChild(batCharge)

        usbPD = register_class.cBooleanDMTerminator(register,
                                                    {'name': 'USB Power Delivery',
                                                     'offset': 10,
                                                     'bit length': 1})
        self.addChild(usbPD)

        usbTypec = register_class.cBooleanDMTerminator(register,
                                                       {'name': 'USB Type-C Current',
                                                        'offset': 14,
                                                        'bit length': 1})
        self.addChild(usbTypec)

        powSource = register_class.cHexDMTerminator(register,
                                                    {'name': 'BM Power Source',
                                                     'offset': 16,
                                                     'bit length': 8})
        self.addChild(powSource)

        numConn = register_class.cDecimalDMTerminator(register,
                                                      {'name': 'Number of Connectors',
                                                       'offset': 40,
                                                       'bit length': 7})
        # not populated
        numConn.hide()
        self.addChild(numConn)

        setUom = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Set UOM Supported',
                                                      'offset': 48,
                                                      'bit length': 1})
        self.addChild(setUom)

        amDet = register_class.cBooleanDMTerminator(register,
                                                    {'name': 'Alternate Mode Details',
                                                     'offset': 50,
                                                     'bit length': 1})
        self.addChild(amDet)

        amOver = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Alternate Mode Override',
                                                      'offset': 51,
                                                      'bit length': 1})
        self.addChild(amOver)

        pdDetail = register_class.cBooleanDMTerminator(register,
                                                       {'name': 'PDO Details',
                                                        'offset': 52,
                                                        'bit length': 1})
        self.addChild(pdDetail)

        cableDetail = register_class.cBooleanDMTerminator(register,
                                                          {'name': 'Cable Details',
                                                           'offset': 53,
                                                           'bit length': 1})
        self.addChild(cableDetail)

        cableDetail = register_class.cBooleanDMTerminator(register,
                                                          {'name': 'External Supply Notification',
                                                           'offset': 54,
                                                           'bit length': 1})
        self.addChild(cableDetail)

        cableDetail = register_class.cBooleanDMTerminator(register,
                                                          {'name': 'PD Reset Notification',
                                                           'offset': 55,
                                                           'bit length': 1})
        self.addChild(cableDetail)

        numAlt = register_class.cDecimalDMTerminator(register,
                                                     {'name': 'Number of Alternate Modes',
                                                      'offset': 72,
                                                      'bit length': 8})
        self.addChild(numAlt)

        bcdBCVersion = register_class.cHexDMTerminator(register,
                                                       {'name': 'bcd BC Version',
                                                        'offset': 88,
                                                        'bit length': 16})
        # not populated
        self.addChild(bcdBCVersion)

        bcdPDVersion = register_class.cHexDMTerminator(register,
                                                       {'name': 'bcd PD Version',
                                                        'offset': 104,
                                                        'bit length': 16})
        self.addChild(bcdPDVersion)

        bcdUSBTypeCVersion = register_class.cHexDMTerminator(register,
                                                             {'name': 'USB Type-C Version',
                                                              'offset': 120,
                                                              'bit length': 16})
        self.addChild(bcdUSBTypeCVersion)


class cGccInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte3Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Port',
                                                     'offset': 16,
                                                     'bit length': 8})
        Byte3Num.setReportList(['Reserved', 'Port A', 'Port B'])
        Byte3Num.setMinValue(1)
        Byte3Num.setMaxValue(2)
        self.addChild(Byte3Num)


class cGccOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(task_return_dict)
        self.addChild(Byte1Num)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'DFP Only',
                                                         'offset': 8,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'UFP Only',
                                                         'offset': 9,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'DRP',
                                                         'offset': 10,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Audio Accessory',
                                                         'offset': 11,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Debug Accessory',
                                                         'offset': 12,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'USB 2',
                                                         'offset': 13,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'USB 3',
                                                         'offset': 14,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Alternate Mode',
                                                         'offset': 15,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Provider',
                                                         'offset': 16,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Consumer',
                                                         'offset': 17,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Swap to DFP',
                                                         'offset': 18,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Swap to UFP',
                                                         'offset': 19,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Swap to Source',
                                                         'offset': 20,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Swap to Sink',
                                                         'offset': 21,
                                                         'bit length': 1})
        self.addChild(disableSS)


class cSuorInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte3Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Port',
                                                     'offset': 16,
                                                     'bit length': 7})
        Byte3Num.setReportList(['Reserved', 'Port A', 'Port B'])
        Byte3Num.setMinValue(1)
        Byte3Num.setMaxValue(2)
        self.addChild(Byte3Num)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Initiate Swap to DFP',
                                                         'offset': 23,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Initiate Swap to UFP',
                                                         'offset': 24,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Accept Data Role Swap',
                                                         'offset': 25,
                                                         'bit length': 1})
        self.addChild(disableSS)


class cSuorOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(SUOR_task_return_dict)
        self.addChild(Byte1Num)


class cSpdrInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte3Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Port',
                                                     'offset': 16,
                                                     'bit length': 7})
        Byte3Num.setReportList(['Reserved', 'Port A', 'Port B'])
        Byte3Num.setMinValue(1)
        Byte3Num.setMaxValue(2)
        self.addChild(Byte3Num)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Initiate Swap to Source',
                                                         'offset': 23,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Initiate Swap to Sink',
                                                         'offset': 24,
                                                         'bit length': 1})
        self.addChild(disableSS)

        disableSS = register_class.cBooleanDMTerminator(register,
                                                        {'name': 'Accept Power Role Swap',
                                                         'offset': 25,
                                                         'bit length': 1})
        self.addChild(disableSS)


class cSpdrOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(SPDR_task_return_dict)
        self.addChild(Byte1Num)


class cGamInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte3Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Recepient',
                                                     'offset': 16,
                                                     'bit length': 2})
        Byte3Num.setReportList(['Port (near end)', 'SOP (far end)', 'SOP Prime', 'SOP Double Prime'])
        self.addChild(Byte3Num)

        Byte4Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Port',
                                                     'offset': 24,
                                                     'bit length': 7})
        Byte4Num.setReportList(['Reserved', 'Port A', 'Port B'])
        Byte4Num.setMinValue(1)
        Byte4Num.setMaxValue(2)
        self.addChild(Byte4Num)

        Byte5Num = register_class.cDecimalDMTerminator(self.register,
                                                       {'name': 'Alternate Mode Offset',
                                                        'offset': 32,
                                                        'bit length': 8})
        self.addChild(Byte5Num)

        Byte6Num = register_class.cDecimalDMTerminator(self.register,
                                                       {'name': 'Alternate Mode Number Of',
                                                        'offset': 40,
                                                        'bit length': 2})
        self.addChild(Byte6Num)


class cGamOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(task_return_dict)
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Number of Bytes Returned',
                                                     'offset': 8,
                                                     'bit length': 8})
        self.addChild(Byte2Num)

        svid1 = register_class.cHexDMTerminator(register,
                                                {'name': 'SVID 1',
                                                 'offset': 16,
                                                 'bit length': 16})
        self.addChild(svid1)

        mode1 = register_class.cHexDMTerminator(register,
                                                {'name': 'Mode 1',
                                                 'offset': 32,
                                                 'bit length': 32})
        self.addChild(mode1)

        svid2 = register_class.cHexDMTerminator(register,
                                                {'name': 'SVID 2',
                                                 'offset': 64,
                                                 'bit length': 16})
        self.addChild(svid2)

        mode2 = register_class.cHexDMTerminator(register,
                                                {'name': 'Mode 2',
                                                 'offset': 80,
                                                 'bit length': 32})
        self.addChild(mode2)


class cGcamInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte4Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Port',
                                                     'offset': 16,
                                                     'bit length': 7})
        Byte4Num.setReportList(['Reserved', 'Port A', 'Port B'])
        Byte4Num.setMinValue(1)
        Byte4Num.setMaxValue(2)
        self.addChild(Byte4Num)


class cGcamOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(task_return_dict)
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Supported Alternate Modes',
                                                        'offset': 8,
                                                        'bit length': 8})
        self.addChild(Byte2Num)


class cGpdosInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte4Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Port',
                                                     'offset': 24,
                                                     'bit length': 7})
        Byte4Num.setReportList(['Reserved', 'Port A', 'Port B'])
        Byte4Num.setMinValue(1)
        Byte4Num.setMaxValue(2)
        self.addChild(Byte4Num)

        partner = register_class.cBooleanDMTerminator(self.register,
                                                      {'name': 'Partner PDO',
                                                       'offset': 31,
                                                       'bit length': 1})
        self.addChild(partner)

        numPDO = register_class.cDecimalDMTerminator(register,
                                                     {'name': 'Number of PDOs',
                                                      'offset': 32,
                                                      'bit length': 2})
        self.addChild(numPDO)

        sourceSink = register_class.cListDMTerminator(self.register,
                                                      {'name': 'Source or Sink',
                                                       'offset': 34,
                                                       'bit length': 1})
        sourceSink.setReportList(['Sink PDOs', 'Source PDOs'])
        self.addChild(sourceSink)

        sourceType = register_class.cListDMTerminator(self.register,
                                                      {'name': 'Source Type',
                                                       'offset': 35,
                                                       'bit length': 2})
        sourceType.setReportList(
            ['Current Supported Capabilities', 'Advertised Capabilities', 'Maximum Supported Capabilities'])
        sourceType.setMaxValue(2)
        self.addChild(sourceType)


class cGpdosOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(task_return_dict)
        self.addChild(Byte1Num)

        Byte2Num = register_class.cHexDMTerminator(register,
                                                   {'name': 'PDO1',
                                                    'offset': 8,
                                                    'bit length': 32})
        self.addChild(Byte2Num)

        Byte2Num = register_class.cHexDMTerminator(register,
                                                   {'name': 'PDO2',
                                                    'offset': 40,
                                                    'bit length': 32})
        self.addChild(Byte2Num)

        Byte2Num = register_class.cHexDMTerminator(register,
                                                   {'name': 'PDO3',
                                                    'offset': 72,
                                                    'bit length': 32})
        self.addChild(Byte2Num)

        Byte2Num = register_class.cHexDMTerminator(register,
                                                   {'name': 'PDO4',
                                                    'offset': 104,
                                                    'bit length': 32})
        self.addChild(Byte2Num)


class cGcsInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte4Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Port',
                                                     'offset': 24,
                                                     'bit length': 7})
        Byte4Num.setReportList(['Reserved', 'Port A', 'Port B'])
        Byte4Num.setMinValue(1)
        Byte4Num.setMaxValue(2)
        self.addChild(Byte4Num)


class cGcsOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(task_return_dict)
        self.addChild(Byte1Num)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'External Supply Change',
                                                      'offset': 9,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Power Operational Mode Change',
                                                      'offset': 10,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Supported Provider Capabilities Change',
                                                      'offset': 13,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Negotiated Power Level Change',
                                                      'offset': 14,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'PD Reset Complete',
                                                      'offset': 15,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Supported CAM Change',
                                                      'offset': 16,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Battery Charging Status Change',
                                                      'offset': 17,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Connector Partner Status Change',
                                                      'offset': 19,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Power Direction Change',
                                                      'offset': 20,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Connect Change',
                                                      'offset': 22,
                                                      'bit length': 1})
        self.addChild(extSup)

        powOp = register_class.cListDMTerminator(register,
                                                 {'name': 'Power Operation Mode',
                                                  'offset': 24,
                                                  'bit length': 3})
        powOp.setReportList(
            ['Reserved', 'USB Default Operation', 'Battery Charging', 'Power Delivery', 'USB Type-C 1.5A',
             'USB Type-C 3.0A', 'Reserved', 'Reserved'])
        self.addChild(powOp)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Connected',
                                                      'offset': 27,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cListDMTerminator(register,
                                                  {'name': 'Power Direction',
                                                   'offset': 28,
                                                   'bit length': 1})
        extSup.setReportList(['Sink', 'Source'])
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'USB Mode',
                                                      'offset': 29,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Alternate Mode',
                                                      'offset': 30,
                                                      'bit length': 1})
        self.addChild(extSup)

        connPartType = register_class.cListDMTerminator(register,
                                                        {'name': 'Connector Partner Type',
                                                         'offset': 37,
                                                         'bit length': 3})
        connPartType.setReportList(['Reserved', 'DFP Attached', 'UFP Attached', 'Powered Cable, no UFP Attached',
                                    'Powered Cable, UFP Attached', 'Debug Accessory Attached', 'Audio Adaper Attached',
                                    'Reserved'])
        self.addChild(connPartType)

        reqDO = register_class.cHexDMTerminator(register,
                                                {'name': 'Request Data Object',
                                                 'offset': 40,
                                                 'bit length': 32})
        self.addChild(reqDO)

        connPartType = register_class.cListDMTerminator(register,
                                                        {'name': 'Battery Charging Status',
                                                         'offset': 72,
                                                         'bit length': 2})
        connPartType.setReportList(
            ['No Charging', 'Nominal Charging Rate', 'Slow Charging Rate', 'Very Slow Charging Rate'])
        self.addChild(connPartType)

        connPartType = register_class.cListDMTerminator(register,
                                                        {'name': 'Provider Capabilites Limited Reason',
                                                         'offset': 74,
                                                         'bit length': 2})
        connPartType.setReportList(['Power Budget Lowered', 'Reaching Power Budget Limit', 'Reserved', 'Reserved'])
        self.addChild(connPartType)


class cGesInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte4Num = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Port',
                                                     'offset': 24,
                                                     'bit length': 7})
        Byte4Num.setReportList(['Reserved', 'Port A', 'Port B'])
        Byte4Num.setMinValue(1)
        Byte4Num.setMaxValue(2)
        self.addChild(Byte4Num)


class cGesOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Tsk Return Value',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setReportDict(task_return_dict)
        self.addChild(Byte1Num)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Unrecognized Command',
                                                      'offset': 8,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Nonexistent Connector',
                                                      'offset': 9,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Invalid Command Specific Parameters',
                                                      'offset': 10,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Incompatible Connector Partner',
                                                      'offset': 11,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'CC Communication Error',
                                                      'offset': 12,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Command Unsuccessful due to Dead Battery',
                                                      'offset': 13,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Contract Negotiation Failure',
                                                      'offset': 14,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Overcurrent',
                                                      'offset': 15,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Undefined',
                                                      'offset': 16,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Port Partner Rejected Swap',
                                                      'offset': 17,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Hard Reset',
                                                      'offset': 18,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'PPM Policy Conflict',
                                                      'offset': 19,
                                                      'bit length': 1})
        self.addChild(extSup)

        extSup = register_class.cBooleanDMTerminator(register,
                                                     {'name': 'Swap Rejected',
                                                      'offset': 20,
                                                      'bit length': 1})
        self.addChild(extSup)


class cTBTEnterMode(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        TBTCableSpeedSupport = register_class.cListDMTerminator(self.register,
                                                                {'name': 'Thunderbolt Cable Speed Support',
                                                                 'offset': 0,
                                                                 'bit length': 3})

        TBTCableSpeedSupport.help = """Displays if a power mismatch has occurred."""
        TBTCableSpeedSupport.setReportList(
            ['Reserved', 'USB3.1 gen1 cable (10Gb/s Thunderbolt support)', '10Gb/s only', '10Gb/s & 20Gb/s only'])
        TBTCableSpeedSupport.setMaxValue(3)
        self.addChild(TBTCableSpeedSupport)

        TBTCableGen = register_class.cListDMTerminator(self.register,
                                                       {'name': 'Thunderbolt Cable Gen',
                                                        'offset': 3,
                                                        'bit length': 2})

        TBTCableGen.help = """Displays if a power mismatch has occurred."""
        TBTCableGen.setReportList(['3rd generation TBT (10.3125 and 20.625 Gb/s)',
                                   '4th generation TBT (10.0, 10.3125, 20.0 and 20.625 Gb/s)'])
        TBTCableGen.setMaxValue(1)
        self.addChild(TBTCableGen)

        CableType = register_class.cListDMTerminator(self.register,
                                                     {'name': 'Cable Type',
                                                      'offset': 5,
                                                      'bit length': 1})

        CableType.help = """Status of the Thunderbolt Connection."""
        CableType.setReportList(['Type-C to Type-C Cable', 'Legacy Adapter'])
        self.addChild(CableType)

        activeCable = register_class.cListDMTerminator(self.register,
                                                       {'name': 'Active Cable',
                                                        'offset': 6,
                                                        'bit length': 1})

        CableType.help = """Status of the Thunderbolt Connection."""
        CableType.setReportList(['Active Cable', 'Passive Cable'])
        self.addChild(activeCable)

        ActiveLinkTraining = register_class.cListDMTerminator(self.register,
                                                              {'name': 'Active Link Training',
                                                               'offset': 7,
                                                               'bit length': 1})

        ActiveLinkTraining.help = """Status of Active Link Training connection."""
        ActiveLinkTraining.setReportList(
            ['Active with bi-directional LSRX communication (also used for passive cables)',
             'Active with uni-directional LSRX communication'])
        self.addChild(ActiveLinkTraining)

        legacy = register_class.cListDMTerminator(self.register,
                                                  {'name': 'Legacy TBT Adapter',
                                                   'offset': 8,
                                                   'bit length': 1})

        legacy.setReportList(['Is Not a Legacy Adapter', 'Is a Legacy Adapter'])

        self.addChild(legacy)


class cTBTSOPResponse(register_class.cDataModelArray) :
    def __init__ (self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        legacy = register_class.cListDMTerminator(self.register,
                                                        {'name' : 'Legacy TBT Adapter',
                                                         'offset' : 0,
                                                         'bit length' : 1 })

        legacy.setReportList(['Is Not a Legacy Adapter', 'Is a Legacy Adapter'])

        self.addChild(legacy)

        VPROSupported = register_class.cListDMTerminator(self.register,
                                                  {'name': 'VPRO Supported',
                                                   'offset': 10,
                                                   'bit length': 1})

        VPROSupported.setReportList(['Is Not Supported', 'Is Supported'])

        self.addChild(VPROSupported)

class cTBTSOPPrimeResponse(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        TBTCableSpeedSupport = register_class.cListDMTerminator(self.register,
                                                                {'name': 'Thunderbolt Cable Speed Support',
                                                                 'offset': 0,
                                                                 'bit length': 3})

        TBTCableSpeedSupport.help = """Displays if a power mismatch has occurred."""
        TBTCableSpeedSupport.setReportList(
            ['Reserved', 'USB3.1 gen1 cable (10Gb/s Thunderbolt support)', '10Gb/s only', '10Gb/s & 20Gb/s only'])
        TBTCableSpeedSupport.setMaxValue(3)
        self.addChild(TBTCableSpeedSupport)

        TBTCableGen = register_class.cListDMTerminator(self.register,
                                                       {'name': 'Thunderbolt Cable Gen',
                                                        'offset': 3,
                                                        'bit length': 2})

        TBTCableGen.help = """Displays if a power mismatch has occurred."""
        TBTCableGen.setReportList(['3rd generation TBT (10.3125 and 20.625 Gb/s)',
                                   '4th generation TBT (10.0, 10.3125, 20.0 and 20.625 Gb/s)'])
        TBTCableGen.setMaxValue(1)
        self.addChild(TBTCableGen)

        CableType = register_class.cListDMTerminator(self.register,
                                                     {'name': 'Cable Type',
                                                      'offset': 5,
                                                      'bit length': 1})

        CableType.help = """Status of the Thunderbolt Connection."""
        CableType.setReportList(['Type-C to Type-C Cable', 'Legacy Adapter'])
        self.addChild(CableType)

        activeCable = register_class.cListDMTerminator(self.register,
                                                       {'name': 'Active Cable',
                                                        'offset': 6,
                                                        'bit length': 1})

        CableType.help = """Status of the Thunderbolt Connection."""
        CableType.setReportList(['Active Cable', 'Passive Cable'])
        self.addChild(activeCable)

        ActiveLinkTraining = register_class.cListDMTerminator(self.register,
                                                              {'name': 'Active Link Training',
                                                               'offset': 7,
                                                               'bit length': 1})

        ActiveLinkTraining.help = """Status of Active Link Training connection."""
        ActiveLinkTraining.setReportList(
            ['Active with bi-directional LSRX communication (also used for passive cables)',
             'Active with uni-directional LSRX communication'])
        self.addChild(ActiveLinkTraining)


class cAnyUCSIInputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        self.CONNECTOR_RESET_input_overlay = cCrInputArray(register, 1, iDict)
        self.GET_CAPABILITY_input_overlay = cGcInputArray(register, 1, iDict)
        self.GET_CONNECTOR_CAPABILITY_input_overlay = cGccInputArray(register, 1, iDict)
        self.SET_UOR_input_overlay = cSuorInputArray(register, 1, iDict)
        self.SET_PDR_input_overlay = cSpdrInputArray(register, 1, iDict)
        self.GET_ALTERNATE_MODES_input_overlay = cGamInputArray(register, 1, iDict)
        self.GET_CAM_SUPPORTED_input_overlay = cGcamInputArray(register, 1, iDict)
        self.GET_PDOS_input_overlay = cGpdosInputArray(register, 1, iDict)
        self.GET_CONNECTOR_STATUS_input_overlay = cGcsInputArray(register, 1, iDict)
        self.GET_ERROR_STATUS_input_overlay = cGesInputArray(register, 1, iDict)

        # self.dataModelChildrenArray must contain the children in all three of the overlays
        self.dataModelChildrenArray = []
        self.dataModelChildrenArray.extend(self.CONNECTOR_RESET_input_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_CAPABILITY_input_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_CONNECTOR_CAPABILITY_input_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.SET_UOR_input_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.SET_PDR_input_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_ALTERNATE_MODES_input_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_CAM_SUPPORTED_input_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_PDOS_input_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_CONNECTOR_STATUS_input_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_ERROR_STATUS_input_overlay.dataModelChildrenArray)

        Byte1Num = register_class.cDictDMTerminator(register,
                                                    {'name': 'Command',
                                                     'offset': 0,
                                                     'bit length': 8})
        Byte1Num.setFromInt(0x3)
        Byte1Num.setReportDict(ucsiCommand_dict)
        Byte1Num.addUpdateRegisterByName('self')
        self.addChild(Byte1Num)

        Byte2Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 2',
                                                        'offset': 8,
                                                        'bit length': 8})
        Byte2Num.hide()
        self.addChild(Byte2Num)

        Byte3Num = register_class.cDecimalDMTerminator(register,
                                                       {'name': 'Byte 3',
                                                        'offset': 16,
                                                        'bit length': 8})
        self.addChild(Byte3Num)

        self.dataModelGenerator = self.AnyUCSIDMGenerator

    def AnyUCSIDMGenerator(self):

        self.CONNECTOR_RESET_input_overlay.parent = self.parent
        self.GET_CAPABILITY_input_overlay.parent = self.parent
        self.GET_CONNECTOR_CAPABILITY_input_overlay.parent = self.parent
        self.SET_UOR_input_overlay.parent = self.parent
        self.SET_PDR_input_overlay.parent = self.parent
        self.GET_ALTERNATE_MODES_input_overlay.parent = self.parent
        self.GET_CAM_SUPPORTED_input_overlay.parent = self.parent
        self.GET_PDOS_input_overlay.parent = self.parent
        self.GET_CONNECTOR_STATUS_input_overlay.parent = self.parent
        self.GET_ERROR_STATUS_input_overlay.parent = self.parent

        cmd = self.getChildByName('Command').valueToInt()

        if cmd not in ucsiCommand_dict:
            pass
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_CONNECTOR_RESET':
            return self.CONNECTOR_RESET_input_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CAPABILITY':
            return self.GET_CAPABILITY_input_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CONNECTOR_CAPABILITY':
            return self.GET_CONNECTOR_CAPABILITY_input_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_SET_UOR':
            return self.SET_UOR_input_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_SET_PDR':
            return self.SET_PDR_input_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_ALTERNATE_MODES':
            return self.GET_ALTERNATE_MODES_input_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CAM_SUPPORTED':
            return self.GET_CAM_SUPPORTED_input_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_PDOS':
            return self.GET_PDOS_input_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CONNECTOR_STATUS':
            return self.GET_CONNECTOR_STATUS_input_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_ERROR_STATUS':
            return self.GET_ERROR_STATUS_input_overlay.dataModelGenerator()

        return self.childrenAsListDMGenerator()


class cAnyUCSIOutputArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        self.CONNECTOR_RESET_output_overlay = cCrOutputArray(register, 1, iDict)
        self.GET_CAPABILITY_output_overlay = cGcOutputArray(register, 1, iDict)
        self.GET_CONNECTOR_CAPABILITY_output_overlay = cGccOutputArray(register, 1, iDict)
        self.SET_UOR_output_overlay = cSuorOutputArray(register, 1, iDict)
        self.SET_PDR_output_overlay = cSpdrOutputArray(register, 1, iDict)
        self.GET_ALTERNATE_MODES_output_overlay = cGamOutputArray(register, 1, iDict)
        self.GET_CAM_SUPPORTED_output_overlay = cGcamOutputArray(register, 1, iDict)
        self.GET_PDOS_output_overlay = cGpdosOutputArray(register, 1, iDict)
        self.GET_CONNECTOR_STATUS_output_overlay = cGcsOutputArray(register, 1, iDict)
        self.GET_ERROR_STATUS_output_overlay = cGesOutputArray(register, 1, iDict)

        # self.dataModelChildrenArray must contain the children in all three of the overlays
        self.dataModelChildrenArray = []
        self.dataModelChildrenArray.extend(self.CONNECTOR_RESET_output_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_CAPABILITY_output_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_CONNECTOR_CAPABILITY_output_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.SET_UOR_output_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.SET_PDR_output_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_ALTERNATE_MODES_output_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_CAM_SUPPORTED_output_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_PDOS_output_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_CONNECTOR_STATUS_output_overlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.GET_ERROR_STATUS_output_overlay.dataModelChildrenArray)

        Byte1 = register_class.cDictDMTerminator(register,
                                                 {'name': 'Byte1',
                                                  'offset': 0,
                                                  'bit length': 8})

        Byte1.lock()
        self.addChild(Byte1)

        Byte2 = register_class.cDictDMTerminator(register,
                                                 {'name': 'Byte2',
                                                  'offset': 8,
                                                  'bit length': 8})

        Byte2.lock()
        self.addChild(Byte2)

        Byte3 = register_class.cDictDMTerminator(register,
                                                 {'name': 'Byte3',
                                                  'offset': 16,
                                                  'bit length': 8})

        Byte3.lock()
        self.addChild(Byte3)

        Byte4 = register_class.cDictDMTerminator(register,
                                                 {'name': 'Byte4',
                                                  'offset': 24,
                                                  'bit length': 8})

        Byte4.lock()
        self.addChild(Byte4)

        Byte5 = register_class.cDictDMTerminator(register,
                                                 {'name': 'Byte5',
                                                  'offset': 32,
                                                  'bit length': 8})

        Byte5.lock()
        self.addChild(Byte5)

        self.dataModelGenerator = self.AnyUCSIDMGenerator

        self.register.currentCommand = None

    def AnyUCSIDMGenerator(self):

        self.CONNECTOR_RESET_output_overlay.parent = self.parent
        self.GET_CAPABILITY_output_overlay.parent = self.parent
        self.GET_CONNECTOR_CAPABILITY_output_overlay.parent = self.parent
        self.SET_UOR_output_overlay.parent = self.parent
        self.SET_PDR_output_overlay.parent = self.parent
        self.GET_ALTERNATE_MODES_output_overlay.parent = self.parent
        self.GET_CAM_SUPPORTED_output_overlay.parent = self.parent
        self.GET_PDOS_output_overlay.parent = self.parent
        self.GET_CONNECTOR_STATUS_output_overlay.parent = self.parent
        self.GET_ERROR_STATUS_output_overlay.parent = self.parent

        cmd = self.register.currentCommand

        if cmd not in ucsiCommand_dict:
            pass
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_CONNECTOR_RESET':
            return self.CONNECTOR_RESET_output_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CAPABILITY':
            return self.GET_CAPABILITY_output_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CONNECTOR_CAPABILITY':
            return self.GET_CONNECTOR_CAPABILITY_output_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_SET_UOR':
            return self.SET_UOR_output_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_SET_PDR':
            return self.SET_PDR_output_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_ALTERNATE_MODES':
            return self.GET_ALTERNATE_MODES_output_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CAM_SUPPORTED':
            return self.GET_CAM_SUPPORTED_output_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_PDOS':
            return self.GET_PDOS_output_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CONNECTOR_STATUS':
            return self.GET_CONNECTOR_STATUS_output_overlay.dataModelGenerator()
        elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_ERROR_STATUS':
            return self.GET_ERROR_STATUS_output_overlay.dataModelGenerator()

        return self.childrenAsListDMGenerator()


class cDMAnyChannelTerminator(register_class.cDataModelTerminator):
    def __init__(self, register, adcFunction, iDict):
        register_class.cDataModelTerminator.__init__(self, register, iDict)
        self.adcFunction = adcFunction
        self.terminatorOverlayList = []

        for channel in ADCchannelListOfDict:
            channelTerm = register_class.cScalingDMTerminator(self.register,
                                                              {'name': iDict['name'],
                                                               'offset': iDict['offset'],
                                                               'bit length': iDict['bit length']})
            ratio = ((1.2) / 1024) * channel['Divider Ratio']
            channelTerm.dictScaleUnits = {'': ratio, channel['Unit']: ratio}
            channelTerm.defaultUnit = channel['Unit']

            self.terminatorOverlayList.append(channelTerm)

        self.dataModelGenerator = self.AnyScalerGenerator

    def AnyScalerGenerator(self):
        # todo: should make a set parent call instead of allowing to be set directly
        #       then the objects can correctly set sub-object parent relationships
        for term in self.terminatorOverlayList:
            term.parent = self.parent

        channel = self.adcFunction.inargsDataModel.getChildByName('Channel').valueToInt()
        dmGenerator = self.terminatorOverlayList[channel]

        return dmGenerator.dataModelGenerator()


class cBatteryECArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #

        Vid = register_class.cHexDMTerminator(self.register,
                                              {'name': 'Vendor ID',
                                               'offset': 0,
                                               'bit length': 16})

        self.addChild(Vid)

        Pid = register_class.cHexDMTerminator(self.register,
                                              {'name': 'Product ID',
                                               'offset': 16,
                                               'bit length': 16})

        self.addChild(Pid)

        battCap = register_class.cHexDMTerminator(self.register,
                                                  {'name': 'Battery Design Capacity',
                                                   'offset': 32,
                                                   'bit length': 16})

        self.addChild(battCap)

        battLFCCap = register_class.cHexDMTerminator(self.register,
                                                     {'name': 'Battery Last Full Charge Capacity',
                                                      'offset': 48,
                                                      'bit length': 16})

        self.addChild(battLFCCap)

        batteryType = register_class.cHexDMTerminator(self.register,
                                                      {'name': 'Battery Type',
                                                       'offset': 64,
                                                       'bit length': 8})

        self.addChild(batteryType)


class cPeakCurrentECField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 10, """%""": 10}
        self.defaultUnit = """%"""


class cOverloadPeriodECField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 20, 'mS': 20, 'S': 0.02}
        self.defaultUnit = 'mS'


class cDutyCycleECField(register_class.cScalingDMTerminator):
    def __init__(self, register, iDict):
        register_class.cScalingDMTerminator.__init__(self, register, iDict)
        # map all strings representing units to scale factor
        self.dictScaleUnits = {'': 5, """%""": 5}
        self.defaultUnit = """%"""


class cPeakCurrentECArray(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)
        #
        self.addChild(cPeakCurrentECField(self.register, {'name': 'Peak Overload Current',
                                                          'offset': 0,
                                                          'bit length': 5}))

        self.addChild(cOverloadPeriodECField(self.register, {'name': 'Overload Period',
                                                             'offset': 5,
                                                             'bit length': 6}))

        self.addChild(cDutyCycleECField(self.register, {'name': 'Duty Cycle',
                                                        'offset': 11,
                                                        'bit length': 4}))

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'VBus Droop',
                                                                          'offset': 15,
                                                                          'bit length': 1}))


class cUserAMGpioCfgSet(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        AppCfgMaskLow = register_class.cDictDMTerminator(self.register,
                                                         {
                                                             'name': 'App Config Mask, GPIO Low Transition or User AM Exit',
                                                             'offset': 0,
                                                             'bit length': 8})

        AppCfgMaskLow.setReportDict(acMaskReportDict)
        self.addChild(AppCfgMaskLow)

        AppCfgMaskHigh = register_class.cDictDMTerminator(self.register,
                                                          {
                                                              'name': 'App Config Mask, GPIO High Transition or User AM Enter',
                                                              'offset': 8,
                                                              'bit length': 8})

        AppCfgMaskHigh.setReportDict(acMaskReportDict)
        self.addChild(AppCfgMaskHigh)

        cmdOnlyChannel = register_class.cListDMTerminator(self.register,
                                                          {'name': 'Command Channel to use for Command (not Task) Slot',
                                                           'offset': 16,
                                                           'bit length': 2})

        cmdOnlyChannel.setMaxValue(2)
        cmdOnlyChannel.setReportList(['CMD1 (0x08)', 'CMD2 (0x09)', 'CMD3 (0x1E)'])

        self.addChild(cmdOnlyChannel)

        cmdTaskChannel = register_class.cListDMTerminator(self.register,
                                                          {'name': 'Command Channel to use for Command or Task Slot',
                                                           'offset': 24,
                                                           'bit length': 2})

        cmdTaskChannel.setMaxValue(2)
        cmdTaskChannel.setReportList(['CMD1 (0x08)', 'CMD2 (0x09)', 'CMD3 (0x1E)'])

        self.addChild(cmdTaskChannel)

        AMEntryGPIOHighCmd = register_class.cDictDMTerminator(self.register,
                                                              {
                                                                  'name': 'Alt Mode Entry / GPIO High 4CC Command (not Task)',
                                                                  'offset': 32,
                                                                  'bit length': 32})

        AMEntryGPIOHighCmd.setReportDict(cmdReportDict)

        self.addChild(AMEntryGPIOHighCmd)

        AMEntryGPIOHighCmdTsk = register_class.cDictDMTerminator(self.register,
                                                                 {
                                                                     'name': 'Alt Mode Entry / GPIO High 4CC Command or Task',
                                                                     'offset': 64,
                                                                     'bit length': 32})

        AMEntryGPIOHighCmdTsk.setReportDict(cmdTaskReportDict)

        self.addChild(AMEntryGPIOHighCmdTsk)

        AMEntryGPIOLowCmd = register_class.cDictDMTerminator(self.register,
                                                             {'name': 'Alt Mode Exit / GPIO Low 4CC Command (not Task)',
                                                              'offset': 96,
                                                              'bit length': 32})

        AMEntryGPIOLowCmd.setReportDict(cmdReportDict)

        self.addChild(AMEntryGPIOLowCmd)

        AMExitGPIOLowCmdTsk = register_class.cDictDMTerminator(self.register,
                                                               {'name': 'Alt Mode Exit / GPIO Low 4CC Command or Task',
                                                                'offset': 128,
                                                                'bit length': 32})

        AMExitGPIOLowCmdTsk.setReportDict(cmdTaskReportDict)

        self.addChild(AMExitGPIOLowCmdTsk)





class cUserAMModeSettings(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        audEntryEnable = register_class.cBooleanDMTerminator(self.register,
                                                             {'name': 'User VID Mode Autoentry Enabled',
                                                              'offset': 0,
                                                              'bit length': 1})

        audEntryEnable.help = """When a user configures an Alternate Mode with a specific Vendor ID, enabling this bit will allow that mode to be automatically entered."""
        self.addChild(audEntryEnable)


class cDPStatus(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        DUConn_List = ['Neither DFP_D or UFP_D connected', 'DFP_D is connected', 'UFP_D is connected',
                       'Both DFP_D and UFP_D are connected']
        PowerLow_List = ['Adapter is functioning normally or disabled',
                         'Adapter has detected low power and DP is disabled']
        DPDisabledEnabled_List = ['DP functionality is Disabled', 'DP functionality is enabled']
        MFPref_List = ['No Preference for Multi-function', 'Multi-function preferred']
        USBConf_List = ['Maintain current configuration', 'Request switch to USB Configuration']
        DPExit_List = ['Maintain current mode', 'Request exit from DisplayPort Mode']
        HPDState_List = ['HPD_Low', 'HPD_High']
        IRQHPD_List = ['No IRQ_HPD since last status', 'IRQ_HPD']

        dDuDconn = register_class.cListDMTerminator(self.register,
                                                    {'name': 'Connection Status',
                                                     'offset': 0,
                                                     'bit length': 2})

        dDuDconn.setReportList(DUConn_List)
        self.addChild(dDuDconn)

        powLow = register_class.cListDMTerminator(self.register,
                                                  {'name': 'Power Low',
                                                   'offset': 2,
                                                   'bit length': 1})

        powLow.setReportList(PowerLow_List)
        self.addChild(powLow)

        enabled = register_class.cListDMTerminator(self.register,
                                                   {'name': 'Enabled',
                                                    'offset': 3,
                                                    'bit length': 1})

        enabled.setReportList(DPDisabledEnabled_List)
        self.addChild(enabled)

        mfp = register_class.cListDMTerminator(self.register,
                                               {'name': 'Multi-function Preferred',
                                                'offset': 4,
                                                'bit length': 1})

        mfp.setReportList(MFPref_List)
        self.addChild(mfp)

        usbConf = register_class.cListDMTerminator(self.register,
                                                   {'name': 'USB Configuration Request',
                                                    'offset': 5,
                                                    'bit length': 1})

        usbConf.setReportList(USBConf_List)
        self.addChild(usbConf)

        exitDP = register_class.cListDMTerminator(self.register,
                                                  {'name': 'Exit DisplayPort Mode Request',
                                                   'offset': 6,
                                                   'bit length': 1})

        exitDP.setReportList(DPExit_List)
        self.addChild(exitDP)

        hpdState = register_class.cListDMTerminator(self.register,
                                                    {'name': 'HPD State',
                                                     'offset': 7,
                                                     'bit length': 1})

        hpdState.setReportList(HPDState_List)
        self.addChild(hpdState)

        hpdState = register_class.cListDMTerminator(self.register,
                                                    {'name': 'IRQ HPD',
                                                     'offset': 8,
                                                     'bit length': 1})

        hpdState.setReportList(IRQHPD_List)
        self.addChild(hpdState)

        reserved = register_class.cForceSetDMTerminator(self.register, {'name': "reserved",
                                                                        'offset': 9,
                                                                        'bit length': 23,
                                                                        'force value': int(0),
                                                                        'force display': 'reserved'})

        reserved.setFromInt(0)
        reserved.hide()
        self.addChild(reserved)


class cDPConfig(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        portCap = register_class.cListDMTerminator(self.register,
                                                   {'name': 'Select Configuration',
                                                    'offset': 0,
                                                    'bit length': 2})

        portCap.help = """DP Port Capability00b = Reserved01b = UFP_D-capable (including Branch device)10b = DFP_D-capable (including Branch device)11b = Both DFP_D and UFP_D-capable"""
        portCap.setReportList(['Set configuration for USB', 'Set configuration for UFP_U as DFP_D',
                               'Set configuration for UFP_U as UFP_D', 'Reserved'])

        self.addChild(portCap)

        dpSignalling = register_class.cBooleanDMTerminator(self.register,
                                                           {'name': 'Supports DP v1.3 signalling',
                                                            'offset': 2,
                                                            'bit length': 1})

        self.addChild(dpSignalling)

        usbSignalling = register_class.cBooleanDMTerminator(self.register,
                                                            {'name': 'Supports USB Gen 2 signalling',
                                                             'offset': 3,
                                                             'bit length': 1})

        self.addChild(usbSignalling)

        dfpdpins = register_class.cMultiBooleanDMTerminator(self.register,
                                                            {'name': 'DFPD Receptacle or UFPD Plug Pin Assignment',
                                                             'offset': 8,
                                                             'bit length': 8})
        dfpdpins.help = """Each bit corresponds to an allowed pin assignment. Multiple pin assignments may be allowed.00000000b = DFP pin assignments are not supported.xxxxxxx1b = Pin assignment A is supportedxxxxxx1xb = Pin assignment B is supportedxxxxx1xxb = Pin assignment C is supportedxxxx1xxxb = Pin assignment D is supportedxxx1xxxxb = Pin assignment E is supportedxx1xxxxxb = Pin assignment F is supportedx1xxxxxxb = Reserved1xxxxxxxb = Reserved"""
        dfpdpins.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dfpdpins.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dfpdpins.setSpacing(6)
        self.addChild(dfpdpins)

        ufpdpins = register_class.cMultiBooleanDMTerminator(self.register,
                                                            {'name': 'UFPD Receptacle or DFPD Plug Pin Assignment',
                                                             'offset': 16,
                                                             'bit length': 8})
        ufpdpins.help = """Each bit corresponds to an allowed pin assignment. Multiple pin assignments may be allowed.00000000b = UFP pin assignments are not supported.xxxxxxx1b = Pin assignment A is supportedxxxxxx1xb = Pin assignment B is supportedxxxxx1xxb = Pin assignment C is supportedxxxx1xxxb = Pin assignment D is supportedxxx1xxxxb = Pin assignment E is supportedxx1xxxxxb = Reservedx1xxxxxxb = Reserved1xxxxxxxb = Reserved"""
        ufpdpins.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        ufpdpins.setFlagMask([1, 1, 1, 1, 1, 0, 0, 0])
        ufpdpins.setSpacing(6)
        self.addChild(ufpdpins)

        reserved = register_class.cForceSetDMTerminator(self.register, {'name': "reserved",
                                                                        'offset': 24,
                                                                        'bit length': 8,
                                                                        'force value': int(0),
                                                                        'force display': 'reserved'})

        reserved.setFromInt(0)
        reserved.hide()
        self.addChild(reserved)


class cDPMode(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        portCap = register_class.cListDMTerminator(self.register,
                                                   {'name': 'Port Capability',
                                                    'offset': 0,
                                                    'bit length': 2})

        portCap.help = """DP Port Capability00b = Reserved01b = UFP_D-capable (including Branch device)10b = DFP_D-capable (including Branch device)11b = Both DFP_D and UFP_D-capable"""
        portCap.setReportList(['Reserved', 'UFP_D capable', 'DFP_D capable', 'Both UFP_d and DFP_D capable'])

        self.addChild(portCap)

        dpSignalling = register_class.cBooleanDMTerminator(self.register,
                                                           {'name': 'Supports DP v1.3 signalling',
                                                            'offset': 2,
                                                            'bit length': 1})

        self.addChild(dpSignalling)

        usbSignalling = register_class.cBooleanDMTerminator(self.register,
                                                            {'name': 'Supports USB Gen 2 signalling',
                                                             'offset': 3,
                                                             'bit length': 1})

        self.addChild(usbSignalling)

        dfpdpins = register_class.cMultiBooleanDMTerminator(self.register,
                                                            {'name': 'DFPD Receptacle or UFPD Plug Pin Assignment',
                                                             'offset': 8,
                                                             'bit length': 8})
        dfpdpins.help = """Each bit corresponds to an allowed pin assignment. Multiple pin assignments may be allowed.00000000b = DFP pin assignments are not supported.xxxxxxx1b = Pin assignment A is supportedxxxxxx1xb = Pin assignment B is supportedxxxxx1xxb = Pin assignment C is supportedxxxx1xxxb = Pin assignment D is supportedxxx1xxxxb = Pin assignment E is supportedxx1xxxxxb = Pin assignment F is supportedx1xxxxxxb = Reserved1xxxxxxxb = Reserved"""
        dfpdpins.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dfpdpins.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dfpdpins.setSpacing(6)
        self.addChild(dfpdpins)

        ufpdpins = register_class.cMultiBooleanDMTerminator(self.register,
                                                            {'name': 'UFPD Receptacle or DFPD Plug Pin Assignment',
                                                             'offset': 16,
                                                             'bit length': 8})
        ufpdpins.help = """Each bit corresponds to an allowed pin assignment. Multiple pin assignments may be allowed.00000000b = UFP pin assignments are not supported.xxxxxxx1b = Pin assignment A is supportedxxxxxx1xb = Pin assignment B is supportedxxxxx1xxb = Pin assignment C is supportedxxxx1xxxb = Pin assignment D is supportedxxx1xxxxb = Pin assignment E is supportedxx1xxxxxb = Reservedx1xxxxxxb = Reserved1xxxxxxxb = Reserved"""
        ufpdpins.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        ufpdpins.setFlagMask([1, 1, 1, 1, 1, 0, 0, 0])
        ufpdpins.setSpacing(6)
        self.addChild(ufpdpins)

        reserved = register_class.cForceSetDMTerminator(self.register, {'name': "reserved",
                                                                        'offset': 24,
                                                                        'bit length': 8,
                                                                        'force value': int(0),
                                                                        'force display': 'reserved'})

        reserved.setFromInt(0)
        reserved.hide()
        self.addChild(reserved)


class cDMUnstructuredVDO0(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        payload = register_class.cHexDMTerminator(self.register,
                                                  {'name': 'Payload',
                                                   'offset': 0,
                                                   'bit length': 15})

        self.addChild(payload)

        structType = register_class.cListDMTerminator(self.register,
                                                      {'name': 'Type',
                                                       'offset': 15,
                                                       'bit length': 1})
        structType.setReportList(['Unstructured',
                                  'Structured'])

        self.addChild(structType)

        SVID = register_class.cHexDMTerminator(self.register,
                                               {'name': 'SVID',
                                                'offset': 16,
                                                'bit length': 16})

        self.addChild(SVID)


class cDMStructuredVDO0(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        cmd = register_class.cListDMTerminator(self.register,
                                               {'name': 'Command',
                                                'offset': 0,
                                                'bit length': 5})
        cmd.setReportList(['Reserved (0x0)',
                           'Discover Identity',
                           'Discover SVIDs',
                           'Discover Modes',
                           'Enter Mode',
                           'Exit Mode',
                           'Attention',
                           'Reserved (0x7)',
                           'Reserved (0x8)',
                           'Reserved (0x9)',
                           'Reserved (0xA)',
                           'Reserved (0xB)',
                           'Reserved (0xC)',
                           'Reserved (0xD)',
                           'Reserved (0xE)',
                           'Reserved (0xF)',
                           'Status Update',
                           'Config',
                           'Send Data Msg',
                           'Msg Received',
                           'Send PDIO Status',
                           'Rx PDIO Status',
                           'Reserved (0x16)',
                           'Reserved (0x17)',
                           'Reserved (0x18)',
                           'Reserved (0x19)',
                           'Reserved (0x1A)',
                           'Reserved (0x1B)',
                           'Cable Disconnect or Hard Reset',
                           'Early Enter Mode',
                           'Mode Etnered',
                           'Config Complete'])

        self.addChild(cmd)

        cmdType = register_class.cListDMTerminator(self.register,
                                                   {'name': 'Command Type',
                                                    'offset': 6,
                                                    'bit length': 2})
        cmdType.setReportList(['Initiator',
                               'Responder ACK',
                               'Responder NACK',
                               'Responder Busy'])

        self.addChild(cmdType)

        objPosn = register_class.cDecimalDMTerminator(self.register,
                                                      {'name': 'Object Position',
                                                       'offset': 8,
                                                       'bit length': 3})

        self.addChild(objPosn)

        vdmVers = register_class.cDecimalDMTerminator(self.register,
                                                      {'name': 'VDM Version',
                                                       'offset': 13,
                                                       'bit length': 2})
        self.addChild(vdmVers)

        structType = register_class.cListDMTerminator(self.register,
                                                      {'name': 'Type',
                                                       'offset': 15,
                                                       'bit length': 1})
        structType.setReportList(['Unstructured',
                                  'Structured'])

        self.addChild(structType)

        SVID = register_class.cHexDMTerminator(self.register,
                                               {'name': 'SVID',
                                                'offset': 16,
                                                'bit length': 16})

        self.addChild(SVID)


class cDMAnyFirstVDO(register_class.cDataModelArray):
    # differentiates between structured and unstructured VDO 0 and interprets accordingly
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        self.structuredOverlay = cDMStructuredVDO0(register, self.tier, iDict)
        self.unstructuredOverlay = cDMUnstructuredVDO0(register, self.tier, iDict)

        # self.dataModelChildrenArray must contain the children in all three of the overlays
        self.dataModelChildrenArray = []
        self.dataModelChildrenArray.extend(self.structuredOverlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.unstructuredOverlay.dataModelChildrenArray)

        self.dataModelGenerator = self.AnyVdoArrayDMGenerator

    def hide(self):
        self.structuredOverlay.hide()
        self.unstructuredOverlay.hide()

    def unhide(self):
        self.structuredOverlay.unhide()
        self.unstructuredOverlay.unhide()

    def AnyVdoArrayDMGenerator(self):
        self.structuredOverlay.parent = self.parent
        self.unstructuredOverlay.parent = self.parent

        type = self.structuredOverlay.getChildByName('Type').valueToInt()

        if type == 0:
            return self.unstructuredOverlay.childrenAsListDMGenerator()
        else:
            return self.structuredOverlay.childrenAsListDMGenerator()


class cAltModeQueueRecord(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        svid = register_class.cHexDMTerminator(self.register,
                                               {'name': 'SVID (Standard or Vendor ID)',
                                                'offset': 0,
                                                'bit length': 16})

        svid.help = """The Standard or Vendor Defined ID of the Alternate Mode."""
        self.addChild(svid)

        objpos = register_class.cHexDMTerminator(self.register,
                                                 {'name': 'Mode Position',
                                                  'offset': 16,
                                                  'bit length': 8})

        objpos.help = """The position of the Alternate Mode in the entry queue."""
        self.addChild(objpos)

        limentry = register_class.cBooleanDMTerminator(self.register,
                                                       {'name': 'Limited Entry',
                                                        'offset': 24,
                                                        'bit length': 1})
        limentry.help = """When set and GlobalSystemConfig.MultiPortAMpolicy = 01b, entry to this mode is possible if no \
							other port has currently entered this mode, else is a do not care. """
        self.addChild(limentry)

class cDMSourcePdo1Array(register_class.cDataModelArray):
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        if ('Is Receive' in iDict) and (iDict['Is Receive'] == True):
            isReceive = True
        else:
            isReceive = False

        self.addChild(cPDOCurrentField(self.register, {'name': 'Maximum Current',
                                                       'offset': 0,
                                                       'bit length': 10}))

        fvDisplayWidget = cPDOVoltageField(self.register, {'name': 'Voltage',
                                                           'offset': 10,
                                                           'bit length': 10})

        fixedVoltage = register_class.cForceSetDMTerminator(self.register, {'name': 'Voltage',
                                                                            'offset': 10,
                                                                            'bit length': 10,
                                                                            'force value': int(100),
                                                                            'force display': '5 V',
                                                                            'display widget': fvDisplayWidget})

        fixedVoltage.help = """Source PDO1 voltage will always be set to 5V to follow PD Spec."""
        self.addChild(fixedVoltage)
        fixedVoltage.setFromInt(100)

        PeakCurrent = register_class.cListDMTerminator(self.register, {'name': 'Peak Current',
                                                                       'offset': 20,
                                                                       'bit length': 2})

        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        PeakCurrent.help = """Set the percentage that the Source current can peak over the max before an OCP event occurs."""
        self.addChild(PeakCurrent)

        reserved = register_class.cForceSetDMTerminator(self.register, {'name': "reserved",
                                                                        'offset': 22,
                                                                        'bit length': 2,
                                                                        'force value': int(0),
                                                                        'force display': 'reserved, set 0'})

        reserved.setFromInt(0)
        reserved.hide()
        self.addChild(reserved)

        # Dual Role and Externally Powered are overwritten by firmware, so avoid confusion by not listing in GUI

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'Unchunked Extended Msg Supported',
                                                                          'offset': 24,
                                                                          'bit length': 1}))

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'USB Capable',
                                                                          'offset': 26,
                                                                          'bit length': 1}))

        self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'USB Suspend Supported',
                                                                          'offset': 28,
                                                                          'bit length': 1}))

        if ('Is Receive' in iDict) and (iDict['Is Receive'] == True):
            self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'Dual Role Data',
                                                                              'offset': 25,
                                                                              'bit length': 1}))

            self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'Externally Powered',
                                                                              'offset': 27,
                                                                              'bit length': 1}))

            self.addChild(register_class.cBooleanDMTerminator(self.register, {'name': 'Dual Role Power',
                                                                              'offset': 29,
                                                                              'bit length': 1}))

        supplyType = register_class.cListDMTerminator(self.register, {'name': 'Supply Type',
                                                                      'offset': 30,
                                                                      'bit length': 2})
        supplyType.help = """Select what type of supply will source this PDO."""
        supplyType.setReportList(['Fixed Source', 'Battery Source', 'Variable Source'])
        supplyType.addUpdateRegisterByName("self")
        supplyType.setMaxValue(2)

        fixedSupplyType = register_class.cForceSetDMTerminator(self.register, {'name': 'Supply Type',
                                                                               'offset': 30,
                                                                               'bit length': 2,
                                                                               'force value': int(0),
                                                                               'force display': 'Fixed Source',
                                                                               'display widget': supplyType})

        fixedSupplyType.help = """Supply Type for PDO0 may be Fixed, Battery, or Voltage and is compliant with the USB-PD specification."""
        self.addChild(fixedSupplyType)
        fixedSupplyType.setFromInt(0)

    def maxPower(self):
        # 10 mA steps
        current = self.getChildByName('Maximum Current').valueToInt()
        # 50 mV steps
        voltage = self.getChildByName('Voltage').valueToInt()
        # 0.01 * 0.05 = .0005 Watts
        power = current * voltage * 0.0005

        return power

class cDMAnySourcePdoArray(register_class.cDataModelArray):
    # TODO : This is a common need. Build an extender class that takes an arbitrary data model in init and adds the
    #        prepend and append capability.
    def __init__(self, register, tier, iDict):
        register_class.cDataModelArray.__init__(self, register, tier, iDict)

        self.prependChildrenArray = []
        self.appendChildrenArray = []

        self.fixedOverlay = cDMFixedSourcePdoArray(register, self.tier, iDict)
        self.variableOverlay = cDMVariableSourcePdoArray(register, self.tier, iDict)
        self.batteryOverlay = cDMBatterySourcePdoArray(register, self.tier, iDict)

        # self.dataModelChildrenArray must contain the children in all three of the overlays
        self.dataModelChildrenArray = []
        self.dataModelChildrenArray.extend(self.fixedOverlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.variableOverlay.dataModelChildrenArray)
        self.dataModelChildrenArray.extend(self.batteryOverlay.dataModelChildrenArray)

        self.dataModelGenerator = self.AnyPdoArrayDMGenerator

    def findDependentRegisters(self):
        # only update forcevals in current overlay
        type = self.fixedOverlay.getChildByName('Supply Type').valueToInt()
        if type == 0:
            return self.fixedOverlay.findDependentRegisters()

        elif type == 1:
            return self.variableOverlay.findDependentRegisters()

        elif type == 2:
            return self.batteryOverlay.findDependentRegisters()

    def updateForceVal(self):
        # todo: should make a set parent call instead of allowing to be set directly
        #       then the objects can correctly set sub-object parent relationships
        self.fixedOverlay.parent = self.parent
        self.variableOverlay.parent = self.parent
        self.batteryOverlay.parent = self.parent

        # only update forcevals in current overlay
        type = self.fixedOverlay.getChildByName('Supply Type').valueToInt()
        if type == 0:
            self.fixedOverlay.updateForceVal()

        elif type == 1:
            self.variableOverlay.updateForceVal()

        elif type == 2:
            self.batteryOverlay.updateForceVal()

    def maxPower(self):
        power = 0.0
        type = self.fixedOverlay.getChildByName('Supply Type').valueToInt()
        if type == 0:
            # 10 mA steps
            current = self.fixedOverlay.getChildByName('Maximum Current').valueToInt()
            # 50 mV steps
            voltage = self.fixedOverlay.getChildByName('Voltage').valueToInt()
            # 0.01 * 0.05 = .0005 Watts
            power = current * voltage * 0.0005

        if type == 1:
            # 10 mA steps
            current = self.variableOverlay.getChildByName('Maximum Current').valueToInt()
            # 50 mV steps
            voltage = self.variableOverlay.getChildByName('Maximum Voltage').valueToInt()
            # 0.01 * 0.05 = .0005 Watts
            power = current * voltage * 0.0005

        if type == 2:
            # reported in 250 mW steps
            power = self.batteryOverlay.getChildByName('Maximum Power').valueToInt() * 0.25

        return power

    def prependChild(self, child):
        self.prependChildrenArray[:0] = [child, ]
        # it is okay to append to the dataModelChildrenArray because it is not directly used in the
        #    data model generator.
        self.dataModelChildrenArray.append(child)

    def addChild(self, child):
        child.parent = self
        self.appendChildrenArray.append(child)
        self.dataModelChildrenArray.append(child)

    # return the first child with a matching name or none if no match
    def getChildByName(self, name):
        for child in self.prependChildrenArray:
            if child.name == name:
                return child

        for child in self.appendChildrenArray:
            if child.name == name:
                return child

        type = self.fixedOverlay.getChildByName('Supply Type').valueToInt()
        if type == 0:
            for child in self.fixedOverlay:
                if child.name == name:
                    return child
        elif type == 1:
            for child in self.variableOverlay:
                if child.name == name:
                    return child
        elif type == 2:
            for child in self.batteryOverlay:
                if child.name == name:
                    return child

        return None

    def AnyPdoArrayDMGenerator(self):
        # todo: should make a set parent call instead of allowing to be set directly
        #       then the objects can correctly set sub-object parent relationships
        self.fixedOverlay.parent = self.parent
        self.variableOverlay.parent = self.parent
        self.batteryOverlay.parent = self.parent

        type = self.fixedOverlay.getChildByName('Supply Type').valueToInt()
        retDict = {'name': self.name, 'grouping tier': self.tier, 'show': self.show, 'data model list': []}
        if type == 0:
            for child in self.prependChildrenArray:
                if isinstance(child, dict):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
            retDict['data model list'].extend(self.fixedOverlay.dataModelGenerator()['data model list'])
            for child in self.appendChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
        elif type == 1:
            for child in self.prependChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
            retDict['data model list'].extend(self.batteryOverlay.dataModelGenerator()['data model list'])
            for child in self.appendChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
        elif type == 2:
            for child in self.prependChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
            retDict['data model list'].extend(self.variableOverlay.dataModelGenerator()['data model list'])
            for child in self.appendChildrenArray:
                if isinstance(child, list):
                    retDict['data model list'].extend(child.dataModelGenerator()['data model list'])
                else:
                    retDict['data model list'].append(child.dataModelGenerator())
        else:
            # invalid setting
            # TODO: improve error handling
            retDict['data model list'] = []

        return retDict


# ==========================================================================
# END - Helper classes that generate data models
# ==========================================================================

# ==========================================================================
# Helper functions
# ==========================================================================


def VDMs_inargs_TopLevelDMGenerator(self):
    # display pdos based on numPdo
    # not a method, but should be grouped with txSrcCap class
    numVdo = self.getChildByName('Number of 32-bit VDM Objects').valueToInt()

    for i in range(7):
        if i < numVdo:
            self.getChildByName('VDO %d Payload (32-bit)' % (i + 1)).unhide()
        else:
            self.getChildByName('VDO %d Payload (32-bit)' % (i + 1)).hide()

    return self.childrenAsListDMGenerator()


def UCSI_outargs_TopLevelDMGenerator(self):
    cmd = self.register.currentCommand

    if cmd not in ucsiCommand_dict:
        pass
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_CONNECTOR_RESET':
        return self.CONNECTOR_RESET_output_overlay.dataModelGenerator()
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CAPABILITY':
        return self.GET_CAPABILITY_output_overlay.dataModelGenerator()
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CONNECTOR_CAPABILITY':
        return self.GET_CONNECTOR_CAPABILITY_output_overlay.dataModelGenerator()
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_SET_UOR':
        return self.SET_UOR_output_overlay.dataModelGenerator()
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_SET_PDR':
        return self.SET_PDR_output_overlay.dataModelGenerator()
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_ALTERNATE_MODES':
        return self.GET_ALTERNATE_MODES_output_overlay.dataModelGenerator()
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CAM_SUPPORTED':
        return self.GET_CAM_SUPPORTED_output_overlay.dataModelGenerator()
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_PDOS':
        return self.GET_PDOS_output_overlay.dataModelGenerator()
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_CONNECTOR_STATUS':
        return self.GET_CONNECTOR_STATUS_input_overlay.dataModelGenerator()
    elif ucsiCommand_dict[cmd] == 'UCSI_CMDS_GET_ERROR_STATUS':
        return self.GET_ERROR_STATUS_input_overlay.dataModelGenerator()

    return self.CONNECTOR_RESET_output_overlay.dataModelGenerator()


def RxIDO_TopLevelDMGenerator(self):
    # display pdos based on numPdo
    # not a method, but should be grouped with txSrcCap class
    numUfpIDO = self.getChildByName('VDO configuration').getChildByName('Number of valid VDOs').valueToInt()

    for i in range(6):
        if i < numUfpIDO:
            self.getChildByName('Received VDO').dataModelChildrenArray[i].unhide()
        else:
            self.getChildByName('Received VDO').dataModelChildrenArray[i].hide()

    return self.childrenAsListDMGenerator()


def PDPDerivedFxn(argsList):
    # 8 arguments
    # argsList[0] = number of PDOs
    # argsList[1] = PDO1
    # argsList[7] = PDO7
    maxPower = 0
    for i in range(argsList[0].valueToInt()):
        if (argsList[i + 1].maxPower() > maxPower):
            maxPower = argsList[i + 1].maxPower()

    # maxPower in watts
    # this field also in watts, but needs to be integer type
    return long(maxPower)



def TxSrcCap_TopLevelDMGenerator(self):
    # display pdos based on numPdo
    # not a method, but should be grouped with txSrcCap class
    numSrcPdo = self.getChildByName('Number of Source PDOs').valueToInt()

    for i in range(7):
        if i < numSrcPdo:
            self.getChildByName('Source PDO %d' % (i + 1)).unhide()
        else:
            self.getChildByName('Source PDO %d' % (i + 1)).hide()

    return self.childrenAsListDMGenerator()

def RxIDO_SOPPrime_TopLevelDMGenerator(self):
    # display pdos based on numPdo
    # not a method, but should be grouped with txSrcCap class
    numTPIDO = self.getChildByName('Record Counts').getChildByName("Number of Received Identity Objects").valueToInt()

    if numTPIDO > 0:
        self.getChildByName("Received SOP Prime Discover Identity Response").unhide()
    else:
        self.getChildByName("Received SOP Prime Discover Identity Response").hide()

    return self.childrenAsListDMGenerator()


def TxSinkCap_TopLevelDMGenerator(self):
    numSinkPdo = self.getChildByName('Sink PDO Count').getChildByName('Number of Sink PDOs').valueToInt()

    for i in range(7):
        if i < numSinkPdo:
            self.getChildByName('Sink PDO %d' % (i + 1)).unhide()
        else:
            self.getChildByName('Sink PDO %d' % (i + 1)).hide()

    return self.childrenAsListDMGenerator()


def RxSrcCap_TopLevelDMGenerator(self):
    # display pdos based on numPdo
    # not a method, but should be grouped with txSrcCap class
    numSrcPdo = self.getChildByName('Number of Source PDOs').valueToInt()
    retDict = {'name': self.name, 'grouping tier': self.tier, 'data model list': []}
    retDict['data model list'].append(self.getChildByName('Number of Source PDOs').dataModelGenerator())
    for i in range(numSrcPdo):
        retDict['data model list'].append(self.getChildByName('Source PDO %d' % (i + 1)).dataModelGenerator())

    return retDict


def TxIDO_TopLevelDMGenerator(self):
    numUfpIDO = self.getChildByName('Number of valid PDOs in register').getChildByName(
        'Number of Identity Objects').valueToInt()

    for i in range(6):
        if i < numUfpIDO:
            self.getChildByName('Discover Identity Response').dataModelChildrenArray[i].unhide()
        else:
            self.getChildByName('Discover Identity Response').dataModelChildrenArray[i].hide()

    if numUfpIDO > 0:
        self.getChildByName('Discover Identity Response').unhide()
    else:
        self.getChildByName('Discover Identity Response').hide()

    return self.childrenAsListDMGenerator()


def cRxVdm_TopLevelDMGenerator(self):
    numVdo = self.getChildByName('RX VDM Status').getChildByName('Number of Valid VDOs').valueToInt()

    for i in range(7):
        if i < numVdo:
            self.getChildByName('Data Objects Received').dataModelChildrenArray[i].unhide()
        else:
            self.getChildByName('Data Objects Received').dataModelChildrenArray[i].hide()

    if numVdo == 0:
        self.getChildByName('Data Objects Received').hide()
    else:
        self.getChildByName('Data Objects Received').unhide()

    return self.childrenAsListDMGenerator()


def cRxAttention_TopLevelDMGenerator(self):
    numVdo = self.getChildByName('RX Attention Status').getChildByName('Number of Valid VDOs').valueToInt()

    for i in range(7):
        if i < numVdo:
            self.getChildByName('Data Objects Received').dataModelChildrenArray[i].unhide()
        else:
            self.getChildByName('Data Objects Received').dataModelChildrenArray[i].hide()

    if numVdo == 0:
        self.getChildByName('Data Objects Received').hide()
    else:
        self.getChildByName('Data Objects Received').unhide()

    return self.childrenAsListDMGenerator()


def RxSinkCap_TopLevelDMGenerator(self):
    numSrcPdo = self.getChildByName('Number of Sink PDOs').valueToInt()
    retDict = {'name': self.name, 'grouping tier': self.tier, 'data model list': []}
    retDict['data model list'].append(self.getChildByName('Number of Sink PDOs').dataModelGenerator())
    for i in range(numSrcPdo):
        retDict['data model list'].append(self.getChildByName('Sink PDO %d' % (i + 1)).dataModelGenerator())

    return retDict


# ==========================================================================
# END - Helper functions
# ==========================================================================


# ==========================================================================
# MANUAL - Helper functions Needed by template automation
# ==========================================================================

def outputenable_set_from_int(self, listNum):
    if not self.parent.MultiplexingType:
        # Set Output Enable based on event type
        if self.parent.EventCategory == 'output':
            self.privateSetFromInt(1)
        else:
            self.privateSetFromInt(0)
    else:
        # Set Output Enable based on MultiplexingType
        if self.parent.MultiplexingType == 1:
            # Multiplexed to ADC
            self.privateSetFromInt(0)
        else:
            # Multiplexed to HPD, SWD, D+/D-, or I2C IRQ, so check EventCategory
            if self.parent.EventCategory == 'input':
                self.privateSetFromInt(0)
            else:
                self.privateSetFromInt(0)
    
def mappintogpiooralternatefunction_set_from_int(self, listNum):
    # Set event category based on alt function type
    if listNum != 0 and self.parent.name in map(itemgetter('pin'), GPIOMuxDictList):
        index = map(itemgetter('pin'), GPIOMuxDictList).index(self.parent.name)
        self.parent.EventCategory = GPIOMuxDictList[index]['inout']
        self.parent.MultiplexingType = 2    # Multiplexed to HPD, SWD, or I2C IRQ
    elif listNum != 0:
        self.parent.MultiplexingType = 1    # Multiplexed to ADC
    else:
        self.parent.MultiplexingType = 0    # Not multiplexed
    
    # Reset Output Enable to refresh logic
    self.parent.getChildByName('Output Enable').setFromInt(0)
    
    # Reset own value
    self.privateSetFromInt(listNum)
    
def gpiomappedevent_set_from_int(self, listNum):
    # Only update event category and output enable if in GPIO mode (where GPIO controls the event category)
    # Otherwise, pin is in alt mode and alt should control the event category
    if self.parent.getChildByName("Multiplexing for " + self.parent.name + " Pin").valueToInt() != 0:
        return
    
    # Get setValue and determine event category
    if listNum == 0:
        self.parent.EventCategory = 'neither'
        setValue = 0
    elif listNum == -1:
        self.parent.EventCategory = 'output'
        setValue = 0
    elif listNum == -2:
        self.parent.EventCategory = 'neither'
        setValue = 0
    else:
        print "Reset EC: " + str(self.GPIOEventDictList[listNum]['inout'])
        self.parent.EventCategory = self.GPIOEventDictList[listNum]['inout']
        setValue = listNum

    # Always reset Output Enable to refresh logic
    self.parent.getChildByName('Output Enable').setFromInt(0)
    self.parent.getChildByName('Interrupt Enable').setFromInt(0)
    
    # Reset own value
    self.privateSetFromInt(setValue)

def gpiomappedevent_value_to_int(self):
    # find the match to our GPIO
    # if there is no match and GPIO is enabled, this is -1 mapped without event
    #    if there is no match and GPIO is disabled, this is -2
    # So initialize as such and then search for match
    eventFromSearch = self.privateValueToInt()

    if eventFromSearch == 0:
        if self.parent.getChildByName('Output Enable').valueToInt() == 1:
            eventNum = -1
        else:
            eventNum = -2
    else:
        eventNum = eventFromSearch
        
    # Only update event category and output enable if in GPIO mode (where GPIO controls the event category)
    # Otherwise, pin is in alt mode and alt should control the event category
    if self.parent.getChildByName("Multiplexing for " + self.parent.name + " Pin").valueToInt() == 0:
        # Reset output enable to refresh logic
        self.parent.EventCategory = self.GPIOEventDictList[eventNum]['inout']
        self.parent.getChildByName('Output Enable').setFromInt(0)

    return eventNum

def sourcepdp_derived_function(*arguments) :
    # PDP power calculation
    argsList = arguments[0]
    register = argsList[0].parent.register.device.registerFromName("Tx Source Capabilities Extended Data Block")
    try:
      # get the latest argsList for 0x77 register
      argsList = register.device.getDerivingArgsObjectList(register.dataModel)
    except:
      pass
    numValidPdos = argsList[0].valueToInt()
    pdpPower = 0.0
    maxpower = 0.0
    for i in range(numValidPdos):
        sourcePdo = argsList[i + 1]
        supplyType = sourcePdo.getChildByName('Supply Type')
        supplyTypeString = supplyType.translateIntToHumanReadableString(supplyType.valueToInt())
        if supplyTypeString == "Fixed" :
            current = sourcePdo.getChildByName('Maximum Current')
            voltage = sourcePdo.getChildByName('Voltage')
            unit = current.dictScaleUnits[current.defaultUnit] * voltage.dictScaleUnits[voltage.defaultUnit]
            maxpower = current.valueToInt() * voltage.valueToInt() * unit

        elif supplyTypeString == "Variable" or  supplyTypeString == "Source PPS":
            current = sourcePdo.getChildByName('Maximum Current')
            voltage = sourcePdo.getChildByName('Maximum Voltage')
            unit = current.dictScaleUnits[current.defaultUnit] * voltage.dictScaleUnits[voltage.defaultUnit]
            maxpower = current.valueToInt() * voltage.valueToInt() * unit

        elif supplyTypeString == "Battery" :
            power = sourcePdo.getChildByName('Maximum Power')
            unit = power.dictScaleUnits[power.defaultUnit] 
            maxpower = power.valueToInt() * unit

        elif supplyTypeString == "Source AVS":
            power = sourcePdo.getChildByName('PDP')
            unit = power.dictScaleUnits[power.defaultUnit] 
            maxpower = power.valueToInt() * unit

        pdpPower = max(pdpPower, maxpower)

    return long(pdpPower)

# ==========================================================================
# END - MANUAL - Helper functions Needed by template automation
# ==========================================================================

# ==========================================================================
# MANUAL - Dictionaries
# ==========================================================================

SPDR_task_return_dict = {0x00000000: 'SUCCESS_CMD',
                         0x00000001: 'ABORT_CMD',
                         0x00000003: 'REJECT_CMD',
                         0x4: 'Not in active contract',
                         0x5: 'Not supporting requested role',
                         0x6: 'Unsuccessful Completion of PRS',
                         0x7: 'Rejected by Port Partner',
                         0x8: 'Hard Reset during PRS'}

SUOR_task_return_dict = {0x00000000: 'SUCCESS_CMD',
                         0x00000001: 'ABORT_CMD',
                         0x00000003: 'REJECT_CMD',
                         0x4: 'Not in active contract',
                         0x5: 'Not supporting requested role',
                         0x6: 'Unsuccessful Completion of DRS',
                         0x7: 'Rejected by Port Partner',
                         0x8: 'Hard Reset during DRS'}

ucsiCommand_dict = {
    0x03: 'UCSI_CMDS_CONNECTOR_RESET',
    0x06: 'UCSI_CMDS_GET_CAPABILITY',
    0x07: 'UCSI_CMDS_GET_CONNECTOR_CAPABILITY',
    0x09: 'UCSI_CMDS_SET_UOR',
    0x0B: 'UCSI_CMDS_SET_PDR',
    0x0C: 'UCSI_CMDS_GET_ALTERNATE_MODES',
    0x0D: 'UCSI_CMDS_GET_CAM_SUPPORTED',
    0x10: 'UCSI_CMDS_GET_PDOS',
    0x12: 'UCSI_CMDS_GET_CONNECTOR_STATUS',
    0x13: 'UCSI_CMDS_GET_ERROR_STATUS'
}

task_return_dict = {
    0x00000000: 'SUCCESS_CMD',
    0x00000001: 'ABORT_CMD',
    0x00000003: 'REJECT_CMD'
}

ADCchannelListOfDict = [
    {'Channel': 'Thermal Sensor Temperature', 'Divider Ratio': 1024 / 1.2, 'Unit': 'Raw (1024 LSB scale)'},
    {'Channel': 'VBUS 1 Voltage', 'Divider Ratio': 25, 'Unit': 'V'},
    {'Channel': 'VBUS 2 Voltage', 'Divider Ratio': 25, 'Unit': 'V'},
    {'Channel': 'PP HV1 Voltage', 'Divider Ratio': 25, 'Unit': 'V'},
    {'Channel': 'PP HV2 Voltage', 'Divider Ratio': 25, 'Unit': 'V'},
    {'Channel': 'PP HV1 Current', 'Divider Ratio': 5 / 1.2, 'Unit': 'A'},
    {'Channel': 'PP HV2 Current', 'Divider Ratio': 5 / 1.2, 'Unit': 'A'},
    {'Channel': 'VOUT_3V3 Voltage', 'Divider Ratio': 3, 'Unit': 'V'},
    {'Channel': 'BC1.2 Voltage', 'Divider Ratio': 3, 'Unit': 'V'},
    {'Channel': 'ADC Input Channel 1', 'Divider Ratio': 3, 'Unit': 'V'},
    {'Channel': 'ADC Input Channel 2', 'Divider Ratio': 3, 'Unit': 'V'},
    {'Channel': 'GPIO 2', 'Divider Ratio': 3, 'Unit': 'V'},
    {'Channel': 'GPIO 7', 'Divider Ratio': 3, 'Unit': 'V'},
    {'Channel': 'GPIO 16', 'Divider Ratio': 3, 'Unit': 'V'},
    {'Channel': 'GPIO 17', 'Divider Ratio': 3, 'Unit': 'V'},
    {'Channel': 'Port A CC_1', 'Divider Ratio': 5, 'Unit': 'V'},
    {'Channel': 'Port A CC_2', 'Divider Ratio': 5, 'Unit': 'V'},
    {'Channel': 'Port B CC_1', 'Divider Ratio': 5, 'Unit': 'V'},
    {'Channel': 'Port B CC_2', 'Divider Ratio': 5, 'Unit': 'V'},
    {'Channel': 'Port A VConn', 'Divider Ratio': 5, 'Unit': 'V'},
    {'Channel': 'Port B VConn', 'Divider Ratio': 5, 'Unit': 'V'},
    {'Channel': 'PP_HV1 Temperature', 'Divider Ratio': 1024 / 1.2, 'Unit': 'Raw (1024 LSB scale)'},
    {'Channel': 'PP_HV2 Temperature', 'Divider Ratio': 1024 / 1.2, 'Unit': 'Raw (1024 LSB scale)'},
    {'Channel': 'GPIO 2 (No Scaling)', 'Divider Ratio': 1, 'Unit': 'V'},
]

gpioMuxHardwareMap = { \
    0: "DP HPD, Port 2", \
    1: "DP HPD, Port 1", \
    2: "NONE", \
    3: "NONE", \
    4: "NONE", \
    5: "NONE", \
    6: "SWD_DAT", \
    7: "SWD_CLK", \
    8: "NONE", \
    9: "NONE", \
    10: "I2C1 IRQ", \
    11: "I2C2 IRQ", \
    12: "NONE", \
    }

acMaskReportDict = {0: 'None',
                    1: 'Virtual Address 0',
                    2: 'Virtual Address 1',
                    4: 'Virtual Address 2',
                    8: 'Virtual Address 3',
                    16: 'Virtual Address 4',
                    32: 'Virtual Address 5',
                    64: 'Virtual Address 6',
                    128: 'Virtual Address 7',
                    }


# ==========================================================================
# END - MANUAL - Dictionaries
# ==========================================================================


# ==========================================================================
# MANUAL - 4CC command definitions
# ==========================================================================

def intFrom4CC(value):
    retVal = 0x0
    # little endian. First char takes position 0 of the array
    for (i, char) in enumerate(value):
        retVal |= (ord(char) << (8 * i))

    return retVal


cmdReportDict = {intFrom4CC('!CMD'): '!CMD',
                 intFrom4CC('Gaid'): 'Gaid',
                 intFrom4CC('GAID'): 'GAID',
                 intFrom4CC('ANeg'): 'ANeg',
                 intFrom4CC('CRST'): 'CRST',
                 intFrom4CC('DBfg'): 'DBfg',
                 #                   intFrom4CC('FPWR') : 'FPWR',
                 #                   intFrom4CC('GPIO') : 'GPIO',
                 intFrom4CC('GPoe'): 'GPoe',
                 intFrom4CC('GPie'): 'GPie',
                 intFrom4CC('GPsh'): 'GPsh',
                 intFrom4CC('GPsl'): 'GPsl',
                 intFrom4CC('HRST'): 'HRST',
                 #                   intFrom4CC('LOCK') : 'LOCK',
                 #                   intFrom4CC('MEMr') : 'MEMr',
                 #                   intFrom4CC('MEMw') : 'MEMw',
                 #                   intFrom4CC('PDOf') : 'PDOf',
                 #                   intFrom4CC('PDTx') : 'PDTx',
                 intFrom4CC('SRDY'): 'SRDY',
                 intFrom4CC('SRYR'): 'SRYR',
                 #                   intFrom4CC('VDMs') : 'VDMs'
                 }

cmdTaskReportDict = {intFrom4CC('!CMD'): '!CMD',
                     intFrom4CC('Gaid'): 'Gaid',
                     intFrom4CC('GAID'): 'GAID',
                     #                   intFrom4CC('ABRT') : 'ABRT',
                     intFrom4CC('AMDs'): 'AMDs',
                     intFrom4CC('AMDs'): 'AMEn',
                     intFrom4CC('AMEn'): 'AMEx',
                     intFrom4CC('AMEx'): 'ANeg',
                     #                  intFrom4CC('ASkE') : 'ASkE',
                     intFrom4CC('CRST'): 'CRST',
                     intFrom4CC('DBfg'): 'DBfg',
                     #                   intFrom4CC('FPWR') : 'FPWR',
                     intFrom4CC('GO2M'): 'GO2M',
                     #                   intFrom4CC('GPIO') : 'GPIO',
                     #                   intFrom4CC('GPMp') : 'GPMp',
                     intFrom4CC('GPoe'): 'GPoe',
                     intFrom4CC('GPie'): 'GPie',
                     intFrom4CC('GPsh'): 'GPsh',
                     intFrom4CC('GPsl'): 'GPsl',
                     intFrom4CC('GSkC'): 'GSkC',
                     intFrom4CC('GSrC'): 'GSrC',
                     intFrom4CC('HRST'): 'HRST',
                     #                  intFrom4CC('ISkE') : 'ISkE',
                     #                   intFrom4CC('LOCK') : 'LOCK',
                     #                   intFrom4CC('MDEr') : 'MDEr',
                     #                   intFrom4CC('MDEw') : 'MDEw',
                     #                   intFrom4CC('MEMr') : 'MEMr',
                     #                   intFrom4CC('MEMw') : 'MEMw',
                     #                   intFrom4CC('PDOf') : 'PDOf',
                     #                   intFrom4CC('PDTx') : 'PDTx',
                     intFrom4CC('SRDY'): 'SRDY',
                     intFrom4CC('SRYR'): 'SRYR',
                     intFrom4CC('SSrC'): 'SSrC',
                     intFrom4CC('SWDF'): 'SWDF',
                     intFrom4CC('SWSk'): 'SWSk',
                     intFrom4CC('SWSr'): 'SWSr',
                     intFrom4CC('SWUF'): 'SWUF',
                     intFrom4CC('SWVC'): 'SWVC',
                     #                   intFrom4CC('VDMs') : 'VDMs'
                     }


class cDBfg(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Deadbattery Flag Clear',
                                                 '4cc': 'DBfg',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cABRT(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Abort',
                                                 '4cc': 'ABRT',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGaid(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Warm Reboot',
                                                 '4cc': 'Gaid',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 0})

        self.inargsDataModel = None
        self.outargsDataModel = None


class cGAID(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Cold Reboot',
                                                 '4cc': 'GAID',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 0})

        self.inargsDataModel = None
        self.outargsDataModel = None


class cHRST(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'PD Hard Reset',
                                                 '4cc': 'HRST',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cCRST(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Cable Reset',
                                                 '4cc': 'CRST',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGSkC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Get Sink Capabilities',
                                                 '4cc': 'GSkC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGSrC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Get Source Capabilities',
                                                 '4cc': 'GSrC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cSSrC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Send Source Capabilities',
                                                 '4cc': 'SSrC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cSRDO(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Send Request Data Object',
                                                 '4cc': 'SRDO',
                                                 'inargs byte length': 4,
                                                 'outargs byte length': 1})

        inargsDM = register_class.cDataModelArray(self, 1,
                                                  {'name': 'Input Arguments',
                                                   'offset': 0,
                                                   'bit length': 32})

        mmOpCurr = cPDOCurrentField(self.inargsMiniReg, {'name': 'Max/Min Operating Current or Power',
                                                         'offset': 0,
                                                         'bit length': 10})
        inargsDM.addChild(mmOpCurr)

        opCurr = cPDOCurrentField(self.inargsMiniReg, {'name': 'Operating Current or Power',
                                                       'offset': 10,
                                                       'bit length': 10})
        inargsDM.addChild(opCurr)

        noUSBSusp = register_class.cBooleanDMTerminator(self.inargsMiniReg, {'name': 'No USB Suspend',
                                                                             'offset': 24,
                                                                             'bit length': 1})
        inargsDM.addChild(noUSBSusp)

        USBCommCap = register_class.cBooleanDMTerminator(self.inargsMiniReg, {'name': 'USB Communications Capable',
                                                                              'offset': 25,
                                                                              'bit length': 1})
        inargsDM.addChild(USBCommCap)

        capMismatch = register_class.cBooleanDMTerminator(self.inargsMiniReg, {'name': 'Capability Mismatch',
                                                                               'offset': 26,
                                                                               'bit length': 1})
        inargsDM.addChild(capMismatch)

        giveBack = register_class.cBooleanDMTerminator(self.inargsMiniReg, {'name': 'Give Back Flag',
                                                                            'offset': 27,
                                                                            'bit length': 1})
        inargsDM.addChild(giveBack)

        objPosn = register_class.cDecimalDMTerminator(self.inargsMiniReg, {'name': 'Object Position',
                                                                           'offset': 28,
                                                                           'bit length': 3})
        inargsDM.addChild(objPosn)

        self.setInputModel(inargsDM)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cSWSk(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Swap to Sink',
                                                 '4cc': 'SWSk',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cSWSr(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Swap to Source',
                                                 '4cc': 'SWSr',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cSWDF(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Swap to DFP',
                                                 '4cc': 'SWDF',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cSWUF(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Swap to UFP',
                                                 '4cc': 'SWUF',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cSWVC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Swap VConn Provider',
                                                 '4cc': 'SWVC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cSRDY(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'System Ready to Sink Power',
                                                 '4cc': 'SRDY',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 1})

        inargsDM = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                  {'name': 'Input Arguments',
                                                   'offset': 0,
                                                   'bit length': 8})

        swSel = register_class.cListDMTerminator(self.inargsMiniReg,
                                                 {'name': 'Switch Selection',
                                                  'offset': 0,
                                                  'bit length': 2})
        swSel.setReportList(self.SwitchSelection_list)
        swSel.setMaxValue(len(self.SwitchSelection_list) - 1)
        inargsDM.addChild(swSel)

        self.setInputModel(inargsDM)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)

    SwitchSelection_list = ['PP1', 'PP2', 'PP3', 'PP4']


class cSRYR(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'System Ready Reset',
                                                 '4cc': 'SRYR',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cAMEn(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Enter Alternate Mode',
                                                 '4cc': 'AMEn',
                                                 'inargs byte length': 5,
                                                 'outargs byte length': 1})

        inargsDM = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                  {'name': 'Input Arguments',
                                                   'offset': 0,
                                                   'bit length': 40})

        ModeIndex = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                    {'name': 'modeIndex',
                                                     'offset': 0,
                                                     'bit length': 8})
        inargsDM.addChild(ModeIndex)

        SVID = register_class.cHexDMTerminator(self.inargsMiniReg,
                                               {'name': 'SVID',
                                                'offset': 8,
                                                'bit length': 16})
        inargsDM.addChild(SVID)

        objPosn = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                      {'name': 'Object Position',
                                                       'offset': 24,
                                                       'bit length': 3})
        inargsDM.addChild(objPosn)

        LastModeEx = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                         {'name': 'LastModeExited',
                                                          'offset': 27,
                                                          'bit length': 1})
        inargsDM.addChild(LastModeEx)

        SOPType = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                      {'name': 'SOPType',
                                                       'offset': 30,
                                                       'bit length': 2})
        inargsDM.addChild(SOPType)

        self.setInputModel(inargsDM)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cAMEx(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Exit Alternate Mode',
                                                 '4cc': 'AMEx',
                                                 'inargs byte length': 5,
                                                 'outargs byte length': 1})

        inargsDM = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                  {'name': 'Input Arguments',
                                                   'offset': 0,
                                                   'bit length': 40})

        ModeIndex = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                    {'name': 'modeIndex',
                                                     'offset': 0,
                                                     'bit length': 8})
        inargsDM.addChild(ModeIndex)

        SVID = register_class.cHexDMTerminator(self.inargsMiniReg,
                                               {'name': 'SVID',
                                                'offset': 8,
                                                'bit length': 16})
        inargsDM.addChild(SVID)

        objPosn = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                      {'name': 'Object Position',
                                                       'offset': 24,
                                                       'bit length': 3})
        inargsDM.addChild(objPosn)

        LastModeEx = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                         {'name': 'LastModeExited',
                                                          'offset': 27,
                                                          'bit length': 1})
        inargsDM.addChild(LastModeEx)

        SOPType = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                      {'name': 'SOPType',
                                                       'offset': 30,
                                                       'bit length': 2})
        inargsDM.addChild(SOPType)

        self.setInputModel(inargsDM)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGPPI(function_class.cFunction) :
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name' : 'PD Get Port Partner Information',
                                                 '4cc' : 'GPPI',
                                                 'inargs byte length' : 30,
                                                 'outargs byte length' : 64})


        self.inargsDataModel = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name' : 'Input Arguments',
                                                        'offset' : 0,
                                                        'bit length' : 240 })



        messageType = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                          {'name': 'Message Type',
                                                           'offset': 0,
                                                           'bit length': 5})
        self.inargsDataModel.addChild(messageType)

        messageCategory = register_class.cListDMTerminator(self.inargsMiniReg,
                                                 {'name': 'Message Category',
                                                  'offset': 5,
                                                  'bit length': 2})
        messageCategory.setReportList(self.messageCategory_list)
        self.inargsDataModel.addChild(messageCategory)

        NumBytes = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                        {'name': 'Num Bytes',
                                                         'offset': 8,
                                                         'bit length': 5})
        self.inargsDataModel.addChild(NumBytes)

        FrameType = register_class.cListDMTerminator(self.inargsMiniReg,
                                                           {'name': 'Frame Type',
                                                            'offset': 13,
                                                            'bit length': 2})
        FrameType.setReportList(self.FrameType_list)
        self.inargsDataModel.addChild(FrameType)

        payload = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                      {'name': 'Payload',
                                                       'offset': 16,
                                                       'bit length': 224})
        self.inargsDataModel.addChild(payload)



        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)

    messageCategory_list = ['Control message (no payload)',
                        'Data message (requires payload)',
                        'Extended message (requires payload)',
                        'Reserved']

    FrameType_list = ['SOP',
                            'SOP Prime',
                            'SOP Double Prime',
                            'Reserved']


class cANeg(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Autonegotiate Sink',
                                                 '4cc': 'ANeg',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)



class cAMDs(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Start Alternate Mode Discovery',
                                                 '4cc': 'AMDs',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGPie(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Enable GPIO as Input',
                                                 '4cc': 'GPie',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 1})

        inargsDM = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                  {'name': 'Input Arguments',
                                                   'offset': 0,
                                                   'bit length': 8})

        gpioNum = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                      {'name': 'GPIO Number',
                                                       'offset': 0,
                                                       'bit length': 8})
        gpioNum.setMaxValue(21)
        inargsDM.addChild(gpioNum)

        self.setInputModel(inargsDM)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGPoe(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Enable GPIO as Output',
                                                 '4cc': 'GPoe',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 1})

        inargsDM = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                  {'name': 'Input Arguments',
                                                   'offset': 0,
                                                   'bit length': 8})

        gpioNum = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                      {'name': 'GPIO Number',
                                                       'offset': 0,
                                                       'bit length': 8})
        gpioNum.setMaxValue(21)
        inargsDM.addChild(gpioNum)

        self.setInputModel(inargsDM)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cUCSI(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'UCSI Commands',
                                                 '4cc': 'UCSI',
                                                 'inargs byte length': 6,
                                                 'outargs byte length': 17})

        iDict = {'name': 'Input Arguments',
                 'offset': 0,
                 'bit length': 48}

        oDict = {'name': 'Return Values',
                 'offset': 0,
                 'bit length': 136}

        self.setInputModel(register_class.cDataModelArray(self.inargsMiniReg, 2,
                                                          {'name': 'Input Arguments',
                                                           'offset': 0,
                                                           'bit length': 48}))

        self.inargsArray = cAnyUCSIInputArray(self.inargsMiniReg, 1,
                                              {'name': 'Input Arguments',
                                               'offset': 0,
                                               'bit length': 48})

        self.inargsDataModel.addChild(self.inargsArray)

        self.setInputModel(self.inargsDataModel)

        self.outargsDataModel = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                               {'name': 'Return Values',
                                                                'offset': 0,
                                                                'bit length': 136})

        self.setOutputModel(self.outargsDataModel)

        self.outargsArray = cAnyUCSIOutputArray(self.outargsMiniReg, 1,
                                                {'name': 'Output Arguments',
                                                 'offset': 0,
                                                 'bit length': 136})

        self.outargsDataModel.addChild(self.outargsArray)

    def executeFunction(self):
        command = self.inargsDataModel.getChildByName('Input Arguments').getChildByName('Command').valueToInt()
        self.outargsDataModel.register.currentCommand = command

        print self.outargsDataModel.register

        if (command in ucsiCommand_dict) and (ucsiCommand_dict[command] == 'UCSI_CMDS_GET_PDOS'):
            sourceOrSink = self.inargsDataModel.getChildByName('Input Arguments').GET_PDOS_input_overlay.getChildByName(
                'Source or Sink')
            self.outargsDataModel.register.sourceOrSink = sourceOrSink
        else:
            self.outargsDataModel.register.sourceOrSink = None

        self.private_executeFunction()


class cGPsh(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Set GPIO High',
                                                 '4cc': 'GPsh',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 1})

        inargsDM = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                  {'name': 'Input Arguments',
                                                   'offset': 0,
                                                   'bit length': 8})

        gpioNum = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                      {'name': 'GPIO Number',
                                                       'offset': 0,
                                                       'bit length': 8})
        gpioNum.setMaxValue(21)
        inargsDM.addChild(gpioNum)

        self.setInputModel(inargsDM)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGPsl(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Set GPIO Low',
                                                 '4cc': 'GPsl',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 1})

        inargsDM = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                  {'name': 'Input Arguments',
                                                   'offset': 0,
                                                   'bit length': 8})

        gpioNum = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                      {'name': 'GPIO Number',
                                                       'offset': 0,
                                                       'bit length': 8})
        gpioNum.setMaxValue(21)
        inargsDM.addChild(gpioNum)

        self.setInputModel(inargsDM)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)

class cMuxR(function_class.cFunction) :
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name' : 'Rewrite last I2C event',
                                                 '4cc' : 'MuxR',
                                                 'inargs byte length' : 1,
                                                 'outargs byte length' : 1})


        self.inargsDataModel = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name' : 'Input Arguments',
                                                        'offset' : 0,
                                                        'bit length' : 8 })

        targetAddrIndex = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                          {'name' : 'I2C Target Address Index',
                                                            'offset' : 0,
                                                            'bit length' : 8 })
        self.inargsDataModel.addChild(targetAddrIndex)


        self.outargsDataModel = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                        {'name' : 'Return Values',
                                                        'offset' : 0,
                                                        'bit length' : 8 })

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                          {'name' : 'Task Return Status',
                                                            'offset' : 0,
                                                            'bit length' : 8 })

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        self.outargsDataModel.addChild(TSKReturn)

class cVDMs(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Send VDM Packet',
                                                 '4cc': 'VDMs',
                                                 'inargs byte length': 29,
                                                 'outargs byte length': 1})

        self.setInputModel(register_class.cDataModelArray(self.inargsMiniReg, 2,
                                                          {'name': 'Input Arguments',
                                                           'offset': 0,
                                                           'bit length': 232}))

        self.inargsArray = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                          {'name': 'Input Arguments',
                                                           'offset': 0,
                                                           'bit length': 232})

        self.inargsDataModel.addChild(self.inargsArray)

        numObj = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                     {'name': 'Number of 32-bit VDM Objects',
                                                      'offset': 0,
                                                      'bit length': 3})
        numObj.setMaxValue(7)
        numObj.addUpdateRegisterByName('self')
        self.inargsArray.addChild(numObj)

        sopType = register_class.cListDMTerminator(self.inargsMiniReg,
                                                   {'name': 'SOP Type',
                                                    'offset': 4,
                                                    'bit length': 2})
        sopType.setReportList(self.sop_type_list)
        sopType.setMaxValue(2)
        self.inargsArray.addChild(sopType)

        structType = register_class.cListDMTerminator(self.inargsMiniReg,
                                                      {'name': 'Structured/Unstructured',
                                                       'offset': 23,
                                                       'bit length': 1})
        structType.setReportList(self.structured_type_list)
        self.inargsArray.addChild(structType)

        SVID = register_class.cHexDMTerminator(self.inargsMiniReg,
                                               {'name': 'SVID (Standard or Vendor ID)',
                                                'offset': 24,
                                                'bit length': 16})
        self.inargsArray.addChild(SVID)

        vdo0 = register_class.cHexDMTerminator(self.inargsMiniReg,
                                               {'name': 'VDO 0 Partial Payload (15-bit)',
                                                'offset': 8,
                                                'bit length': 15})
        self.inargsArray.addChild(vdo0)

        for i in range(1, 8):
            vdox = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                   {'name': 'VDO %d Payload (32-bit)' % i,
                                                    'offset': 8 + (32 * i),
                                                    'bit length': 32})
            self.inargsArray.addChild(vdox)

        self.inargsArray.setDataModelGenerator(VDMs_inargs_TopLevelDMGenerator)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)

    sop_type_list = ['SOP', 'SOP Prime', 'SOP Double-Prime']
    structured_type_list = ['Unstructured VDM', 'Structured VDM']


class cPTCq(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Patch Query',
                                                 '4cc': 'PTCq',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 14})

        self.inargsDataModel = None

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        noConfig = register_class.cBooleanDMTerminator(self.outargsMiniReg,
                                                       {'name': 'No Config Bundle',
                                                        'offset': 3,
                                                        'bit length': 1})

        noConfig.lock()
        outargsDM.addChild(noConfig)

        noPatch = register_class.cBooleanDMTerminator(self.outargsMiniReg,
                                                      {'name': 'No Patch Bundle',
                                                       'offset': 7,
                                                       'bit length': 1})

        noPatch.lock()
        outargsDM.addChild(noPatch)

        configReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                        {'name': 'Config Return Code',
                                                         'offset': 8,
                                                         'bit length': 8})

        configReturn.setReportDict({0x0: 'Success',
                                    0x40: 'Warning',
                                    0x80: 'Failure'
                                    })
        configReturn.lock()
        outargsDM.addChild(configReturn)

        pcReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                    {'name': 'Patch Complete Return Code',
                                                     'offset': 16,
                                                     'bit length': 8})

        pcReturn.setReportDict({0x0: 'Success',
                                0x20: 'Not Ready',
                                0x40: 'Not a Patch',
                                0x41: 'Header Checksum Mismatch',
                                0x42: 'Incorrect ROM Version',
                                0x43: 'Patch Code Checksum Incorrect',
                                0x44: 'Null Patch Received',
                                0x45: 'Error Patch Received',
                                })
        pcReturn.lock()
        outargsDM.addChild(pcReturn)

        totdat = register_class.cHexDMTerminator(self.outargsMiniReg,
                                                 {'name': 'Total Data Transferred',
                                                  'offset': 32,
                                                  'bit length': 16})

        totdat.lock()
        outargsDM.addChild(totdat)

        patchdat = register_class.cHexDMTerminator(self.outargsMiniReg,
                                                   {'name': 'Patch Data Transferred',
                                                    'offset': 48,
                                                    'bit length': 16})

        patchdat.lock()
        outargsDM.addChild(patchdat)

        confdat = register_class.cHexDMTerminator(self.outargsMiniReg,
                                                  {'name': 'Config Data Transferred',
                                                   'offset': 64,
                                                   'bit length': 16})

        confdat.lock()
        outargsDM.addChild(confdat)

        state = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                 {'name': 'Patch State',
                                                  'offset': 80,
                                                  'bit length': 8})

        state.setReportDict({0x0: 'No Patch',
                             0x1: 'Loading',
                             0x2: 'Loading Done',
                             0x3: 'Running',
                             0x4: 'Early Load Skipped',
                             0x5: 'UART Booted',
                             0x6: 'Error',
                             })
        state.lock()
        outargsDM.addChild(state)

        source = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                  {'name': 'Patch Load Source',
                                                   'offset': 88,
                                                   'bit length': 8})

        source.setReportDict({0x0: 'None',
                              0x1: 'SRAM',
                              0x2: 'FLASH',
                              0x3: 'I2C',
                              0x4: 'Default',
                              })
        source.lock()
        outargsDM.addChild(source)

        confState = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Config State',
                                                      'offset': 96,
                                                      'bit length': 8})

        confState.setReportDict({0x0: 'No Data',
                                 0x1: 'Loading from SRAM',
                                 0x2: 'Loading from FLASH',
                                 0x3: 'Loading from I2C',
                                 0x4: 'Loading from Default',
                                 0x5: 'Loading Done',
                                 0x6: 'Error',
                                 0x7: 'Success',
                                 0x8: 'Failure',
                                 })
        confState.lock()
        outargsDM.addChild(confState)

        confSource = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                      {'name': 'Config Load Source',
                                                       'offset': 104,
                                                       'bit length': 8})

        confSource.setReportDict({0x0: 'None',
                                  0x1: 'SRAM',
                                  0x2: 'FLASH',
                                  0x3: 'I2C',
                                  0x4: 'Default',
                                  })
        confSource.lock()
        outargsDM.addChild(confSource)

        self.setOutputModel(outargsDM)

    sop_type_list = ['SOP', 'SOP Prime', 'SOP Double-Prime']
    structured_type_list = ['Unstructured VDM', 'Structured VDM']


class cADCs(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'ADC Read',
                                                 '4cc': 'ADCs',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 2})

        self.channelList = []
        for record in ADCchannelListOfDict:
            self.channelList.append(record['Channel'])

        inargsDM = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                  {'name': 'Input Arguments',
                                                   'offset': 0,
                                                   'bit length': 8})

        channel = register_class.cListDMTerminator(self.inargsMiniReg,
                                                   {'name': 'Channel',
                                                    'offset': 0,
                                                    'bit length': 5})
        channel.setReportList(self.channelList)
        channel.setMaxValue(23)
        inargsDM.addChild(channel)

        self.setInputModel(inargsDM)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = cDMAnyChannelTerminator(self.outargsMiniReg, self,
                                            {'name': 'ADC Read Value',
                                             'offset': 0,
                                             'bit length': 10})

        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGSCX(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Get Source Capabilities Extended',
                                                 '4cc': 'GSCX',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cALRT(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Send Alert',
                                                 '4cc': 'ALRT',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGSSt(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Get Status',
                                                 '4cc': 'GSSt',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.inargsDataModel = None
        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGBaS(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Get Battery Status',
                                                 '4cc': 'GBaS',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.setInputModel(register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                          {'name': 'Input Arguments',
                                                           'offset': 0,
                                                           'bit length': 8}))

        batteryNumber = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                            {'name': 'Battery Number',
                                                             'offset': 0,
                                                             'bit length': 3})

        self.inargsDataModel.addChild(batteryNumber)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGBaC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Get Battery Capability',
                                                 '4cc': 'GBaC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.setInputModel(register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                          {'name': 'Input Arguments',
                                                           'offset': 0,
                                                           'bit length': 8}))

        batteryNumber = register_class.cDecimalDMTerminator(self.inargsMiniReg,
                                                            {'name': 'Battery Number',
                                                             'offset': 0,
                                                             'bit length': 3})

        self.inargsDataModel.addChild(batteryNumber)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cGMfI(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Get Manufacturer Info',
                                                 '4cc': 'GMfI',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})

        self.setInputModel(register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                          {'name': 'Input Arguments',
                                                           'offset': 0,
                                                           'bit length': 16}))

        manufactRef = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                      {'name': 'Manufacturer Reference',
                                                       'offset': 0,
                                                       'bit length': 16})

        self.inargsDataModel.addChild(manufactRef)

        outargsDM = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                   {'name': 'Return Values',
                                                    'offset': 0,
                                                    'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        outargsDM.addChild(TSKReturn)

        self.setOutputModel(outargsDM)


class cLOCK(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Lock or Unlock Reserved HI Functions',
                                                 '4cc': 'LOCK',
                                                 'inargs byte length': 4,
                                                 'outargs byte length': 1})

        self.hideIfLocked = True

        self.inargsDataModel = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                              {'name': 'Input Arguments',
                                                               'offset': 0,
                                                               'bit length': 32})

        memAddr = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                  {'name': 'Lock/Unlock Key',
                                                   'offset': 0,
                                                   'bit length': 32})
        self.inargsDataModel.addChild(memAddr)

        self.outargsDataModel = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                               {'name': 'Return Values',
                                                                'offset': 0,
                                                                'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        self.outargsDataModel.addChild(TSKReturn)


class cMEMr(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Read From Device Memory',
                                                 '4cc': 'MEMr',
                                                 'inargs byte length': 4,
                                                 'outargs byte length': 4})

        self.hideIfLocked = True

        self.inargsDataModel = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                              {'name': 'Input Arguments',
                                                               'offset': 0,
                                                               'bit length': 32})

        memAddr = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                  {'name': 'Memory Address',
                                                   'offset': 0,
                                                   'bit length': 32})
        self.inargsDataModel.addChild(memAddr)

        self.outargsDataModel = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                               {'name': 'Return Values',
                                                                'offset': 0,
                                                                'bit length': 32})

        TSKReturn = register_class.cHexDMTerminator(self.outargsMiniReg,
                                                    {'name': 'Read Value',
                                                     'offset': 0,
                                                     'bit length': 32})

        TSKReturn.lock()
        self.outargsDataModel.addChild(TSKReturn)


class cMEMw(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Write to Device Memory',
                                                 '4cc': 'MEMw',
                                                 'inargs byte length': 8,
                                                 'outargs byte length': 1})

        self.hideIfLocked = True

        self.inargsDataModel = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                              {'name': 'Input Arguments',
                                                               'offset': 0,
                                                               'bit length': 64})

        memAddr = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                  {'name': 'Memory Address',
                                                   'offset': 0,
                                                   'bit length': 32})
        self.inargsDataModel.addChild(memAddr)

        memVal = register_class.cHexDMTerminator(self.inargsMiniReg,
                                                 {'name': 'Write Value',
                                                  'offset': 32,
                                                  'bit length': 32})
        self.inargsDataModel.addChild(memVal)

        self.outargsDataModel = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                               {'name': 'Return Values',
                                                                'offset': 0,
                                                                'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        self.outargsDataModel.addChild(TSKReturn)


class cDTRr(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Debug Trace Read',
                                                 '4cc': 'DTRr',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 32})

        self.inargsDataModel = None

        self.outargsDataModel = register_class.cDataModelArray(self.outargsMiniReg, 2,
                                                               {'name': 'Return Values',
                                                                'offset': 0,
                                                                'bit length': 256})

        config = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                {'name': 'Current Configuration',
                                                 'offset': 0,
                                                 'bit length': 32})

        self.outargsDataModel.addChild(config)

        warnings = register_class.cBooleanDMTerminator(self.outargsMiniReg,
                                                       {'name': 'Enable Debug Trace Warnings',
                                                        'offset': 0,
                                                        'bit length': 1})
        config.addChild(warnings)

        sopdpd = register_class.cBooleanDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Enable HI over SOP Double-prime Debug',
                                                      'offset': 1,
                                                      'bit length': 1})
        config.addChild(sopdpd)

        status = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                {'name': 'Current Status',
                                                 'offset': 32,
                                                 'bit length': 224})

        self.outargsDataModel.addChild(status)

        pdHardReset = register_class.cListDMTerminator(self.outargsMiniReg,
                                                       {'name': 'PD Hard Reset Details',
                                                        'offset': 0,
                                                        'bit length': 6})

        pdHardReset.setReportList(self.hardResetList)
        status.addChild(pdHardReset)

        errorRecovery = register_class.cListDMTerminator(self.outargsMiniReg,
                                                         {'name': 'Error Recovery Details',
                                                          'offset': 6,
                                                          'bit length': 8})
        errorRecovery.setReportList(self.errorRecoveryList)
        status.addChild(errorRecovery)

        hardFault = register_class.cBooleanDMTerminator(self.outargsMiniReg,
                                                        {'name': 'Hard Fault',
                                                         'offset': 14,
                                                         'bit length': 1})
        status.addChild(hardFault)

        watchdog = register_class.cBooleanDMTerminator(self.outargsMiniReg,
                                                       {'name': 'Watchdog Error',
                                                        'offset': 15,
                                                        'bit length': 1})
        status.addChild(watchdog)

        sysReset = register_class.cBooleanDMTerminator(self.outargsMiniReg,
                                                       {'name': 'System Reset',
                                                        'offset': 16,
                                                        'bit length': 1})
        status.addChild(sysReset)

        raw = register_class.cHexDMTerminator(self.outargsMiniReg,
                                              {'name': 'Raw Data',
                                               'offset': 32,
                                               'bit length': 192})
        status.addChild(raw)

    hardResetList = ['Reset value, no hard reset',
                     'Required by the policy engine (signaling sent by far end)',
                     'Requested by host',
                     'Invalid DR_Swap request during Active Mode',
                     'Required by policy engine, DischargeFailed',
                     'Required by policy engine, NoResponseTimeOut',
                     'Required by policy engine, SendSoftReset',
                     'Required by policy engine, Sink_SelectCapability',
                     'Required by policy engine, Sink_TransitionSink',
                     'Required by policy engine, Sink_WaitForCapabilities',
                     'Required by policy engine, SoftReset',
                     'Required by policy engine, SourceOnTimeout',
                     'Required by policy engine, Source_CapabilityResponse',
                     'Required by policy engine, Source_SendCapabilities',
                     'Required by policy engine, SourcingFault',
                     'Required by policy engine, UnableToSource',
                     'Required by policy engine, FRSFailure',
                     'Required by policy engine, Unexpected Message',
                     ]

    errorRecoveryList = ['Reset value, no error recovery',
                         'ERRRECOVERY_PROTOCOL', \
                         'ERRRECOVERY_TSD', \
                         'ERRRECOVERY_PPSWITCH', \
                         'ERRRECOVERY_PPTEMP',
                         'ERRRECOVERY_PORTINFO_MISSED',
                         'ERRRECOVERY_NO_RESPONSE_TIMEOUT',
                         'ERRRECOVERY_PETMR_PRS_TOOFF_SINK',
                         'ERRRECOVERY_PETMR_SOURCE_OFF',
                         'ERRRECOVERY_PETMR_SOURCE_STARTUP',
                         'ERRRECOVERY_MonAlarm',
                         'ERRRECOVERY_OVP',
                         'ERRRECOVERY_UVP',
                         'ERRRECOVERY_GPIO',
                         'ERRRECOVERY_FRS_NOGOODCRC',
                         'ERRRECOVERY_FRS_PETMR_SOURCEON',
                         'ERRORRECOVERY_HOSTCONNECTED_CHANGED',
                         'ERRRECOVERY_99',
                         ]


class cDTRw(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': 'Debug Trace Write',
                                                 '4cc': 'DTRw',
                                                 'inargs byte length': 4,
                                                 'outargs byte length': 0})

        self.inargsDataModel = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                              {'name': 'Configuration Values',
                                                               'offset': 0,
                                                               'bit length': 32})

        warnings = register_class.cBooleanDMTerminator(self.inargsMiniReg,
                                                       {'name': 'Enable Debug Trace Warnings',
                                                        'offset': 0,
                                                        'bit length': 1})
        self.inargsDataModel.addChild(warnings)

        sopdpd = register_class.cBooleanDMTerminator(self.inargsMiniReg,
                                                     {'name': 'Enable HI over SOP Double-prime Debug',
                                                      'offset': 1,
                                                      'bit length': 1})
        self.inargsDataModel.addChild(sopdpd)

        self.outargsDataModel = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                               {'name': 'Return Values',
                                                                'offset': 0,
                                                                'bit length': 8})

        TSKReturn = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'Task Return Status',
                                                      'offset': 0,
                                                      'bit length': 8})

        TSKReturn.setReportDict(task_return_dict)
        TSKReturn.lock()
        self.outargsDataModel.addChild(TSKReturn)


# ==========================================================================
# END - MANUAL - 4CC command definitions
# ==========================================================================


# ==========================================================================
# MANUAL - Debug Mode Related Functions
# ==========================================================================


def byteArray(n):
    strArray = bin(n)[2:].zfill(8 * ((len(bin(n)[2:]) - 1) / 8) + 8)

    ret = array.array('B')

    for i in range(len(strArray) / 8):
        if i != 0:
            ret.append(int(strArray[-i * 8 - 8:-i * 8], 2))
        else:
            ret.append(int(strArray[-8:], 2))

    return ret


#
# def verify_cmd_completed(handle, device_rw, hi_timeout_sec=None):
#     HI_TIMEOUT_SEC = 5
#
#     if (hi_timeout_sec == None):
#         hi_timeout_sec = HI_TIMEOUT_SEC
#     (count, cmd_result) = device_rw.read_reg_4cc(handle, 0x08)
#     assert count == 5
#     basetime_s = time.time()
#     while cmd_result[0] != device_rw.CC_ZERO:
#         (count, cmd_result) = device_rw.read_reg_4cc(handle, 0x08)
#         assert count == 5
#         print cmd_result
#         print type(cmd_result)
#         if cmd_result.tostring() == device_rw.CC_NOT_ZERO:
#             return "Cmd STATUS ERROR: %s" % cmd_result.tostring()
#         if ((time.time() - basetime_s) > HI_TIMEOUT_SEC):
#             # timeout has been reached
#             device_rw.write_reg_4cc(handle, 0x08, 'ABRT')
#             basetime_s = time.time()
#             (count, cmd_result) = device_rw.read_reg_4cc(handle, 0x08)
#             while cmd_result[0] != device_rw.CC_ZERO:
#                 assert count == 5
#                 if cmd_result.tostring() == device_rw.CC_NOT_ZERO:
#                     return "Cmd TIMEOUT followed by ABRT rejection: %s" % cmd_result.tostring()
#                 else:
#                     if ((time.time() - basetime_s) > 5):
#                         return "**********************************\nHost Interface function timeout followed by ABRT timeout\n**********************************\n"
#             (count, cmd_result) = read_reg_4cc(handle, 0x08)
#             return "**********************************\nHost Interface function aborted due to %d second timeout\n**********************************\n" % HI_TIMEOUT_SEC
#
#     return "Success"


def verify_cmd_completed(handle, hi_timeout_sec=None):
    global HI_TIMEOUT_SEC
    from device_rw import write_reg_4cc
    from device_rw import read_reg_4cc
    from device_rw import CC_ZERO
    from device_rw import CC_NOT_ZERO

    HI_TIMEOUT_SEC = 5

    if (hi_timeout_sec == None):
        hi_timeout_sec = HI_TIMEOUT_SEC

    (count, cmd_result) = read_reg_4cc(handle, 0x08)
    assert count == 5
    basetime_s = time.time()
    while cmd_result[0] != CC_ZERO:
        # hw_sleep_ms(100)
        (count, cmd_result) = read_reg_4cc(handle, 0x08)
        assert count == 5
        if ''.join(map(chr, cmd_result)) == CC_NOT_ZERO:
            return "Cmd STATUS ERROR: %s" %''.join(map(chr, cmd_result))
        if ((time.time() - basetime_s) > HI_TIMEOUT_SEC):
            # timeout has been reached
            write_reg_4cc(handle, 0x08, 'ABRT')
            basetime_s = time.time()
            (count, cmd_result) = read_reg_4cc(handle, 0x08)
            while cmd_result[0] != CC_ZERO:
                # hw_sleep_ms(100)
                assert count == 5
                if ''.join(map(chr, cmd_result)) == CC_NOT_ZERO:
                    return "Cmd TIMEOUT followed by ABRT rejection: %s" %''.join(map(chr, cmd_result))
                else:
                    if ((time.time() - basetime_s) > 5):
                        return "**********************************\nHost Interface function timeout followed by ABRT timeout\n**********************************\n"
            (count, cmd_result) = read_reg_4cc(handle, 0x08)
            return "**********************************\nHost Interface function aborted due to %d second timeout\n**********************************\n" % HI_TIMEOUT_SEC

    return "Success"


# PD State Trace

# PDSt has no exec wrapper and is not put into FUNC_LIST
# It is used internally for the PD State dump feature
# PD state dump
def PDSt(handle, device_rw):
    # Read position indicator for circular buffer
    device_rw.write_reg(handle, 0x09, byteArray(1))
    device_rw.write_reg_4cc(handle, 0x08, 'DBGi')
    verify_cmd_completed(handle, device_rw)
    (count, ret1) = device_rw.read_reg(handle, 0x09, 5)

    # Grab the current buffer pointer to determine how many blocks to print out
    # [0] Number of Blocks (Max size = Number of Blocks * 64 bytes)
    # [1] Version ID
    # [2:3] Current Buffer Pointer
    numberOfBlocks = ret1[0]
    bufferPointer = ret1[2] | (ret1[3] << 8)
    # Calculate the number of blocks to read. Perform Ceil Division to grab the next complete block
    blocksToRead = -(-(bufferPointer-1) // 64)
    # Only read up to the maximum number of blocks
    blocksToRead = blocksToRead if blocksToRead < numberOfBlocks else numberOfBlocks

    array = []

    for i in range(blocksToRead):
        device_rw.write_reg(handle, 0x09, byteArray(i))
        device_rw.write_reg_4cc(handle, 0x08, 'DBGr')
        verify_cmd_completed(handle, device_rw)
        (count, readArray) = device_rw.read_reg(handle, 0x09, 65)
        array.extend(readArray)
        print readArray

    shortArray = []
    for i in range(len(array) // 2):
        shortArray.append(array[2 * i] | (array[(2 * i) + 1] << 8))

    position = 0

    for (i, element) in enumerate(shortArray):
        if element == 0xFFFF:
            position = i
            break

    return (position, shortArray)


def pdStateDump(handle, device_rw):
    # return an array of strings in case someone wants to organize by line
    retVal = []
    (position, array) = PDSt(handle, device_rw)

    # remove runs of "PDState_Start" which occur when full circular buffer is not used.
    numPDState_Start = 0
    lastWasPDState_Start = False

    # build the array of return values
    for element in array[position:]:
        port = (element & 0x4000) >> 14
        module = (element & 0x3F00) >> 9
        value = element & 0x1FF
        if (module < 11) and (value in listOfModuleDict[module]):
            if value in listOfModuleDict[module]:
                retVal.append(
                    'Port %d\t%s\t0x%x = %s' % (port, listOfModules[module], value, listOfModuleDict[module][value]))
            else:
                retVal.append('Port %d\t%s\t0x%x = UNKNOWN' % (port, listOfModules[module], value))
        else:
            retVal.append('Port %d\tModule %d\t0x%x = UNKNOWN' % (port, module, value))

    for element in array[:position]:
        port = (element & 0x4000) >> 14
        module = (element & 0x3F00) >> 9
        value = element & 0x1FF
        if (module < 11) and (value in listOfModuleDict[module]):
            if value in listOfModuleDict[module]:
                retVal.append(
                    'Port %d\t%s\t0x%x = %s' % (port, listOfModules[module], value, listOfModuleDict[module][value]))
            else:
                retVal.append('Port %d\t%s\t0x%x = UNKNOWN' % (port, listOfModules[module], value))
        else:
            retVal.append('Port %d\tModule %d\t0x%x = UNKNOWN' % (port, module, value))

    return retVal

TYPEC_state_debug_dict = {0x00: 'SRC_STATE_DISABLED',
                          0x05: 'SRC_STATE_ERROR_RECOVERY',
                          0x24: 'SNK_STATE_UNATTACHED_ACCESSORY',
                          0x25: 'SNK_STATE_POWERED_ACCESSORY',
                          0x26: 'SNK_STATE_UNSUPPORTED_ACCESSORY',
                          0x2B: 'SNK_STATE_ATTACHWAIT_ACCESSORY',
                          0x45: 'DRP_STATE_TRY_SRC',
                          0x4E: 'DRP_TRY_WAIT_SNK',
                          0x4F: 'DRP_STATE_TRY_SNK',
                          0x50: 'DRP_STATE_TRY_WAIT_SRC',
                          0x60: 'COMMON_STATE_ATTACHED_SRC',
                          0x61: 'COMMON_STATE_ATTACHED_SNK',
                          0x62: 'COMMON_STATE_AUDIO_ACC',
                          0x63: 'COMMON_STATE_DEBUG_ACC',
                          0x64: 'COMMON_STATE_ATTACHWAIT_SRC',
                          0x65: 'COMMON_STATE_ATTACHWAIT_SNK',
                          0x66: 'COMMON_STATE_UNATTACHED_SNK',
                          0x67: 'COMMON_STATE_UNATTACHED_SRC',
                          0x68: 'COMMON_STATE_DEBUG_ACC_SNK',
                          0x69: 'COMMON_STATE_ORIENTED_DEBUG_ACC_SRC',
                          0x6A: 'COMMON_STATE_UNORIENTED_DEBUG_ACC_SRC',
                          0x6B: 'COMMON_STATE_UNATTACHEDWAIT_SRC'}

HI_state_debug_dict = {0x0: 'HIDebugState_OA_REG_ACCESS',
                       0x1: 'HIDebugState_OA_CMD'}

HPD_FW_state_debug_dict = {0x0: 'HPD_ENTER',
                           0x1: 'HPD_EXIT',
                           0x2: 'HPD_HIGH',
                           0x3: 'HPD_LOW',
                           0x4: 'HPD_IRQ',
                           0x5: 'HPD_CLEAR_STICKY',
                           0x6: 'HPD_UNUSED'}

HPD_HW_state_debug_dict = {0x0: 'HPD_STATE_0_DUMMY',
                           0x1: 'HPD_STATE_0_LOW_WAIT',
                           0x2: 'HPD_STATE_2_HIGH_IDLE',
                           0x3: 'HPD_STATE_3_IRQ',
                           0x6: 'HPD_STATE_6_HIGH_HOLD',
                           0xFF: 'HPD_STATE_OFF'}

PD_state_debug_dict = {0x0: 'PEState_Start',
                       0x1: 'PEState_CableTypeDetect',
                       0x2: 'PEState_LaunchPolicyEngine',
                       0x3: 'PEState_Priority__Start',
                       0x4: 'PEState_SendSoftReset',
                       0x5: 'PEState_SoftReset',
                       0x6: 'PEState_HardReset',
                       0x7: 'PEState_Priority__Stop',
                       0x8: 'PEState_SendSoftReset_Accept',
                       0x9: 'PEState_SoftReset_Exit',
                       0xA: 'PEState_Start_WrapUp',
                       0xB: 'PEState_WrapUpDone',
                       0xC: 'PEState_GiveSourceCap',
                       0xD: 'PEState_GiveSinkCap',
                       0xE: 'PEState_GetCap',
                       0xF: 'PEState_GetCap_Rx',
                       0x10: 'PEState_GetCap_Timeout',
                       0x11: 'PEState_Send_Not_Supported',
                       0x12: 'PEState_Not_Supported_Rx',
                       0x13: 'PEState_Source_Startup',
                       0x14: 'PEState_Source_Startup_Continue',
                       0x15: 'PEState_Source_Discovery',
                       0x16: 'PEState_Source_SendCapabilities',
                       0x17: 'PEState_Source_Ready',
                       0x18: 'PEState_Source_CapabilityResponse',
                       0x19: 'PEState_Source_NegotiateCapability',
                       0x1A: 'PEState_Source_TransitionSupply_GotoMin',
                       0x1B: 'PEState_Source_TransitionSupply_Accept',
                       0x1C: 'PEState_Source_TransitionSupply',
                       0x1D: 'PEState_UnUsed_0x1D',
                       0x1E: 'PEState_Source_TransitionSupply_SetAlarmsNew',
                       0x1F: 'PEState_Source_TransitionSupply_PS_RDY',
                       0x20: 'PEState_UnUsed_0x20',
                       0x21: 'PEState_Sink_Startup',
                       0x22: 'PEState_Sink_Discovery',
                       0x23: 'PEState_RxCapabilitiesOk__Start',
                       0x24: 'PEState_Sink_WaitForCapabilities',
                       0x25: 'PEState_UnUsed_0x25',
                       0x26: 'PEState_Sink_EvaluateCapability',
                       0x27: 'PEState_Sink_SelectCapability',
                       0x28: 'PEState_Sink_TransitionSink',
                       0x29: 'PEState_Sink_TransitionSink_PS_RDY',
                       0x2A: 'PEState_Sink_Ready',
                       0x2B: 'PEState_RxCapabilitiesOk__Stop',
                       0x2C: 'PEState_Reject_Request',
                       0x2D: 'PEState_Enable_VCONN',
                       0x2E: 'PEState_Enable_VBUS',
                       0x2F: 'PEState_Response_Send_Wait',
                       0x30: 'PEState_PD_Send_Custom_Message',
                       0x31: 'PEState_PRS_Evaluate_PR_Swap',
                       0x32: 'PEState_PRS_Send_PR_Swap',
                       0x33: 'PEState_PRS_Accept_PR_Swap',
                       0x34: 'PEState_PRS_AssertRp',
                       0x35: 'PEState_PRS_AssertRd',
                       0x36: 'PEState_PRS_TransitionToOff',
                       0x37: 'PEState_PRS_TransitionToOff_Sink',
                       0x38: 'PEState_PRS_TransitionToOff_Source',
                       0x39: 'PEState_PRS_SourceOff',
                       0x3A: 'PEState_PRS_SourceOn',
                       0x3B: 'PEState_PRS_SourceOn_PS_RDY',
                       0x3C: 'PEState_BIST_CarrierMode2',
                       0x3D: 'PEState_BIST_TestData',
                       0x3E: 'PEState_BIST_End_Continuous_Test',
                       0x3F: 'PEState_VCS_Send_Swap',
                       0x40: 'PEState_VCS_Wait_for_VCONN',
                       0x41: 'PEState_VCS_Turn_Off_VCONN',
                       0x42: 'PEState_VCS_Turn_On_VCONN',
                       0x43: 'PEState_VCS_Send_PS_Rdy',
                       0x44: 'PEState_VCS_Evaluate_Swap',
                       0x45: 'PEState_VCS_Accept_Swap',
                       0x46: 'PEState_VCS_Force_VConn',
                       0x47: 'PEState_DRS_Evaluate_DR_Swap',
                       0x48: 'PEState_DRS_Accept_DR_Swap',
                       0x49: 'PEState_DRS_DFP_UFP_Change_to_UFP',
                       0x4A: 'PEState_DRS_Send_DR_Swap',
                       0x4B: 'PEState_DRS_UFP_DFP_Change_to_DFP',
                       0x4C: 'PEState_Resp_VDM_Send_NAK',
                       0x4D: 'PEState_Resp_VDM_Send_Identity',
                       0x4E: 'PEState_Resp_VDM_Send_SVIDs',
                       0x4F: 'PEState_Resp_VDM_Send_Modes',
                       0x50: 'PEState_UFP_VDM_Evaluate_Mode_Entry',
                       0x51: 'PEState_UFP_VDM_Mode_Entry_ACK',
                       0x52: 'PEState_UFP_VDM_Mode_Entry_NAK',
                       0x53: 'PEState_UFP_VDM_Mode_Exit',
                       0x54: 'PEState_UFP_VDM_Mode_Exit_ACK',
                       0x55: 'PEState_UFP_VDM_Mode_Exit_NAK',
                       0x56: 'PEState_Init_VDM_Attention_Request',
                       0x57: 'PEState_UFP_VDM_Status_Request',
                       0x58: 'PEState_UFP_VDM_Config_Request',
                       0x59: 'PEState_UFP_VDM_Config_ACK',
                       0x5A: 'PEState_UFP_VDM_Handle_SendDataMsg',
                       0x5B: 'PEState_UFP_VDM_SendDataMsg_ACK',
                       0x5C: 'PEState_UFP_VDM_Mipi_Config_ACK',
                       0x5D: 'PEState_Send_UVDM',
                       0x5E: 'PEState_Receive_UVDM',
                       0x5F: 'PEState_Init_VDM_BUSY_Response',
                       0x60: 'PEState_Init_VDM_Identity_Request',
                       0x61: 'PEState_Init_VDM_Identity_ACKed',
                       0x62: 'PEState_Init_VDM_Identity_NAKed',
                       0x63: 'PEState_Init_VDM_SVIDs_Request',
                       0x64: 'PEState_Init_VDM_SVIDs_ACKed',
                       0x65: 'PEState_Init_VDM_SVIDs_NAKed',
                       0x66: 'PEState_Init_VDM_Modes_Request',
                       0x67: 'PEState_Init_VDM_Modes_ACKed',
                       0x68: 'PEState_Init_VDM_Modes_NAKed',
                       0x69: 'PEState_DFP_VDM_Mode_Entry_Request',
                       0x6A: 'PEState_DFP_VDM_Mode_Entry_ACKed',
                       0x6B: 'PEState_DFP_VDM_Mode_Entry_NAKed',
                       0x6C: 'PEState_DFP_VDM_Mode_Exit_Request',
                       0x6D: 'PEState_DFP_VDM_Exit_Mode_ACKed',
                       0x6E: 'PEState_DFP_VDM_Config_Request',
                       0x6F: 'PEState_DFP_VDM_Config_ACK',
                       0x70: 'PEState_DFP_VDM_Config_NAKed',
                       0x71: 'PEState_Init_VDM_Send_Data',
                       0x72: 'PEState_Init_VDM_Send_Data_ACK',
                       0x73: 'PEState_Init_VDM_Get_Msg_RCV',
                       0x74: 'PEState_DFP_VDM_Status_Update',
                       0x75: 'PEState_TBT_Send_Attention',
                       0x76: 'PEState_UFP_VDM_Mipi_Status_ACK',
                       0x77: 'PEState_SRC2PLUG_VDM_Identity_Request',
                       0x78: 'PEState_SRC2PLUG_VDM_Identity_ACKed',
                       0x79: 'PEState_SRC2PLUG_VDM_Identity_NAKed',
                       0x7A: 'PEState_PLUG_Send_SoftReset_Request',
                       0x7B: 'PEState_PLUG_CableReset',
                       0x7C: 'PEState_DFP2PLUG_VDM_Identity_Request',
                       0x7D: 'PEState_DFP2PLUG_VDM_Identity_ACKed',
                       0x7E: 'PEState_DFP2PLUG_VDM_Identity_NAKed',
                       0x7F: 'PEState_DFP2PLUG_VDM_SVIDs_Request',
                       0x80: 'PEState_DFP2PLUG_VDM_SVIDs_ACKed',
                       0x81: 'PEState_DFP2PLUG_VDM_SVIDs_NAKed',
                       0x82: 'PEState_DFP2PLUG_VDM_Modes_Request',
                       0x83: 'PEState_DFP2PLUG_VDM_Modes_ACKed',
                       0x84: 'PEState_DFP2PLUG_VDM_Modes_NAKed',
                       0x85: 'PEState_DFP2PLUG_VDM_Mode_Entry_Request',
                       0x86: 'PEState_DFP2PLUG_VDM_Mode_Entry_ACKed',
                       0x87: 'PEState_DFP2PLUG_VDM_Mode_Entry_NAKed',
                       0x88: 'PEState_DFP2PLUG_VDM_Mode_Exit_Request',
                       0x89: 'PEState_DFP2PLUG_VDM_Mode_Exit_ACKed',
                       0x8A: 'PEState_DFP2PLUG_VDM_Mode_Exit_NAKed',
                       0x8B: 'PEState_DFP2PLUG_VDM_DP_Status_Update',
                       0x8C: 'PEState_DFP2PLUG_VDM_DP_Config_Request',
                       0x8D: 'PEState_DFP2PLUG_VDM_DP_Config_NAK',
                       0x8E: 'PEState_Extended_DataMessage_Timeout',
                       0x8F: 'PEState_Legacy',
                       0x90: 'PEState_Disabled',
                       0x91: 'PEState_ErrorRecovery',
                       0x92: 'PEState_Get_PortOrPlugInfo',
                       0x93: 'PEState_GiveCountryCodes',
                       0x94: 'PEState_GiveCountryInfo',
                       0x95: 'PEState_Source_GiveSourceCapExt',
                       0x96: 'PEState_Sink_GiveSinkCapExt',
                       0x97: 'PEState_GiveStatus',
                       0x98: 'PEState_GiveBatteryStatus',
                       0x99: 'PEState_GiveBatteryCap',
                       0x9A: 'PEState_GiveManufacturerInfo',
                       0x9B: 'PEState_Send_Alert',
                       0x9C: 'PEState_Alert_Rx',
                       0x9D: 'PEState_ExtMsg_ReceivedPacket',
                       0x9E: 'PEState_ExtMsg_RequestChunk',
                       0x9F: 'PEState_ExtMsg_SendPacket',
                       0xA0: 'PEState_CustomMessage_ErrorHandler',
                       0xA1: 'PEState_FRS_Send_FR_Swap',
                       0xA2: 'PEState_FRS_AssertRp',
                       0xA3: 'PEState_FRS_TransitionToOff',
                       0xA4: 'PEState_FRS_TransitionToOff_Sink',
                       0xA5: 'PEState_FRS_Sink_VBUS_Applied',
                       0xA6: 'PEState_FRS_SourceOn',
                       0xA7: 'PEState_DDR_Send_DataReset',
                       0xA8: 'PEState_DDR_Handle_DataReset',
                       0xA9: 'PEState_DDR_Evaluate_DataReset',
                       0xAA: 'PEState_DDR_DataReset_Complete',
                       0xAB: 'PEState_EnterUSB_SendOrReceive',
                       0xAC: 'PEState_EnterUSB_Handle_Failure',
                       0xAD: 'PEState_Reserved_0xAD',
                       0xAE: 'PEState_Reserved_0xAE',
                       0xAF: 'PEState_Reserved_0xAF',
                       0xB0: 'PEState_Reserved_0xB0',
                       0xB1: 'PEState_Reserved_0xB1'}

PD_EVENT_state_debug_dict = {0x00: 'PRState_NoFlag',
                             0x01: 'PEState_Received_Attenion',
                             0x02: 'PEState_Vconn_discharge_detected',
                             0x03: 'PEState_DATA_CONTROL_UPDATED',
                             0x04: 'PEState_DATA_CONTROL_ACK_RECEIVED',
                             0x05: 'PRState_SWITCH_ILIM_TRIP',
                             0x06: 'PRState_DATA_CONTROL_HPD_IRQ_UPDATED',
                             0x07: 'PRState_DATA_CONTROL_HPD_LEVEL_UPDATED',
                             0x08: 'PRState_DATA_CONTROL_HPD_EVENT_TRIGGER_PE',
                             0x09: 'PRState_DATA_CONTROL_HPD_LEVEL_MSG_SENT'}

INTS_state_debug_dict = {0x1: 'PD_HARD_RESET',
                         0x3: 'PLUG_INSERT_OR_REMOVAL',
                         0x4: 'PR_SWAP_COMPLETE',
                         0x5: 'DR_SWAP_COMPLETE',
                         0x6: 'FR_SWAP_COMPLETE',
                         0x7: 'SOURCE_CAP_UPDATED',
                         0x9: 'OVERCURRENT',
                         0xA: 'ATTENTION_RECEIVED',
                         0xB: 'VDM_RECEIVED',
                         0xC: 'NEW_CONTRACT_AS_CONS',
                         0xD: 'NEW_CONTRACT_AS_PROV',
                         0xE: 'SRC_CAP_MSG_RCVD',
                         0x11: 'PR_SWAP_REQUESTED',
                         0x12: 'DR_SWAP_REQUESTED',
                         0x14: 'USB_HOST_PRESENT',
                         0x15: 'USB_HOST_PRESENT_NO_LONGER',
                         0x17: 'PP_SWITCH_CHANGED',
                         0x18: 'POWER_STATUS_UPDATE',
                         0x19: 'DATA_STATUS_UPDATE',
                         0x1A: 'STATUS_UPDATE',
                         0x1B: 'PD_STATUS_UPDATE',
                         0x1E: 'CMD_1_COMPLETE',
                         0x1F: 'CMD_2_COMPLETE',
                         0x20: 'ERROR_DEVICE_INCOMPATIBLE',
                         0x21: 'ERROR_CANNOT_PROVIDE_VOLTAGE_OR_CURRENT',
                         0x22: 'ERROR_CAN_PROVIDE_VOLTAGE_OR_CURRENT_LATER',
                         0x23: 'ERROR_POWER_EVENT_OCCURRED',
                         0x24: 'ERROR_MISSING_GET_CAP_MESSAGE',
                         0x26: 'ERROR_PROTOCOL_ERROR',
                         0x27: 'ERROR_MESSAGE_DATA',
                         0x2A: 'SNK_TRANSITION_COMPLETE',
                         0x2B: 'ICELAKE_PLUG_EARLY_NOTIFICATION',
                         0x2C: 'ICELAKE_PROCHOT_NOTIFICATION',
                         0x2E: 'ERROR_UNABLE_TO_SOURCE',
                         0x30: 'AM_ENTRY_FAIL',
                         0x31: 'AM_ENTERED',
                         0x33: 'DISCOVER_MODE_COMPLETE',
                         0x34: 'EXIT_MODE_COMPLETE',
                         0x35: 'DATA_RESET_START',
                         0x38: 'USER_SVID_ALT_MODE_ENTERED',
                         0x39: 'USER_SVID_ALT_MODE_EXITED',
                         0x3A: 'USER_SVID_ALT_MODE_ATTN_VDM',
                         0x3B: 'USER_SVID_ALT_MODE_OTHER_VDM',
                         0x3E: 'DP_SID_STATUS_UPDATE',
                         0x3F: 'INTEL_VID_STATUS_UPDATE',
                         0x40: 'PD3_STATUS_UPDATE',
                         0x41: 'TX_MEM_BUFFER_EMPTY',
                         0x42: 'MBRD_BUFFER_READY',
                         0x43: 'CUSTOM_D_VDM_ARRIVE',
                         0x44: 'VDM_ENTERED_MODE',
                         0x45: 'CUSTOM_D_VDM_MSG_SENT',
                         0x46: 'EVENT_SOC_ACK_TIMEOUT',
                         0x47: 'NOT_SUPPORTED_RESPONSE_RECEIVED',
                         0x48: 'I2C_MUX_CONFIG_FAILED',
                         0x4C: 'FRS_SIGNAL_RECEIVED',
                         0x4D: 'CHUNK_RESPONSE_RECEIVED',
                         0x4E: 'CHUNK_REQUEST_RECEIVED',
                         0x4F: 'ALERT_MESSAGE_RECEIVED',
                         0x4F: 'HIEVENT_PORT_SPECIFIC_LAST',
                         0x50: 'PATCH_LOADED',
                         0x51: 'READY_FOR_PATCH',
                         0x52: 'I2C_MASTER_NACKED'}

SLEEP_state_debug_dict = {0x00: 'SLEEP_STATE_AWAKE',
                          0x01: 'SLEEP_STATE_SLEEP_LITE_ACE',
                          0x02: 'SLEEP_STATE_SLEEP_DEEP_ACE',
                          0x03: 'SLEEP_STATE_PREPARE_TO_SLEEP',
                          0x04: 'SLEEP_STATE_READY_TO_SLEEP'}

OTHER_state_debug_dict = {0x10: 'OTHER_EVENT__PP_TSD_RE',
                          0x11: 'OTHER_EVENT__PP_TSD_FE',
                          0x12: 'OTHER_EVENT__PP_ILIM_RE',
                          0x13: 'OTHER_EVENT__PP_ILIM_FE',
                          0x14: 'OTHER_EVENT__MISC_ERRRECV_ALL_FAULT_CLEAN',
                          0x15: 'OTHER_EVENT__MISC_ERRRECV_FAULT_EXISTS'}

PROTOCOL_state_debug_dict = {0x00: 'PRState_Source_SinkTxOk',
                             0x01: 'PRState_Source_SinkTxNG',
                             0x02: 'PRState_Sink_SinkTxOk',
                             0x03: 'PRState_Sink_SinkTxNG',
                             0x04: 'PEState_SinkTx_Checked',
                             0x05: 'PRState_Source_AMS_Tx',
                             0x06: 'PRState_Sink_AMS_Tx',
                             0x07: 'PRState_SQUELCH_ACTIVE',
                             0x08: 'PRState_SQUELCH_IDLE',
                             0x09: 'PRState_SOP_RECEIVED',
                             0x0A: 'PRState_SOP_PRIME_RECEIVED',
                             0x0B: 'PRState_SOP_DPRIME_RECEIVED',
                             0x0C: 'PRState_RX_BUF_RDY',
                             0x0D: 'PRState_HARDRESET_RECEIVED',
                             0x0E: 'PRState_CABLERESET_RECEIVED',
                             0x0F: 'PRState_TXDONE',
                             0x10: 'PRState_INVALID_BIT_TIME',
                             0x11: 'PRState_RECEIVED_GOODCRC',
                             0x12: 'PRState_TX_AUTOGOODCRC_DONE',
                             0x13: 'PRState_RECEIVED_BADCRC',
                             0x14: 'PRState_TxBuffer_Discarded',
                             0x15: 'PRState_ReTransmit_Discarded_TxBuffer',
                             0x16: 'PRState_AUTO_GOODCRC_TXDONE',
                             0x17: 'PRState_RX_BUFFER_OVERFLOW'}

VBUS_state_debug_dict = {0x90: 'VBUSState_MON_HI',
                         0x91: 'VBUSState_MON_LO',
                         0x92: 'VBUSState_VBUSOn',
                         0xAF: 'VBUSState_UVP_Disabled',
                         0xB0: 'VBUSState_FirstPDOSwitch_Enabled',
                         0xB1: 'VBUSState_CommonHandler_Exited',
                         0xB2: 'VBUSState_FRS_SIGNAL_RECEIVED',
                         0xB3: 'VBUSState_UVP_CHECKFALLING',
                         0xB4: 'VBUSState_OVP_ENTERED',
                         0xB5: 'VBUSState_SNK_DISCONNECT',
                         0xB6: 'VBUSState_GOOD_RISING',
                         0xB7: 'VBUSState_GOOD_FALLING',
                         0xCC: 'VBUSState_MON_HILO',
                         0xCD: 'VBUSState_OVP_UVP'}

BC12_state_debug_dict = {0x00: 'CHARGER_DETECTION_INIT',
                         0x01: 'DATA_CONNECTION_DETECTION',
                         0x02: 'DATA_CONNECTION_DETECTION_BYPASS',
                         0x03: 'PRIMARY_DETECTION',
                         0x04: 'SECONDARY_DETECTION_MEASUREMENT',
                         0x05: 'CHARGER_DETECTION_COMPLETE',
                         0x06: 'CHARGER_DCP_ADVERTISEMENT',
                         0x07: 'CHARGER_CDP_ADVERTISE_START',
                         0x08: 'CHARGER_CDP_ADVERTISE_IDX_DPLUS_ON',
                         0x09: 'CHARGER_CDP_ADVERTISE_VDX_DMINUS_ON',
                         0x0A: 'CHARGER_CDP_ADVERTISE_IDX_DPLUS_OFF',
                         0x0B: 'CHARGER_CDP_ADVERTISE_VDX_DMINUS_OFF',
                         0x0C: 'CHARGER_CDP_ADVERTISE_WAIT',
                         0x0D: 'CHARGER_CDP_ADVERTISE_COMPLETE',
                         0x0E: 'CHARGER_DCP_ADVERTISEMENT_COMPLETE',
                         0x0F: 'CHARGER_DETECTION_DISABLED',
                         0x10: 'PRIMARY_DETECTION_WAIT',
                         0x11: 'DISABLE_PRIMARY_DETECTION_WAIT',
                         0x12: 'SECONDARY_DETECTION_WAIT',
                         0x13: 'SECONDARY_DETECTION_SAMPLE_WAIT',
                         0x14: 'SECONDARY_DETECTION_COMPLETION_WAIT',
                         0x15: 'CHARGER_START_DETECTION',
                         0x16: 'CHARGER_DETECTION_PROPRIETARY_SETUP',
                         0x17: 'CHARGER_DETECTION_PROPRIETARY_MEASURE',
                         0x18: 'DCP_AUTO_START',
                         0x19: 'DCP_AUTO_DIV3_SAMPLE',
                         0x1A: 'DCP_AUTO_12SEC_INIT',
                         0x1B: 'DCP_AUTO_12SEC_WAIT',
                         0x1C: 'DCP_AUTO_LAST'}

listOfModules = ['TYPE-C', 'HI', 'HPD FW', 'HPD HW', 'PD', 'PD EVENT', 'INTS', 'SLEEP', 'OTHER', 'PROTOCOL', 'VBUS', 'BC 1.2']
listOfModuleDict = [TYPEC_state_debug_dict, HI_state_debug_dict, HPD_FW_state_debug_dict, HPD_HW_state_debug_dict, PD_state_debug_dict, PD_EVENT_state_debug_dict, INTS_state_debug_dict,
                    SLEEP_state_debug_dict, OTHER_state_debug_dict, PROTOCOL_state_debug_dict, VBUS_state_debug_dict, BC12_state_debug_dict]

def getBootStatus(handle, device_rw, command, data):
    # To make sure we get the actual Region 0 pointer from the flash, read until we see same value twice
    previous_regionAddr = 0x01234567
    region0Addr = 0x89ABCDEF
    while (region0Addr != previous_regionAddr):
        device_rw.write_reg(handle, 0x09, byteArray(0))
        device_rw.write_reg_4cc(handle, 0x08, 'FLrr')
        retVal = verify_cmd_completed(handle, device_rw)
        if retVal != "Success":
            return {'status': -2, 'message': retVal}
        (count, readArray) = device_rw.read_reg(handle, 0x09, 5)
        if len(readArray) >= 4:
            region0Addr = readArray[0] | (readArray[1] << 8) | (readArray[2] << 16) | (readArray[3] << 24)
        else:
            return {'status': -2, 'message': 'Read failure from device'}
        print 'Just read region0Addr: 0x%0x' % region0Addr
        previous_regionAddr = region0Addr

    # To make sure we get the actual Region 1 pointer from the flash, read until we see same value twice
    previous_regionAddr = 0x01234567
    region1Addr = 0x89ABCDEF
    while (region1Addr != previous_regionAddr):
        device_rw.write_reg(handle, 0x09, byteArray(1))
        device_rw.write_reg_4cc(handle, 0x08, 'FLrr')
        retVal = verify_cmd_completed(handle, device_rw)
        if retVal != "Success":
            return {'status': -2, 'message': retVal}
        (count, readArray) = device_rw.read_reg(handle, 0x09, 5)
        if len(readArray) >= 4:
            region1Addr = readArray[0] | (readArray[1] << 8) | (readArray[2] << 16) | (readArray[3] << 24)
        else:
            return {'status': -2, 'message': 'Read failure from device'}
        print 'Just read region1Addr: 0x%0x' % region1Addr
        previous_regionAddr = region1Addr

    (count, readArray) = device_rw.read_reg(handle, 0x2D, 5)

    if readArray[0] & 0x8 == 0x8:
        spiPresent = True
    else:
        spiPresent = False

    if readArray[1] & 0x1 == 0x1:
        region1Attempted = True
    else:
        region1Attempted = False

    (count, readArray) = device_rw.read_reg(handle, 0x03, 5)

    mode = ''.join([chr(b) for b in readArray])

    print 'I2C EEPROM Present'
    print spiPresent

    print 'Mode From Device'
    print mode

    if mode == 'APP ':
        booted = True
    else:
        booted = False

    if booted and spiPresent:
        if region1Attempted == True:
            bootRegion = 1
        else:
            bootRegion = 0
    else:
        bootRegion = -1

    print region0Addr
    print region1Addr

    return {'status': 0, 'message': 'Success', 'return data': (region0Addr, region1Addr, bootRegion)}


def erase1KBlock(handle, device_rw, command, data):
    startAddr = data['Start Address']

    print ('Start address : ' + hex(startAddr))

    if (startAddr != 0):
        if startAddr % 0x400 != 0x0:
            return {'status': -2, 'message': 'Start Address must have a block offset (multiple of 0x400)'}

    sAByteArray = byteArray(startAddr)
    while len(sAByteArray) < 4:
        sAByteArray.append(0)

    sAByteArray.append(1)

    # erase the block
    print 'Erase flash....'
    device_rw.write_reg(handle, 0x09, sAByteArray)
    device_rw.write_reg_4cc(handle, 0x08, 'FLem')
    print " Wait for Command to complete"
    retVal = verify_cmd_completed(handle, device_rw)

    if retVal == "Success":
        print 'Flash erase successful'
        return {'status': 0, 'message': 'Success'}
    else:
        print 'Flash erase fail'
        return {'status': -2, 'message': retVal}


def write64BBlock(handle, device_rw, command, data):
    startAddr = data['Start Address']
    writeData = data['Write Data']

    print '**********************************************'
    print ('Write Address: ' + hex(startAddr))

    # print 'Data to Write : ', writeData
    #
    # print 'Length of Data to Write : ', len(writeData)

    BLOCK_SIZE = 32

    if startAddr % BLOCK_SIZE != 0:
        return {'status': -2, 'message': 'Start Address must be a multiple of %d' % BLOCK_SIZE}

    if len(writeData) != BLOCK_SIZE:
        return {'status': -2,
                'message': 'Write data size must be exactly 32. Received data of size %d' % len(writeData)}

    sAByteArray = byteArray(startAddr)
    while len(sAByteArray) < 4:
        sAByteArray.append(0)

    # set the write pointer
    device_rw.write_reg(handle, 0x09, sAByteArray)
    device_rw.write_reg_4cc(handle, 0x08, 'FLad')
    retVal = verify_cmd_completed(handle, device_rw)

    if retVal != "Success":
        return {'status': -1, 'message': retVal}

    MAX_RETRIES_TRANSFER = 7
    MAX_RETRIES_FLwd = 3
    retriesFLwd = 0
    retriesTransfer = 0
    match = False
    while (retriesFLwd < MAX_RETRIES_FLwd):
        while (retriesTransfer < MAX_RETRIES_TRANSFER) and (match == False):
            (count, matchData) = device_rw.read_reg(handle, 0x03, 5)
            device_rw.write_reg(handle, 0x09, writeData)
            time.sleep(0.1)
            (count, matchData) = device_rw.read_reg(handle, 0x03, 5)
            # print "extra read mode, count: ", count, "test data: ", matchData
            (count, matchData) = device_rw.read_reg(handle, 0x09, BLOCK_SIZE + 1)
            # print 'Contents of readback (DATA register): '
            # print (matchData)
            # print "length of readback data: ", count
            match = True
            # pdb.set_trace()
            for i in range(BLOCK_SIZE):
                if matchData[i] != writeData[i]:
                    match = False
            if match == False:
                retriesTransfer += 1
                print 'Readback of transferred data does NOT match what was written, retries2: ', retriesTransfer
        if retriesTransfer == MAX_RETRIES_TRANSFER:
            # pdb.set_trace()
            print "BAD: read back of transferred data does NOT match what was written"
            return {'status': -3, 'message': 'Flash data transfer failure.  Maximum retries reached.'}

        print "Good readback of transferred data, retries: ", retriesTransfer
        retriesTransfer = 0

        device_rw.write_reg_4cc(handle, 0x08, 'FLwd')
        retVal = verify_cmd_completed(handle, device_rw)
        if retVal != "Success":
            # Command did not complete
            retriesFLwd += 1
            print '%%%%% Flwd command did not complete successfully, retries:', retriesFLwd
        else:
            (count, readArray) = device_rw.read_reg(handle, 0x09, 2)
            if readArray[0] != 0:
                # Command completed in error
                retriesFLwd += 1
                print '***** Flwd returned error code: ', readArray[0], ' retries:', retriesFLwd
            else:
                print 'Flwd completed successfully'
                break

    if retriesFLwd >= MAX_RETRIES_FLwd:
        print 'returning error code retriesFLwd >= MAX_RETRIES_FLwd'
        return {'status': -1, 'message': 'Flash write failure.  Maximum retries reached.'}

    return {'status': 0, 'message': 'Success'}


def read16BBlock(handle, device_rw, command, data):
    startAddr = data['Start Address']

    readAddr = byteArray(startAddr)
    while len(readAddr) < 4:
        readAddr.append(0)

    device_rw.write_reg(handle, 0x09, readAddr)
    device_rw.write_reg_4cc(handle, 0x08, 'FLrd')
    retVal = verify_cmd_completed(handle, device_rw)
    if retVal != "Success":
        return {'status': -2, 'message': retVal}
    (count, readArray) = device_rw.read_reg(handle, 0x09, 17)

    if type(readArray) is list:
        readArray = array.array("B", readArray)

    return {'status': 0, 'message': 'Success', 'Read Data': readArray}


def reboot(handle, device_rw, command, data):
    device_rw.write_reg_4cc(handle, 0x08, 'GAID')
    # there is no verification step when rebooting
    return {'status': 0, 'message': 'Reboot request sent'}


def deleteRegionPointer(handle, device_rw, command, data):
    region = data['Write Data']

    sAByteArray = byteArray(region)

    print ('Delete Region pointer of Region : ' + str(region))

    # erase the pointer
    device_rw.write_reg(handle, 0x09, sAByteArray)
    device_rw.write_reg_4cc(handle, 0x08, 'FLer')
    print " Wait for Command to complete"
    time.sleep(0.02)
    retVal = verify_cmd_completed(handle, device_rw)

    if retVal == "Success":
        return {'status': 0, 'message': 'Success'}
    else:
        return {'status': -2, 'message': retVal}


def HIFirmwareUpdate(handle, device_rw, command, data):
    # return an array of strings in case someone wants to organize by line
    if command == 'getBootStatus':
        return getBootStatus(handle, device_rw, command, data)

    if command == 'erase1KBlock':
        return erase1KBlock(handle, device_rw, command, data)

    if command == 'write64BBlock':
        return write64BBlock(handle, device_rw, command, data)

    if command == 'read16BBlock':
        return read16BBlock(handle, device_rw, command, data)

    if command == 'reboot':
        return reboot(handle, device_rw, command, data)

    if command == 'deleteRegionPointer':
        return deleteRegionPointer(handle, device_rw, command, data)

    return {'status': -1, 'message': 'Command not recognized'}


# ==========================================================================
# END - MANUAL - Debug Mode Related Functions
# ==========================================================================


# ==========================================================================
# MANUAL - I2C Master Events
# ==========================================================================

class cI2C_binaryRecord(bintable_class.cBinaryTableRecord):
    i2cEventDict = I2CEvents

    def __init__(self, iDict):
        bintable_class.cBinaryTableRecord.__init__(self, iDict)

        self.setDataModel(register_class.cDataModelArray(self.recordMiniReg, 1,
                                                         {'name': 'Binary Table Record',
                                                          'offset': 0,
                                                          'bit length': 8 * self.recordByteLength}))

        self.event = register_class.cDictDMTerminator(self.recordMiniReg,
                                                      {'name': 'Trigger Event',
                                                       'offset': 0,
                                                       'bit length': 8})

        self.event.setReportDict(self.i2cEventDict)
        self.recordDataModel.addChild(self.event)

        self.length = register_class.cDecimalDMTerminator(self.recordMiniReg,
                                                          {'name': 'Data Length',
                                                           'offset': 8,
                                                           'bit length': 5})
        self.length.setMaxValue(13)
        self.recordDataModel.addChild(self.length)

        targetAddr = register_class.cDecimalDMTerminator(self.recordMiniReg,
                                                        {'name': 'Target Address Index',
                                                         'offset': 13,
                                                         'bit length': 4})

        self.recordDataModel.addChild(targetAddr)

        priority = register_class.cDecimalDMTerminator(self.recordMiniReg,
                                                       {'name': 'Priority',
                                                        'offset': 17,
                                                        'bit length': 2})

        self.recordDataModel.addChild(priority)

        reserved = register_class.cForceSetDMTerminator(self.recordMiniReg, {'name': 'Reserved, Set 0',
                                                                             'offset': 19,
                                                                             'bit length': 5,
                                                                             'force value': int(0),
                                                                             'force display': '0'})

        reserved.hide()
        self.recordDataModel.addChild(reserved)

        data = register_class.cHexDMTerminator(self.recordMiniReg,
                                               {'name': 'Data',
                                                'offset': 24,
                                                'bit length': 8 * (self.recordByteLength - 3)})

        self.recordDataModel.addChild(data)

    def calculateRecordLength(self):
        if (self.length.valueToInt() > 0) and (self.event.valueToInt() != 0):
            return self.length.valueToInt() + 3
        else:
            return 0


# ==========================================================================
# END - MANUAL - I2C Master Events
# ==========================================================================


# ==========================================================================
# MANUAL - Actual Device definitions
# ==========================================================================

def i2cAddrValueFromAddr(strapping):
    return (strapping) & 0x3


def virtual_addr_function(portNum, deviceStrappingValuesListOfDict):
    i2cAddrValue = deviceStrappingValuesListOfDict[indexOfName('Virtual Address', deviceStrappingValuesListOfDict)][
        'value']

    return i2cAddrValue


virtAddrList = ['0',
                '1',
                '2',
                '3',
                '4',
                '5',
                '6',
                '7',

                # addressing for virtual addresses
                ]

i2cAddrList = ['0 (R1/R2 = 0.00-0.18)',
               '1 (R1/R2 = 0.20-0.38)',
               '2 (R1/R2 = 0.40-0.58)',
               '3 (R1/R2 = 0.60-1.00)',
               ]

deviceStrappingListOfDict = [
    {'name': 'I2C_ADDR', 'type': 'pulldown', 'option list': i2cAddrList, 'value function': i2cAddrValueFromAddr},
]

virtualStrappingListOfDict = [
    {'name': 'Virtual Address', 'type': 'pulldown', 'option list': virtAddrList,
     'value function': i2cAddrValueFromAddr},
]

virtualPortsListOfDict = [
    {'name': 'Port1', 'port value': 0, 'addr function': virtual_addr_function},
]

# these must exactly match the preexisting names defined in the tool or they will not be shown
acHeaderListOfFields = [
    "Customer Version",
    "XID",
    #        "Unlock Code", \
    #        "Protection Flags" \
]

# String Table Definitions
# stringTableListofDict = [  ]

ICELAKE_I2C2OVERRIDE = True

zeroOneList = ['0', '1']

# 1-byte selection bitfield if 3 bits in address
# 4-byte selection bitfield if 5 bits in address
numBitsDeviceAddress = 3


def indexOfName(name, deviceStrappingValuesListOfDict):
    for (i, record) in enumerate(deviceStrappingValuesListOfDict):
        if record['name'] == name:
            return i

    return None


# deviceStrappingValuesListOfDict
# list of Dict [{'name' : name, 'value' : value},]
def tps65988_addr_function(portNum, deviceStrappingValuesListOfDict):
    i2cAddrValue = deviceStrappingValuesListOfDict[indexOfName('I2C_ADDR', deviceStrappingValuesListOfDict)]['value']

    assert portNum >= 0
    assert portNum <= 1

    addr = 0
    addr |= i2cAddrValue
    addr |= portNum << 2

    return addr


# calculate I2C1 address from deviceStrappingValuesListOfDict
def tps65988_addr_function_i2c1(portNum, deviceStrappingValuesListOfDict):
    i2cAddrValue = deviceStrappingValuesListOfDict[indexOfName('I2C_ADDR', deviceStrappingValuesListOfDict)]['value']

    assert portNum >= 0
    assert portNum <= 1

    addr = 0
    addr |= i2cAddrValue
    addr |= portNum << 2

    addr |= 0x20

    return addr


# calculate I2C2 address from deviceStrappingValuesListOfDict
def tps65988_addr_function_i2c2(portNum, deviceStrappingValuesListOfDict):
    assert portNum >= 0
    assert portNum <= 1

    if portNum == 0:
        addr = 0x38
    else:
        addr = 0x3F

    return addr


devicePortsListOfDict = [
    {'name': 'Port1', 'port value': 0, 'addr function': tps65988_addr_function,
     'addr function I2C1': tps65988_addr_function_i2c1, 'addr function I2C2': tps65988_addr_function_i2c2,
     'selectionBitmask': 0x1},
    # {'name': 'Port2', 'port value': 1, 'addr function': tps65988_addr_function,
    #  'addr function I2C1': tps65988_addr_function_i2c1, 'addr function I2C2': tps65988_addr_function_i2c2,
    #  'selectionBitmask': 0x2},
]

# ==========================================================================
# END - MANUAL - Actual Device definitions
# ==========================================================================
# ----------------------Automated Section-----------------------------------
# --------------------------------------------------------------------------
# -------------------- REGISTER DEFINITIONS --------------------------------


class cvid_0x0_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Vendor ID',
                                           'address': 0x0,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Vendor ID',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()
        vid = register_class.cHexDMTerminator(self,
                {'name': 'Intel-assigned Thunderbolt Vendor ID',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(vid)
        vid.reference_name = "Intel-assigned Thunderbolt Vendor ID"
        vid.help = "Intel-assigned Thunderbolt Vendor ID, with the most significant 8 bits of the field padded with 0s. OTP boot loader will use TIs Vendor ID by default. This register may be changed during application customization."

        update_function = get_updater_function("vid_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdid_0x1_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Device ID',
                                           'address': 0x1,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Device ID',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()
        did = register_class.cHexDMTerminator(self,
                {'name': 'Device ID',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(did)
        did.reference_name = "Device ID"
        did.help = "Vendor-specific Device ID. Boot loader will use Device ID specific to part (expected to be different per TI part number). This register may be changed during application customization."

        update_function = get_updater_function("did_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cprotover_0x2_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Protocol Version',
                                           'address': 0x2,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Protocol Version',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()
        protover = register_class.cHexDMTerminator(self,
                {'name': 'Protocol Version',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(protover)
        protover.reference_name = "Protocol Version"
        protover.help = "Thunderbolt Protocol Version. Required to return 1 per current specification."

        update_function = get_updater_function("protover_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cmode_0x3_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Mode',
                                           'address': 0x3,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Mode',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()
        mode = register_class.cAsciiDMTerminator(self,
                                                     {'name': 'Mode',
                                                      'offset': 0,
                                                      'bit length': 32})
        self.dataModel.addChild(mode)
        mode.reference_name = "Mode"
        mode.help = "The mode described in 4 ASCII characters."

        update_function = get_updater_function("mode_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctype_0x4_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Type',
                                           'address': 0x4,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Type',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()

        update_function = get_updater_function("type_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cuid_0x5_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'UID',
                                           'address': 0x5,
                                           'byte length': 16,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'UID',
                                                         'offset': 0,
                                                         'bit length': 128})
        uid = register_class.cHexDMTerminator(self,
                {'name': 'User ID',
                'offset': 0,
                'bit length': 128})
        self.dataModel.addChild(uid)
        uid.reference_name = "User ID"
        uid.help = "128-bit unique ID (unique for each PD Controller Port)"

        update_function = get_updater_function("uid_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ccustuse_0x6_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Customer Use',
                                           'address': 0x6,
                                           'byte length': 8,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Customer Use',
                                                         'offset': 0,
                                                         'bit length': 64})
        customeruse = register_class.cHexDMTerminator(self,
                {'name': 'Customer Use Word 1',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(customeruse)
        customeruse.reference_name = "Customer Use Word 1"
        customeruse.help = "These 8 bytes are allocated for customer use as needed. The PD controller does not use this register. This register may be changed during application customization."
        customeruse = register_class.cHexDMTerminator(self,
                {'name': 'Customer Use Word 2',
                'offset': 32,
                'bit length': 32})
        self.dataModel.addChild(customeruse)
        customeruse.reference_name = "Customer Use Word 2"
        customeruse.help = "These 8 bytes are allocated for customer use as needed. The PD controller does not use this register. This register may be changed during application customization."

        update_function = get_updater_function("custuse_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ccmd1_0x8_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Command Register for I2C1',
                                           'address': 0x8,
                                           'byte length': 4,
                                           'permission': 'DRW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Command Register for I2C1',
                                                         'offset': 0,
                                                         'bit length': 32})
        cmd1reg = register_class.cHexDMTerminator(self,
                {'name': 'Command',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(cmd1reg)
        cmd1reg.reference_name = "Command"
        cmd1reg.help = "Command register for the primary command interface. Cleared to 0x0000_0000 by the PD Controller during initialization and after successful processing of every command. If an unrecognized command is written to this register, it is replaced by a 4CC value of !CMD."

        update_function = get_updater_function("cmd1_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdata1_0x9_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Data Register for CMD1',
                                           'address': 0x9,
                                           'byte length': 64,
                                           'permission': 'DRW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Register for CMD1',
                                                         'offset': 0,
                                                         'bit length': 512})
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 1 (Least Significant)',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 1 (Least Significant)"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 2',
                'offset': 32,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 2"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 3',
                'offset': 64,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 3"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 4',
                'offset': 96,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 4"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 5',
                'offset': 128,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 5"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 6',
                'offset': 160,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 6"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 7',
                'offset': 192,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 7"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 8',
                'offset': 224,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 8"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 9',
                'offset': 256,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 9"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 10',
                'offset': 288,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 10"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 11',
                'offset': 320,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 11"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 12',
                'offset': 352,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 12"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 13',
                'offset': 384,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 13"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 14',
                'offset': 416,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 14"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 15',
                'offset': 448,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 15"
        data1reg.help = "Data register for the primary command interface (CMD1)."
        data1reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 16',
                'offset': 480,
                'bit length': 32})
        self.dataModel.addChild(data1reg)
        data1reg.reference_name = "Word 16"
        data1reg.help = "Data register for the primary command interface (CMD1)."

        update_function = get_updater_function("data1_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdevicecapabilities_0xd_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Device Capabilities',
                                           'address': 0xd,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Device Capabilities',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()
        powerrole = register_class.cListDMTerminator(self,
                {'name': 'Power Role',
                    'offset': 0,
                    'bit length': 2})
        powerrole.setReportList(['DRP', 'Source only', 'Sink only', 'SourceOnly'])
        self.dataModel.addChild(powerrole)
        powerrole.reference_name = "Power Role"
        powerrole.help = "Power Role capability."
        powerrole.setMaxValue(3)
        usbpdcapability = register_class.cListDMTerminator(self,
                {'name': 'USB PD Capability',
                    'offset': 2,
                    'bit length': 1})
        usbpdcapability.setReportList(['Supported', 'Not supported'])
        self.dataModel.addChild(usbpdcapability)
        usbpdcapability.reference_name = "USB PD Capability"
        usbpdcapability.help = "USB Power Delivery capability."
        usbpdcapability.setMaxValue(1)
        tbtpresent = register_class.cListDMTerminator(self,
                {'name': 'TBT Present',
                    'offset': 3,
                    'bit length': 1})
        tbtpresent.setReportList(['Not supported', 'Supported'])
        self.dataModel.addChild(tbtpresent)
        tbtpresent.reference_name = "TBT Present"
        tbtpresent.help = "Thunderboth support capability."
        tbtpresent.setMaxValue(1)
        singleport = register_class.cListDMTerminator(self,
                {'name': 'Single Port',
                    'offset': 4,
                    'bit length': 1})
        singleport.setReportList(['Dual port capable', 'One port capable'])
        self.dataModel.addChild(singleport)
        singleport.reference_name = "Single Port"
        singleport.help = "Number of USB ports supported."
        singleport.setMaxValue(1)
        bc1p2supported = register_class.cListDMTerminator(self,
                {'name': 'BC1p2 Supported',
                    'offset': 5,
                    'bit length': 2})
        bc1p2supported.setReportList(['Not supported', 'Only source supported', 'Only sink supported', 'Source and sink supported'])
        self.dataModel.addChild(bc1p2supported)
        bc1p2supported.reference_name = "BC1p2 Supported"
        bc1p2supported.help = "BC 1.2 support capability."
        bc1p2supported.setMaxValue(3)
        i2c3mlevel = register_class.cListDMTerminator(self,
                {'name': 'I2C3m Level',
                    'offset': 7,
                    'bit length': 1})
        i2c3mlevel.setReportList(['1.8V or 3.3V', '3.3V'])
        self.dataModel.addChild(i2c3mlevel)
        i2c3mlevel.reference_name = "I2C3m Level"
        i2c3mlevel.help = "Pull-up voltage required for I2C3m port."
        i2c3mlevel.setMaxValue(1)

        update_function = get_updater_function("devicecapabilities_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cversion_0xf_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Version',
                                           'address': 0xf,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Version',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()
        version = register_class.cHexDMTerminator(self,
                {'name': 'Version',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(version)
        version.reference_name = "Version"
        version.help = "Boot Firmware Version"

        update_function = get_updater_function("version_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ccmd2_0x10_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Command Register for I2C2',
                                           'address': 0x10,
                                           'byte length': 4,
                                           'permission': 'DRW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Command Register for I2C2',
                                                         'offset': 0,
                                                         'bit length': 32})
        cmd2reg = register_class.cHexDMTerminator(self,
                {'name': 'Command',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(cmd2reg)
        cmd2reg.reference_name = "Command"
        cmd2reg.help = "Command register for the secondary command interface. Shall be cleared to 0x00000000 by PD Controller during initialization and after successful processing of every command. If an unrecognized command is written to this register it shall be replaced by a 4CC value of !CMD."

        update_function = get_updater_function("cmd2_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdata2_0x11_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Data Register for CMD2',
                                           'address': 0x11,
                                           'byte length': 64,
                                           'permission': 'DRW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Register for CMD2',
                                                         'offset': 0,
                                                         'bit length': 512})
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 1 (Least Significant)',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 1 (Least Significant)"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 2',
                'offset': 32,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 2"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 3',
                'offset': 64,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 3"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 4',
                'offset': 96,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 4"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 5',
                'offset': 128,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 5"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 6',
                'offset': 160,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 6"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 7',
                'offset': 192,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 7"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 8',
                'offset': 224,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 8"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 9',
                'offset': 256,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 9"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 10',
                'offset': 288,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 10"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 11',
                'offset': 320,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 11"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 12',
                'offset': 352,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 12"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 13',
                'offset': 384,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 13"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 14',
                'offset': 416,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 14"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 15',
                'offset': 448,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 15"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."
        data2reg = register_class.cHexDMTerminator(self,
                {'name': 'Word 16',
                'offset': 480,
                'bit length': 32})
        self.dataModel.addChild(data2reg)
        data2reg.reference_name = "Word 16"
        data2reg.help = "Data register used for the secondary command interface (CMD2)."

        update_function = get_updater_function("data2_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cextcmd_0x12_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'External Command',
                                           'address': 0x12,
                                           'byte length': 4,
                                           'permission': 'DRW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'External Command',
                                                         'offset': 0,
                                                         'bit length': 32})

        update_function = get_updater_function("extcmd_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cextdata_0x13_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'External Data',
                                           'address': 0x13,
                                           'byte length': 64,
                                           'permission': 'DRW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'External Data',
                                                         'offset': 0,
                                                         'bit length': 512})

        update_function = get_updater_function("extdata_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cintevent1_0x14_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Interrupt Event for I2C1',
                                           'address': 0x14,
                                           'byte length': 11,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Interrupt Event for I2C1',
                                                         'offset': 0,
                                                         'bit length': 88})

        InterruptEventforI2C1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Interrupt Event for I2C1',
                                                         'offset': 1,
                                                         'bit length': 80})
        self.dataModel.addChild(InterruptEventforI2C1_dm)

        pdhardreset = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Hardreset',
                'offset': 0,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(pdhardreset)
        pdhardreset.reference_name = "PD Hardreset"
        pdhardreset.help = "A PD Hard Reset has been performed. See PD_STATUS.HardResetDetails for more information."

        pluginsertorremoval = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Insert or Removal',
                'offset': 2,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(pluginsertorremoval)
        pluginsertorremoval.reference_name = "Plug Insert or Removal"
        pluginsertorremoval.help = "USB Plug Status has Changed. See Status register for more plug details."

        prswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Complete',
                'offset': 3,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(prswapcomplete)
        prswapcomplete.reference_name = "Power Swap Complete"
        prswapcomplete.help = "A Power role swap has completed. See STATUS register (0x1A) and PD_STATUS register (0x40) for port state."

        drswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Complete',
                'offset': 4,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(drswapcomplete)
        drswapcomplete.reference_name = "Data Swap Complete"
        drswapcomplete.help = "A Data Role swap has completed. See STATUS register (0x1A) and PD_STATUS register (0x40) for port state."

        frswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'FR Swap Complete',
                'offset': 5,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(frswapcomplete)
        frswapcomplete.reference_name = "FR Swap Complete"
        frswapcomplete.help = "A Fast Role swap has completed."

        sourcecapupdated = register_class.cBooleanDMTerminator(self,
                {'name': 'Source Cap Updated',
                'offset': 6,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(sourcecapupdated)
        sourcecapupdated.reference_name = "Source Cap Updated"
        sourcecapupdated.help = "The Source Capabiliities has been updated based on some automatic behavior configured by or requested by the host. The next Source Capabilities PD message transmitted will contain the updated values. This could get asserted when GLOBAL_SYSTEM_CONFIG.EnableSPM is asserted or when the 4CC Task UCSI is used to implement SET_POWER_LEVEL.#ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)# UCSI is not applicable in Blackjack/Pontoon #/ph#"

        overcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Overcurrent',
                'offset': 8,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(overcurrent)
        overcurrent.reference_name = "Overcurrent"
        overcurrent.help = "#ph ishcondition=(legacy=filter10) or (legacy=filter11)#Set whenever an Overcurrent field (VBUS or VCONN) in the POWER_PATH_STATUS register (0x26) changes.#/ph# #ph ishcondition=(legacy=filter22) or (legacy=filter23)#Set whenever an AverageILIM field in INT_DCDC_STATUS register(0x91) transitions from 0 to 1.  This interrupt applies on PortA with internal DCDC1 as VBUS source.  This interrupt is not valid for the port that uses an external VBUS power source.#/ph#"

        attentionreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Attention Received',
                'offset': 9,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(attentionreceived)
        attentionreceived.reference_name = "Attention Received"
        attentionreceived.help = "An Attention Message has been received. See RX_ATTENTION_VDM register (0x4E) for details."

        vdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Received',
                'offset': 10,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(vdmreceived)
        vdmreceived.reference_name = "VDM Received"
        vdmreceived.help = "A Vendor Defined Message has been received. See RX_OTHER_VDM register (0x4F) for details."

        newcontractascons = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Consumer',
                'offset': 11,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(newcontractascons)
        newcontractascons.reference_name = "New Contract as Consumer"
        newcontractascons.help = "Far-end source has accepted an RDO sent by the PD Controller as a Sink. See ACTIVE_CONTRACT_PDO register (0x34) and ACTIVE_CONTRACT_RDO register (0x35) for details."

        newcontractasprov = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Provider',
                'offset': 12,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(newcontractasprov)
        newcontractasprov.reference_name = "New Contract as Provider"
        newcontractasprov.help = "An RDO from the far-end device has been accepted and the PD Controller is a Source. This is asserted after the PS_RDY message has been sent. See ACTIVE_CONTRACT_PDO register (0x34) and ACTIVE_CONTRACT_RDO register (0x35) for details."

        sourcecapmsgrcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Source Capabalities Message Received',
                'offset': 13,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(sourcecapmsgrcvd)
        sourcecapmsgrcvd.reference_name = "Source Capabalities Message Received"
        sourcecapmsgrcvd.help = "This is asserted when a Source Capabilities message is received from the Port Partner."

        sinkcapmsgreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Sink Cap Message Received',
                'offset': 14,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(sinkcapmsgreceived)
        sinkcapmsgreceived.reference_name = "Sink Cap Message Received"

        prswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Requested',
                'offset': 16,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(prswaprequested)
        prswaprequested.reference_name = "Power Swap Requested"
        prswaprequested.help = "A PR swap was requested by the Port Partner."

        drswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Requested',
                'offset': 17,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(drswaprequested)
        drswaprequested.reference_name = "Data Swap Requested"
        drswaprequested.help = "A DR swap was requested by the Port Partner."

        usbhostpresent = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host Present',
                'offset': 19,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(usbhostpresent)
        usbhostpresent.reference_name = "USB Host Present"
        usbhostpresent.help = "Set when STATUS.UsbHostPresent transitions to 11b."

        usbhostpresentnolonger = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host No Longer Present',
                'offset': 20,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(usbhostpresentnolonger)
        usbhostpresentnolonger.reference_name = "USB Host No Longer Present"
        usbhostpresentnolonger.help = "Set when STATUS.UsbHostPresent transitions to anything other than 11b."

        ppswitchchanged = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Path Switch Changed',
                'offset': 22,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(ppswitchchanged)
        ppswitchchanged.reference_name = "Power Path Switch Changed"
        ppswitchchanged.help = "Set whenever contents of POWER_PATH_STATUS register (0x26) changes."

        powerstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Status Updated',
                'offset': 23,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(powerstatusupdate)
        powerstatusupdate.reference_name = "Power Status Updated"
        powerstatusupdate.help = "Set whenever contents of POWER_STATUS register (0x3F) change."

        datastatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Status Updated',
                'offset': 24,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(datastatusupdate)
        datastatusupdate.reference_name = "Data Status Updated"
        datastatusupdate.help = "Set whenever contents of DATA_STATUS register (0x5F) change."

        statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Status Updated',
                'offset': 25,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(statusupdate)
        statusupdate.reference_name = "Status Updated"
        statusupdate.help = "Set whenever contents of STATUS register (0x1A) change."

        pdstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Status Updated',
                'offset': 26,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(pdstatusupdate)
        pdstatusupdate.reference_name = "PD Status Updated"
        pdstatusupdate.help = "Set whenever contents of PD_STATUS register (0x40) change."

        cmd1complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD1 Complete',
                'offset': 29,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(cmd1complete)
        cmd1complete.reference_name = "CMD1 Complete"
        cmd1complete.help = "Set whenever a non-zero value in CMD1 register is set to zero or !CMD."

        cmd2complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD2 Complete',
                'offset': 30,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(cmd2complete)
        cmd2complete.reference_name = "CMD2 Complete"
        cmd2complete.help = "Set whenever a non-zero value in CMD2 register is set to zero or !CMD."

        errordeviceincompatible = register_class.cBooleanDMTerminator(self,
                {'name': 'Device Incompatible Error',
                'offset': 31,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(errordeviceincompatible)
        errordeviceincompatible.reference_name = "Device Incompatible Error"
        errordeviceincompatible.help = "When set to 1, a USB PD device with an incompatible specification version was connected. Or the partner device is not USB PD capable."

        errorcannotprovidevoltageorcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Cannot Provide Voltage or Current Error',
                'offset': 32,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(errorcannotprovidevoltageorcurrent)
        errorcannotprovidevoltageorcurrent.reference_name = "Cannot Provide Voltage or Current Error"
        errorcannotprovidevoltageorcurrent.help = "The USB PD Source cannot provide an acceptable voltage and/or current. A Reject message was sent to the Sink or a Capability Mismatch was received from the Sink."

        errorcanprovidevoltageorcurrentlater = register_class.cBooleanDMTerminator(self,
                {'name': 'Can Provide Voltage or Current Later Error',
                'offset': 33,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(errorcanprovidevoltageorcurrentlater)
        errorcanprovidevoltageorcurrentlater.reference_name = "Can Provide Voltage or Current Later Error"
        errorcanprovidevoltageorcurrentlater.help = "The USB PD Source can provide acceptable voltage and current, but not at the present time. A wait message was sent or received."

        errorpowereventoccurred = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Event Occurred Error',
                'offset': 34,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(errorpowereventoccurred)
        errorpowereventoccurred.reference_name = "Power Event Occurred Error"
        errorpowereventoccurred.help = "An OVP, or ILIM event occurred on VBUS. Or a TSD event occurred.#filter_filter21# ILIM does not cause PORT to enter ErrorRecovery if the power path is DCDC.  #/ph#"

        errormissinggetcapmessage = register_class.cBooleanDMTerminator(self,
                {'name': 'Missing Get Capabalities Message Error',
                'offset': 35,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(errormissinggetcapmessage)
        errormissinggetcapmessage.reference_name = "Missing Get Capabalities Message Error"
        errormissinggetcapmessage.help = "The partner device did not respond to the Get_Sink_Cap or Get_Source_Cap message that was sent."

        errorprotocolerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Protocol Error',
                'offset': 37,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(errorprotocolerror)
        errorprotocolerror.reference_name = "Protocol Error"
        errorprotocolerror.help = "An unexpected message was received from the partner device."

        errormessagedata = register_class.cBooleanDMTerminator(self,
                {'name': 'Message Data Error',
                'offset': 38,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(errormessagedata)
        errormessagedata.reference_name = "Message Data Error"
        errormessagedata.help = "An erroneous message was received."

        snktransitioncomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Sink Transition Completed',
                'offset': 41,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(snktransitioncomplete)
        snktransitioncomplete.reference_name = "Sink Transition Completed"
        snktransitioncomplete.help = "This event only occurs when in source mode (PD_STATUS.PresentPDRole = 1b). It occurs tSrcTransition (ms) after sending an Accept message to a Request message, just before sending the PS_RDY message."

        plugearlynotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Early Notification',
                'offset': 42,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(plugearlynotification)
        plugearlynotification.reference_name = "Plug Early Notification"
        plugearlynotification.help = "A connection has been detected but not debounced."

        prochotnotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Prochot Notification',
                'offset': 43,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(prochotnotification)
        prochotnotification.reference_name = "Prochot Notification"
        prochotnotification.help = "A prochot event has occurred. When this bit is cleared, the prochot GPIO event (ProcHot_N_Event) will be de-asserted."

        errorunabletosource = register_class.cBooleanDMTerminator(self,
                {'name': 'Unable to Source Error',
                'offset': 45,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(errorunabletosource)
        errorunabletosource.reference_name = "Unable to Source Error"
        errorunabletosource.help = "The Source was unable to increase the voltage to the negotiated voltage of the contract."

        amentryfail = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entry Fail',
                'offset': 47,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(amentryfail)
        amentryfail.reference_name = "AM Entry Fail"
        amentryfail.help = "Set when any alternate mode attempted and failed."

        amentered = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entered',
                'offset': 48,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(amentered)
        amentered.reference_name = "AM Entered"
        amentered.help = "Set when any alternate mode is entered."

        discovermodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Discover Mode Completed',
                'offset': 50,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(discovermodecomplete)
        discovermodecomplete.reference_name = "Discover Mode Completed"
        discovermodecomplete.help = "Set when the Discover Modes process has completed."

        exitmodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Exit Mode Completed',
                'offset': 51,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(exitmodecomplete)
        exitmodecomplete.reference_name = "Exit Mode Completed"
        exitmodecomplete.help = "Set when the Exit Mode process is complete."

        dataresetstart = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Reset Start',
                'offset': 52,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(dataresetstart)
        dataresetstart.reference_name = "Data Reset Start"
        dataresetstart.help = "Set when the Data Reset process has started. The system is expected to handle the data-line terminations properly."

        usbstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Status Update',
                'offset': 53,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(usbstatusupdate)
        usbstatusupdate.reference_name = "USB Status Update"
        usbstatusupdate.help = "USB Status Update has occurred"

        connectionmanagerupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Connection Manager Update',
                'offset': 54,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(connectionmanagerupdate)
        connectionmanagerupdate.reference_name = "Connection Manager Update"
        connectionmanagerupdate.help = "Connection Manager Update has changed"

        usersvidmodeentered = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Entered',
                'offset': 55,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(usersvidmodeentered)
        usersvidmodeentered.reference_name = "USVID Mode Entered"
        usersvidmodeentered.help = "A User VID alternate mode has been entered."

        usersvidmodeexited = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Exited',
                'offset': 56,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(usersvidmodeexited)
        usersvidmodeexited.reference_name = "USVID Mode Exited"
        usersvidmodeexited.help = "A User VID alternate mode has been exited."

        usersvidattnvdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Attention VDM Received',
                'offset': 57,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(usersvidattnvdmreceived)
        usersvidattnvdmreceived.reference_name = "USVID Attention VDM Received"
        usersvidattnvdmreceived.help = "A User VID SVDM Attention has been received."

        usersvidothervdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Other VDM Received',
                'offset': 58,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(usersvidothervdmreceived)
        usersvidothervdmreceived.reference_name = "USVID Other VDM Received"
        usersvidothervdmreceived.help = "A User VID SVDM non-Attention or unstructured VDM has been received."

        extdcdceventreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Event Received',
                'offset': 60,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(extdcdceventreceived)
        extdcdceventreceived.reference_name = "External DCDC Event Received"
        extdcdceventreceived.help = "External DCDC Event received"

        dpsidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'DP SID Status Updated',
                'offset': 61,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(dpsidstatusupdate)
        dpsidstatusupdate.reference_name = "DP SID Status Updated"
        dpsidstatusupdate.help = "Asserted when the contents of DP_SID_STATUS register (0x58) change."

        intelvidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Intel VID Status Updated',
                'offset': 62,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(intelvidstatusupdate)
        intelvidstatusupdate.reference_name = "Intel VID Status Updated"
        intelvidstatusupdate.help = "Asserted when the contents of INTEL_VID_STATUS register (0x59) change."

        pd3statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD3 Status Updated',
                'offset': 63,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(pd3statusupdate)
        pd3statusupdate.reference_name = "PD3 Status Updated"
        pd3statusupdate.help = "Asserted when the contents of PD3_STATUS register (0x41) change."

        txmembufferempty = register_class.cBooleanDMTerminator(self,
                {'name': 'TX Memory Buffer Empty',
                'offset': 64,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(txmembufferempty)
        txmembufferempty.reference_name = "TX Memory Buffer Empty"
        txmembufferempty.help = "Transmit memory buffer empty."

        mbrdbufferready = register_class.cBooleanDMTerminator(self,
                {'name': 'MBRD Buffer Ready',
                'offset': 65,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(mbrdbufferready)
        mbrdbufferready.reference_name = "MBRD Buffer Ready"
        mbrdbufferready.help = "Receive memory buffer full and ready to be read using the MBRd command."

        eventsocacktimeout = register_class.cBooleanDMTerminator(self,
                {'name': 'Event SOC ACK Timeout',
                'offset': 69,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(eventsocacktimeout)
        eventsocacktimeout.reference_name = "Event SOC ACK Timeout"
        eventsocacktimeout.help = "The SoC has waited too long to process an alert."

        notsupportedreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Notsupported Received',
                'offset': 70,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(notsupportedreceived)
        notsupportedreceived.reference_name = "Notsupported Received"
        notsupportedreceived.help = "A NOT_SUPPORTED USB PD message was received. The EC should clear this bit before using a 4CC task that could result in receiving a Not_Supported message."

        crossbarerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Crossbar Error',
                'offset': 71,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(crossbarerror)
        crossbarerror.reference_name = "Crossbar Error"
        crossbarerror.help = "An error occured configuring the crossbar mux. The configuration is done using the I2C3m port."

        mailboxupdated = register_class.cBooleanDMTerminator(self,
                {'name': 'Mailbox Updated',
                'offset': 72,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(mailboxupdated)
        mailboxupdated.reference_name = "Mailbox Updated"

        frssignalreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'FRS Signal Received',
                'offset': 75,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(frssignalreceived)
        frssignalreceived.reference_name = "FRS Signal Received"
        frssignalreceived.help = "FRS swap signaling received."

        chunkresponsereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Response Received',
                'offset': 76,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(chunkresponsereceived)
        chunkresponsereceived.reference_name = "Chunk Response Received"
        chunkresponsereceived.help = "Chunk Response message received."

        chunkrequestreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Request Received',
                'offset': 77,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(chunkrequestreceived)
        chunkrequestreceived.reference_name = "Chunk Request Received"
        chunkrequestreceived.help = "Chunk Request message received."

        alertmessagereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Alert Message Received',
                'offset': 78,
                'bit length': 1})
        InterruptEventforI2C1_dm.addChild(alertmessagereceived)
        alertmessagereceived.reference_name = "Alert Message Received"
        alertmessagereceived.help = "Alert Message received, see RX_ADO register."

        CommonInterruptEventforI2C1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Common Interrupt Event for I2C1',
                                                         'offset': 80,
                                                         'bit length': 83})
        self.dataModel.addChild(CommonInterruptEventforI2C1_dm)

        patchloaded = register_class.cBooleanDMTerminator(self,
                {'name': 'Patch Loaded',
                'offset': 0,
                'bit length': 1})
        CommonInterruptEventforI2C1_dm.addChild(patchloaded)
        patchloaded.reference_name = "Patch Loaded"
        patchloaded.help = "Patch was loaded to the device."

        readyforpatch = register_class.cBooleanDMTerminator(self,
                {'name': 'Ready for Patch',
                'offset': 1,
                'bit length': 1})
        CommonInterruptEventforI2C1_dm.addChild(readyforpatch)
        readyforpatch.reference_name = "Ready for Patch"
        readyforpatch.help = "Device ready for a patch bundle from the host."

        i2ccontrollernacked = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Controller NACked',
                'offset': 2,
                'bit length': 1})
        CommonInterruptEventforI2C1_dm.addChild(i2ccontrollernacked)
        i2ccontrollernacked.reference_name = "I2C Controller NACked"
        i2ccontrollernacked.help = "A transaction on the I2C Controller was NACKed."

        update_function = get_updater_function("intevent1_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cintevent2_0x15_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Interrupt Event for I2C2',
                                           'address': 0x15,
                                           'byte length': 11,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Interrupt Event for I2C2',
                                                         'offset': 0,
                                                         'bit length': 88})

        InterruptEventforI2C2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Interrupt Event for I2C2',
                                                         'offset': 1,
                                                         'bit length': 80})
        self.dataModel.addChild(InterruptEventforI2C2_dm)

        pdhardreset = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Hardreset',
                'offset': 0,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(pdhardreset)
        pdhardreset.reference_name = "PD Hardreset"

        pluginsertorremoval = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Insert or Removal',
                'offset': 2,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(pluginsertorremoval)
        pluginsertorremoval.reference_name = "Plug Insert or Removal"

        prswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Complete',
                'offset': 3,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(prswapcomplete)
        prswapcomplete.reference_name = "Power Swap Complete"

        drswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Complete',
                'offset': 4,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(drswapcomplete)
        drswapcomplete.reference_name = "Data Swap Complete"

        frswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'FR Swap Complete',
                'offset': 5,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(frswapcomplete)
        frswapcomplete.reference_name = "FR Swap Complete"

        overcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Overcurrent',
                'offset': 8,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(overcurrent)
        overcurrent.reference_name = "Overcurrent"

        attentionreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Attention Received',
                'offset': 9,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(attentionreceived)
        attentionreceived.reference_name = "Attention Received"

        vdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Received',
                'offset': 10,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(vdmreceived)
        vdmreceived.reference_name = "VDM Received"

        newcontractascons = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Consumer',
                'offset': 11,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(newcontractascons)
        newcontractascons.reference_name = "New Contract as Consumer"

        newcontractasprov = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Provider',
                'offset': 12,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(newcontractasprov)
        newcontractasprov.reference_name = "New Contract as Provider"

        sourcecapmsgrcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Source Cap Message Received',
                'offset': 13,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(sourcecapmsgrcvd)
        sourcecapmsgrcvd.reference_name = "Source Cap Message Received"

        sinkcapmsgreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Sink Cap Message Received',
                'offset': 14,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(sinkcapmsgreceived)
        sinkcapmsgreceived.reference_name = "Sink Cap Message Received"

        prswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Requested',
                'offset': 16,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(prswaprequested)
        prswaprequested.reference_name = "Power Swap Requested"

        drswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Requested',
                'offset': 17,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(drswaprequested)
        drswaprequested.reference_name = "Data Swap Requested"

        usbhostpresent = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host Present',
                'offset': 19,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(usbhostpresent)
        usbhostpresent.reference_name = "USB Host Present"

        usbhostpresentnolonger = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host No Longer Present',
                'offset': 20,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(usbhostpresentnolonger)
        usbhostpresentnolonger.reference_name = "USB Host No Longer Present"

        ppswitchchanged = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Path Switch Changed',
                'offset': 22,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(ppswitchchanged)
        ppswitchchanged.reference_name = "Power Path Switch Changed"

        powerstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Status Updated',
                'offset': 23,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(powerstatusupdate)
        powerstatusupdate.reference_name = "Power Status Updated"

        datastatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Status Updated',
                'offset': 24,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(datastatusupdate)
        datastatusupdate.reference_name = "Data Status Updated"

        statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Status Updated',
                'offset': 25,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(statusupdate)
        statusupdate.reference_name = "Status Updated"

        pdstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Status Updated',
                'offset': 26,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(pdstatusupdate)
        pdstatusupdate.reference_name = "PD Status Updated"

        cmd1complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD1 Complete',
                'offset': 29,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(cmd1complete)
        cmd1complete.reference_name = "CMD1 Complete"

        cmd2complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD2 Complete',
                'offset': 30,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(cmd2complete)
        cmd2complete.reference_name = "CMD2 Complete"

        errordeviceincompatible = register_class.cBooleanDMTerminator(self,
                {'name': 'Device Incompatible Error',
                'offset': 31,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(errordeviceincompatible)
        errordeviceincompatible.reference_name = "Device Incompatible Error"

        errorcannotprovidevoltageorcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Cannot Provide Voltage or Current Error',
                'offset': 32,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(errorcannotprovidevoltageorcurrent)
        errorcannotprovidevoltageorcurrent.reference_name = "Cannot Provide Voltage or Current Error"

        errorcanprovidevoltageorcurrentlater = register_class.cBooleanDMTerminator(self,
                {'name': 'Can Provide Voltage or Current Later Error',
                'offset': 33,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(errorcanprovidevoltageorcurrentlater)
        errorcanprovidevoltageorcurrentlater.reference_name = "Can Provide Voltage or Current Later Error"

        errorpowereventoccurred = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Event Occurred Error',
                'offset': 34,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(errorpowereventoccurred)
        errorpowereventoccurred.reference_name = "Power Event Occurred Error"

        errormissinggetcapmessage = register_class.cBooleanDMTerminator(self,
                {'name': 'Missing Get Capabalities Message Error',
                'offset': 35,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(errormissinggetcapmessage)
        errormissinggetcapmessage.reference_name = "Missing Get Capabalities Message Error"

        errorprotocolerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Protocol Error',
                'offset': 37,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(errorprotocolerror)
        errorprotocolerror.reference_name = "Protocol Error"

        errormessagedata = register_class.cBooleanDMTerminator(self,
                {'name': 'Message Data Error',
                'offset': 38,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(errormessagedata)
        errormessagedata.reference_name = "Message Data Error"

        errordischargefailed = register_class.cBooleanDMTerminator(self,
                {'name': 'Discharge Failed Error',
                'offset': 40,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(errordischargefailed)
        errordischargefailed.reference_name = "Discharge Failed Error"

        snktransitioncomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Sink Transition Completed',
                'offset': 41,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(snktransitioncomplete)
        snktransitioncomplete.reference_name = "Sink Transition Completed"

        plugearlynotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Early Notification',
                'offset': 42,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(plugearlynotification)
        plugearlynotification.reference_name = "Plug Early Notification"

        prochotnotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Prochot Notofication',
                'offset': 43,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(prochotnotification)
        prochotnotification.reference_name = "Prochot Notofication"

        errorunabletosource = register_class.cBooleanDMTerminator(self,
                {'name': 'Unable to Source Error',
                'offset': 45,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(errorunabletosource)
        errorunabletosource.reference_name = "Unable to Source Error"

        amentryfail = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entry Fail',
                'offset': 47,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(amentryfail)
        amentryfail.reference_name = "AM Entry Fail"

        amentered = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entered',
                'offset': 48,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(amentered)
        amentered.reference_name = "AM Entered"

        vdmmsgsent = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Message Sent',
                'offset': 49,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(vdmmsgsent)
        vdmmsgsent.reference_name = "VDM Message Sent"

        discovermodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Discover mode Completed',
                'offset': 50,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(discovermodecomplete)
        discovermodecomplete.reference_name = "Discover mode Completed"

        exitmodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Exit mode Completed',
                'offset': 51,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(exitmodecomplete)
        exitmodecomplete.reference_name = "Exit mode Completed"

        dataresetstart = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Reset Start',
                'offset': 52,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(dataresetstart)
        dataresetstart.reference_name = "Data Reset Start"

        usbstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Status Update',
                'offset': 53,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(usbstatusupdate)
        usbstatusupdate.reference_name = "USB Status Update"
        usbstatusupdate.help = "USB Status Update has occurred"

        connectionmanagerupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Connection Manager Update',
                'offset': 54,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(connectionmanagerupdate)
        connectionmanagerupdate.reference_name = "Connection Manager Update"
        connectionmanagerupdate.help = "Connection Manager Update has changed"

        usersvidmodeentered = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Entered',
                'offset': 55,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(usersvidmodeentered)
        usersvidmodeentered.reference_name = "USVID Mode Entered"

        usersvidmodeexited = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Exited',
                'offset': 56,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(usersvidmodeexited)
        usersvidmodeexited.reference_name = "USVID Mode Exited"

        usersvidattnvdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Attention VDM Received',
                'offset': 57,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(usersvidattnvdmreceived)
        usersvidattnvdmreceived.reference_name = "USVID Attention VDM Received"

        usersvidothervdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Other VDM Received',
                'offset': 58,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(usersvidothervdmreceived)
        usersvidothervdmreceived.reference_name = "USVID Other VDM Received"

        extdcdceventreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Event Received',
                'offset': 60,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(extdcdceventreceived)
        extdcdceventreceived.reference_name = "External DCDC Event Received"
        extdcdceventreceived.help = "External DCDC Event received"

        dpsidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'DP SID Status Updated',
                'offset': 61,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(dpsidstatusupdate)
        dpsidstatusupdate.reference_name = "DP SID Status Updated"

        intelvidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Intel VID Status Updated',
                'offset': 62,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(intelvidstatusupdate)
        intelvidstatusupdate.reference_name = "Intel VID Status Updated"

        pd3statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD3 Status Updated',
                'offset': 63,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(pd3statusupdate)
        pd3statusupdate.reference_name = "PD3 Status Updated"

        txmembufferempty = register_class.cBooleanDMTerminator(self,
                {'name': 'TX Memory Buffer Empty',
                'offset': 64,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(txmembufferempty)
        txmembufferempty.reference_name = "TX Memory Buffer Empty"

        mbrdbufferready = register_class.cBooleanDMTerminator(self,
                {'name': 'MBRD Buffer Ready',
                'offset': 65,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(mbrdbufferready)
        mbrdbufferready.reference_name = "MBRD Buffer Ready"

        dellvdmarrive = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Arrived',
                'offset': 66,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(dellvdmarrive)
        dellvdmarrive.reference_name = "CustomerD VDM Arrived"

        vdmenteredmode = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Entered Mode',
                'offset': 67,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(vdmenteredmode)
        vdmenteredmode.reference_name = "VDM Entered Mode"

        dellvdmsent = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Sent',
                'offset': 68,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(dellvdmsent)
        dellvdmsent.reference_name = "CustomerD VDM Sent"

        eventsocacktimeout = register_class.cBooleanDMTerminator(self,
                {'name': 'Event SOC ACK Timeout',
                'offset': 69,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(eventsocacktimeout)
        eventsocacktimeout.reference_name = "Event SOC ACK Timeout"

        notsupportedreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Notsupported Received',
                'offset': 70,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(notsupportedreceived)
        notsupportedreceived.reference_name = "Notsupported Received"

        crossbarerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Crossbar Error',
                'offset': 71,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(crossbarerror)
        crossbarerror.reference_name = "Crossbar Error"

        mailboxupdated = register_class.cBooleanDMTerminator(self,
                {'name': 'Mailbox Updated',
                'offset': 72,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(mailboxupdated)
        mailboxupdated.reference_name = "Mailbox Updated"

        i2cexternalppstatus = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Communication error with external PP',
                'offset': 73,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(i2cexternalppstatus)
        i2cexternalppstatus.reference_name = "I2C Communication error with external PP"

        externaldcdcstatuschange = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Status Change',
                'offset': 74,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(externaldcdcstatuschange)
        externaldcdcstatuschange.reference_name = "External DCDC Status Change"

        frssignalreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'FRS Signal Received',
                'offset': 75,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(frssignalreceived)
        frssignalreceived.reference_name = "FRS Signal Received"

        chunkresponsereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Response Received',
                'offset': 76,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(chunkresponsereceived)
        chunkresponsereceived.reference_name = "Chunk Response Received"

        chunkrequestreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Request Received',
                'offset': 77,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(chunkrequestreceived)
        chunkrequestreceived.reference_name = "Chunk Request Received"

        alertmessagereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Alert Message Received',
                'offset': 78,
                'bit length': 1})
        InterruptEventforI2C2_dm.addChild(alertmessagereceived)
        alertmessagereceived.reference_name = "Alert Message Received"

        CommonInterruptEventforI2C2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Common Interrupt Event for I2C2',
                                                         'offset': 80,
                                                         'bit length': 83})
        self.dataModel.addChild(CommonInterruptEventforI2C2_dm)

        patchloaded = register_class.cBooleanDMTerminator(self,
                {'name': 'Patch Loaded',
                'offset': 0,
                'bit length': 1})
        CommonInterruptEventforI2C2_dm.addChild(patchloaded)
        patchloaded.reference_name = "Patch Loaded"

        readyforpatch = register_class.cBooleanDMTerminator(self,
                {'name': 'Ready for Patch',
                'offset': 1,
                'bit length': 1})
        CommonInterruptEventforI2C2_dm.addChild(readyforpatch)
        readyforpatch.reference_name = "Ready for Patch"

        i2ccontrollernacked = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Controller NACKed',
                'offset': 2,
                'bit length': 1})
        CommonInterruptEventforI2C2_dm.addChild(i2ccontrollernacked)
        i2ccontrollernacked.reference_name = "I2C Controller NACKed"

        update_function = get_updater_function("intevent2_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cintmask1_0x16_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Interrupt Mask for I2C1',
                                           'address': 0x16,
                                           'byte length': 11,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Interrupt Mask for I2C1',
                                                         'offset': 0,
                                                         'bit length': 88})

        InterruptMaskforI2C1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Interrupt Mask for I2C1',
                                                         'offset': 1,
                                                         'bit length': 80})
        self.dataModel.addChild(InterruptMaskforI2C1_dm)

        pdhardreset = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Hardreset',
                'offset': 0,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(pdhardreset)
        pdhardreset.reference_name = "PD Hardreset"

        pluginsertorremoval = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Insert or Removal',
                'offset': 2,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(pluginsertorremoval)
        pluginsertorremoval.reference_name = "Plug Insert or Removal"

        prswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Complete',
                'offset': 3,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(prswapcomplete)
        prswapcomplete.reference_name = "Power Swap Complete"

        drswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Complete',
                'offset': 4,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(drswapcomplete)
        drswapcomplete.reference_name = "Data Swap Complete"

        frswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'FR Swap Complete',
                'offset': 5,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(frswapcomplete)
        frswapcomplete.reference_name = "FR Swap Complete"

        overcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Overcurrent',
                'offset': 8,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(overcurrent)
        overcurrent.reference_name = "Overcurrent"

        attentionreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Attention Received',
                'offset': 9,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(attentionreceived)
        attentionreceived.reference_name = "Attention Received"

        vdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Received',
                'offset': 10,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(vdmreceived)
        vdmreceived.reference_name = "VDM Received"

        newcontractascons = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Consumer',
                'offset': 11,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(newcontractascons)
        newcontractascons.reference_name = "New Contract as Consumer"

        newcontractasprov = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Provider',
                'offset': 12,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(newcontractasprov)
        newcontractasprov.reference_name = "New Contract as Provider"

        sourcecapmsgrcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Source Cap Message Received',
                'offset': 13,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(sourcecapmsgrcvd)
        sourcecapmsgrcvd.reference_name = "Source Cap Message Received"

        prswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Requested',
                'offset': 16,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(prswaprequested)
        prswaprequested.reference_name = "Power Swap Requested"

        drswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Requested',
                'offset': 17,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(drswaprequested)
        drswaprequested.reference_name = "Data Swap Requested"

        usbhostpresent = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host Present',
                'offset': 19,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(usbhostpresent)
        usbhostpresent.reference_name = "USB Host Present"

        usbhostpresentnolonger = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host No Longer Present',
                'offset': 20,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(usbhostpresentnolonger)
        usbhostpresentnolonger.reference_name = "USB Host No Longer Present"

        ppswitchchanged = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Path Switch Changed',
                'offset': 22,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(ppswitchchanged)
        ppswitchchanged.reference_name = "Power Path Switch Changed"

        powerstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Status Updated',
                'offset': 23,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(powerstatusupdate)
        powerstatusupdate.reference_name = "Power Status Updated"

        datastatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Status Updated',
                'offset': 24,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(datastatusupdate)
        datastatusupdate.reference_name = "Data Status Updated"

        statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Status Updated',
                'offset': 25,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(statusupdate)
        statusupdate.reference_name = "Status Updated"

        pdstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Status Updated',
                'offset': 26,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(pdstatusupdate)
        pdstatusupdate.reference_name = "PD Status Updated"

        cmd1complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD1 Complete',
                'offset': 29,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(cmd1complete)
        cmd1complete.reference_name = "CMD1 Complete"

        cmd2complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD2 Complete',
                'offset': 30,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(cmd2complete)
        cmd2complete.reference_name = "CMD2 Complete"

        errordeviceincompatible = register_class.cBooleanDMTerminator(self,
                {'name': 'Device Incompatible Error',
                'offset': 31,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(errordeviceincompatible)
        errordeviceincompatible.reference_name = "Device Incompatible Error"

        errorcannotprovidevoltageorcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Cannot Provide Voltage or Current Error',
                'offset': 32,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(errorcannotprovidevoltageorcurrent)
        errorcannotprovidevoltageorcurrent.reference_name = "Cannot Provide Voltage or Current Error"

        errorcanprovidevoltageorcurrentlater = register_class.cBooleanDMTerminator(self,
                {'name': 'Can Provide Voltage or Current Later Error',
                'offset': 33,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(errorcanprovidevoltageorcurrentlater)
        errorcanprovidevoltageorcurrentlater.reference_name = "Can Provide Voltage or Current Later Error"

        errorpowereventoccurred = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Event Occurred Error',
                'offset': 34,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(errorpowereventoccurred)
        errorpowereventoccurred.reference_name = "Power Event Occurred Error"

        errormissinggetcapmessage = register_class.cBooleanDMTerminator(self,
                {'name': 'Missing Get Capabalities Message Error',
                'offset': 35,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(errormissinggetcapmessage)
        errormissinggetcapmessage.reference_name = "Missing Get Capabalities Message Error"

        errorprotocolerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Protocol Error',
                'offset': 37,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(errorprotocolerror)
        errorprotocolerror.reference_name = "Protocol Error"

        errormessagedata = register_class.cBooleanDMTerminator(self,
                {'name': 'Message Data Error',
                'offset': 38,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(errormessagedata)
        errormessagedata.reference_name = "Message Data Error"

        errordischargefailed = register_class.cBooleanDMTerminator(self,
                {'name': 'Discharge Failed Error',
                'offset': 40,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(errordischargefailed)
        errordischargefailed.reference_name = "Discharge Failed Error"

        snktransitioncomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Sink Transition Completed',
                'offset': 41,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(snktransitioncomplete)
        snktransitioncomplete.reference_name = "Sink Transition Completed"

        plugearlynotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Early Notification',
                'offset': 42,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(plugearlynotification)
        plugearlynotification.reference_name = "Plug Early Notification"

        prochotnotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Prochot Notofication',
                'offset': 43,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(prochotnotification)
        prochotnotification.reference_name = "Prochot Notofication"

        errorunabletosource = register_class.cBooleanDMTerminator(self,
                {'name': 'Unable to Source Error',
                'offset': 45,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(errorunabletosource)
        errorunabletosource.reference_name = "Unable to Source Error"

        amentryfail = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entry Fail',
                'offset': 47,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(amentryfail)
        amentryfail.reference_name = "AM Entry Fail"

        amentered = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entered',
                'offset': 48,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(amentered)
        amentered.reference_name = "AM Entered"

        vdmmsgsent = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Message Sent',
                'offset': 49,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(vdmmsgsent)
        vdmmsgsent.reference_name = "VDM Message Sent"

        discovermodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Discover mode Completed',
                'offset': 50,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(discovermodecomplete)
        discovermodecomplete.reference_name = "Discover mode Completed"

        exitmodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Exit mode Completed',
                'offset': 51,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(exitmodecomplete)
        exitmodecomplete.reference_name = "Exit mode Completed"

        dataresetstart = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Reset Start',
                'offset': 52,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(dataresetstart)
        dataresetstart.reference_name = "Data Reset Start"

        usbstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Status Update',
                'offset': 53,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(usbstatusupdate)
        usbstatusupdate.reference_name = "USB Status Update"

        connectionmanagerupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Connection Manager Update',
                'offset': 54,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(connectionmanagerupdate)
        connectionmanagerupdate.reference_name = "Connection Manager Update"

        usersvidmodeentered = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Entered',
                'offset': 55,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(usersvidmodeentered)
        usersvidmodeentered.reference_name = "USVID Mode Entered"

        usersvidmodeexited = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Exited',
                'offset': 56,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(usersvidmodeexited)
        usersvidmodeexited.reference_name = "USVID Mode Exited"

        usersvidattnvdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Attention VDM Received',
                'offset': 57,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(usersvidattnvdmreceived)
        usersvidattnvdmreceived.reference_name = "USVID Attention VDM Received"

        usersvidothervdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Other VDM Received',
                'offset': 58,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(usersvidothervdmreceived)
        usersvidothervdmreceived.reference_name = "USVID Other VDM Received"

        extdcdceventreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Event Received',
                'offset': 60,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(extdcdceventreceived)
        extdcdceventreceived.reference_name = "External DCDC Event Received"
        extdcdceventreceived.help = "External DCDC Event received"

        dpsidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'DP SID Status Updated',
                'offset': 61,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(dpsidstatusupdate)
        dpsidstatusupdate.reference_name = "DP SID Status Updated"

        intelvidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Intel VID Status Updated',
                'offset': 62,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(intelvidstatusupdate)
        intelvidstatusupdate.reference_name = "Intel VID Status Updated"

        pd3statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD3 Status Updated',
                'offset': 63,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(pd3statusupdate)
        pd3statusupdate.reference_name = "PD3 Status Updated"

        txmembufferempty = register_class.cBooleanDMTerminator(self,
                {'name': 'TX Memory Buffer Empty',
                'offset': 64,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(txmembufferempty)
        txmembufferempty.reference_name = "TX Memory Buffer Empty"

        mbrdbufferready = register_class.cBooleanDMTerminator(self,
                {'name': 'MBRD Buffer Ready',
                'offset': 65,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(mbrdbufferready)
        mbrdbufferready.reference_name = "MBRD Buffer Ready"

        dellvdmarrive = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Arrived',
                'offset': 66,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(dellvdmarrive)
        dellvdmarrive.reference_name = "CustomerD VDM Arrived"

        vdmenteredmode = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Entered Mode',
                'offset': 67,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(vdmenteredmode)
        vdmenteredmode.reference_name = "VDM Entered Mode"

        dellvdmsent = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Sent',
                'offset': 68,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(dellvdmsent)
        dellvdmsent.reference_name = "CustomerD VDM Sent"

        eventsocacktimeout = register_class.cBooleanDMTerminator(self,
                {'name': 'Event SOC ACK Timeout',
                'offset': 69,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(eventsocacktimeout)
        eventsocacktimeout.reference_name = "Event SOC ACK Timeout"

        notsupportedreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Notsupported Received',
                'offset': 70,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(notsupportedreceived)
        notsupportedreceived.reference_name = "Notsupported Received"

        crossbarerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Crossbar Error',
                'offset': 71,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(crossbarerror)
        crossbarerror.reference_name = "Crossbar Error"

        mailboxupdated = register_class.cBooleanDMTerminator(self,
                {'name': 'Mailbox Updated',
                'offset': 72,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(mailboxupdated)
        mailboxupdated.reference_name = "Mailbox Updated"

        i2cexternalppstatus = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Communication error with external PP',
                'offset': 73,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(i2cexternalppstatus)
        i2cexternalppstatus.reference_name = "I2C Communication error with external PP"

        externaldcdcstatuschange = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Status Change',
                'offset': 74,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(externaldcdcstatuschange)
        externaldcdcstatuschange.reference_name = "External DCDC Status Change"

        frssignalreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'FRS Signal Received',
                'offset': 75,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(frssignalreceived)
        frssignalreceived.reference_name = "FRS Signal Received"

        chunkresponsereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Response Received',
                'offset': 76,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(chunkresponsereceived)
        chunkresponsereceived.reference_name = "Chunk Response Received"

        chunkrequestreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Request Received',
                'offset': 77,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(chunkrequestreceived)
        chunkrequestreceived.reference_name = "Chunk Request Received"

        alertmessagereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Alert Message Received',
                'offset': 78,
                'bit length': 1})
        InterruptMaskforI2C1_dm.addChild(alertmessagereceived)
        alertmessagereceived.reference_name = "Alert Message Received"

        CommonInterruptMaskforI2C1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Common Interrupt Mask for I2C1',
                                                         'offset': 80,
                                                         'bit length': 83})
        self.dataModel.addChild(CommonInterruptMaskforI2C1_dm)

        patchloaded = register_class.cBooleanDMTerminator(self,
                {'name': 'Patch Loaded',
                'offset': 0,
                'bit length': 1})
        CommonInterruptMaskforI2C1_dm.addChild(patchloaded)
        patchloaded.reference_name = "Patch Loaded"

        readyforpatch = register_class.cBooleanDMTerminator(self,
                {'name': 'Ready for Patch',
                'offset': 1,
                'bit length': 1})
        CommonInterruptMaskforI2C1_dm.addChild(readyforpatch)
        readyforpatch.reference_name = "Ready for Patch"

        i2ccontrollernacked = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Controller NACKed',
                'offset': 2,
                'bit length': 1})
        CommonInterruptMaskforI2C1_dm.addChild(i2ccontrollernacked)
        i2ccontrollernacked.reference_name = "I2C Controller NACKed"

        update_function = get_updater_function("intmask1_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cintmask2_0x17_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Interrupt Mask for I2C2',
                                           'address': 0x17,
                                           'byte length': 11,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Interrupt Mask for I2C2',
                                                         'offset': 0,
                                                         'bit length': 88})

        InterruptMaskforI2C2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Interrupt Mask for I2C2',
                                                         'offset': 1,
                                                         'bit length': 80})
        self.dataModel.addChild(InterruptMaskforI2C2_dm)

        pdhardreset = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Hardreset',
                'offset': 0,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(pdhardreset)
        pdhardreset.reference_name = "PD Hardreset"

        pluginsertorremoval = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Insert or Removal',
                'offset': 2,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(pluginsertorremoval)
        pluginsertorremoval.reference_name = "Plug Insert or Removal"

        prswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Complete',
                'offset': 3,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(prswapcomplete)
        prswapcomplete.reference_name = "Power Swap Complete"

        drswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Complete',
                'offset': 4,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(drswapcomplete)
        drswapcomplete.reference_name = "Data Swap Complete"

        frswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'FR Swap Complete',
                'offset': 5,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(frswapcomplete)
        frswapcomplete.reference_name = "FR Swap Complete"

        overcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Overcurrent',
                'offset': 8,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(overcurrent)
        overcurrent.reference_name = "Overcurrent"

        attentionreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Attention Received',
                'offset': 9,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(attentionreceived)
        attentionreceived.reference_name = "Attention Received"

        vdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM received',
                'offset': 10,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(vdmreceived)
        vdmreceived.reference_name = "VDM received"

        newcontractascons = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Consumer',
                'offset': 11,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(newcontractascons)
        newcontractascons.reference_name = "New Contract as Consumer"

        newcontractasprov = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Provider',
                'offset': 12,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(newcontractasprov)
        newcontractasprov.reference_name = "New Contract as Provider"

        sourcecapmsgrcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Source Cap Message Received',
                'offset': 13,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(sourcecapmsgrcvd)
        sourcecapmsgrcvd.reference_name = "Source Cap Message Received"

        prswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Requested',
                'offset': 16,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(prswaprequested)
        prswaprequested.reference_name = "Power Swap Requested"

        drswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Requested',
                'offset': 17,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(drswaprequested)
        drswaprequested.reference_name = "Data Swap Requested"

        usbhostpresent = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host Present',
                'offset': 19,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(usbhostpresent)
        usbhostpresent.reference_name = "USB Host Present"

        usbhostpresentnolonger = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host No Longer Present',
                'offset': 20,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(usbhostpresentnolonger)
        usbhostpresentnolonger.reference_name = "USB Host No Longer Present"

        ppswitchchanged = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Path Switch Changed',
                'offset': 22,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(ppswitchchanged)
        ppswitchchanged.reference_name = "Power Path Switch Changed"

        powerstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Status Updated',
                'offset': 23,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(powerstatusupdate)
        powerstatusupdate.reference_name = "Power Status Updated"

        datastatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Status Updated',
                'offset': 24,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(datastatusupdate)
        datastatusupdate.reference_name = "Data Status Updated"

        statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Status Updated',
                'offset': 25,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(statusupdate)
        statusupdate.reference_name = "Status Updated"

        pdstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Status Updated',
                'offset': 26,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(pdstatusupdate)
        pdstatusupdate.reference_name = "PD Status Updated"

        cmd1complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD1 Complete',
                'offset': 29,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(cmd1complete)
        cmd1complete.reference_name = "CMD1 Complete"

        cmd2complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD2 Complete',
                'offset': 30,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(cmd2complete)
        cmd2complete.reference_name = "CMD2 Complete"

        errordeviceincompatible = register_class.cBooleanDMTerminator(self,
                {'name': 'Device Incompatible Error',
                'offset': 31,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(errordeviceincompatible)
        errordeviceincompatible.reference_name = "Device Incompatible Error"

        errorcannotprovidevoltageorcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Cannot Provide Voltage or Current Error',
                'offset': 32,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(errorcannotprovidevoltageorcurrent)
        errorcannotprovidevoltageorcurrent.reference_name = "Cannot Provide Voltage or Current Error"

        errorcanprovidevoltageorcurrentlater = register_class.cBooleanDMTerminator(self,
                {'name': 'Can Provide Voltage or Current Later Error',
                'offset': 33,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(errorcanprovidevoltageorcurrentlater)
        errorcanprovidevoltageorcurrentlater.reference_name = "Can Provide Voltage or Current Later Error"

        errorpowereventoccurred = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Event Occurred Error',
                'offset': 34,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(errorpowereventoccurred)
        errorpowereventoccurred.reference_name = "Power Event Occurred Error"

        errormissinggetcapmessage = register_class.cBooleanDMTerminator(self,
                {'name': 'Missing Get Capabalities Message Error',
                'offset': 35,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(errormissinggetcapmessage)
        errormissinggetcapmessage.reference_name = "Missing Get Capabalities Message Error"

        errorprotocolerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Protocol Error',
                'offset': 37,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(errorprotocolerror)
        errorprotocolerror.reference_name = "Protocol Error"

        errormessagedata = register_class.cBooleanDMTerminator(self,
                {'name': 'Message Data Error',
                'offset': 38,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(errormessagedata)
        errormessagedata.reference_name = "Message Data Error"

        errordischargefailed = register_class.cBooleanDMTerminator(self,
                {'name': 'Discharge Failed Error',
                'offset': 40,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(errordischargefailed)
        errordischargefailed.reference_name = "Discharge Failed Error"

        snktransitioncomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Sink Transition Completed',
                'offset': 41,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(snktransitioncomplete)
        snktransitioncomplete.reference_name = "Sink Transition Completed"

        plugearlynotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Early Notification',
                'offset': 42,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(plugearlynotification)
        plugearlynotification.reference_name = "Plug Early Notification"

        prochotnotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Prochot Notofication',
                'offset': 43,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(prochotnotification)
        prochotnotification.reference_name = "Prochot Notofication"

        errorunabletosource = register_class.cBooleanDMTerminator(self,
                {'name': 'Unable to Source Error',
                'offset': 45,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(errorunabletosource)
        errorunabletosource.reference_name = "Unable to Source Error"

        amentryfail = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entry Fail',
                'offset': 47,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(amentryfail)
        amentryfail.reference_name = "AM Entry Fail"

        amentered = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entered',
                'offset': 48,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(amentered)
        amentered.reference_name = "AM Entered"

        vdmmsgsent = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Message Sent',
                'offset': 49,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(vdmmsgsent)
        vdmmsgsent.reference_name = "VDM Message Sent"

        discovermodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Discover mode Completed',
                'offset': 50,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(discovermodecomplete)
        discovermodecomplete.reference_name = "Discover mode Completed"

        exitmodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Exit mode Completed',
                'offset': 51,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(exitmodecomplete)
        exitmodecomplete.reference_name = "Exit mode Completed"

        dataresetstart = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Reset Start',
                'offset': 52,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(dataresetstart)
        dataresetstart.reference_name = "Data Reset Start"

        usbstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Status Update',
                'offset': 53,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(usbstatusupdate)
        usbstatusupdate.reference_name = "USB Status Update"

        connectionmanagerupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Connection Manager Update',
                'offset': 54,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(connectionmanagerupdate)
        connectionmanagerupdate.reference_name = "Connection Manager Update"

        usersvidmodeentered = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Entered',
                'offset': 55,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(usersvidmodeentered)
        usersvidmodeentered.reference_name = "USVID Mode Entered"

        usersvidmodeexited = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Exited',
                'offset': 56,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(usersvidmodeexited)
        usersvidmodeexited.reference_name = "USVID Mode Exited"

        usersvidattnvdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Attention VDM Received',
                'offset': 57,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(usersvidattnvdmreceived)
        usersvidattnvdmreceived.reference_name = "USVID Attention VDM Received"

        usersvidothervdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Other VDM Received',
                'offset': 58,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(usersvidothervdmreceived)
        usersvidothervdmreceived.reference_name = "USVID Other VDM Received"

        extdcdceventreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Event Received',
                'offset': 60,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(extdcdceventreceived)
        extdcdceventreceived.reference_name = "External DCDC Event Received"
        extdcdceventreceived.help = "External DCDC Event received"

        dpsidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'DP SID Status Updated',
                'offset': 61,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(dpsidstatusupdate)
        dpsidstatusupdate.reference_name = "DP SID Status Updated"

        intelvidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Intel VID Status Updated',
                'offset': 62,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(intelvidstatusupdate)
        intelvidstatusupdate.reference_name = "Intel VID Status Updated"

        pd3statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD3 Status Updated',
                'offset': 63,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(pd3statusupdate)
        pd3statusupdate.reference_name = "PD3 Status Updated"

        txmembufferempty = register_class.cBooleanDMTerminator(self,
                {'name': 'TX Memory Buffer Empty',
                'offset': 64,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(txmembufferempty)
        txmembufferempty.reference_name = "TX Memory Buffer Empty"

        mbrdbufferready = register_class.cBooleanDMTerminator(self,
                {'name': 'MBRD Buffer Ready',
                'offset': 65,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(mbrdbufferready)
        mbrdbufferready.reference_name = "MBRD Buffer Ready"
        mbrdbufferready.help = "Reserved."

        dellvdmarrive = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Arrived',
                'offset': 66,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(dellvdmarrive)
        dellvdmarrive.reference_name = "CustomerD VDM Arrived"

        vdmenteredmode = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Entered Mode',
                'offset': 67,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(vdmenteredmode)
        vdmenteredmode.reference_name = "VDM Entered Mode"

        dellvdmsent = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Sent',
                'offset': 68,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(dellvdmsent)
        dellvdmsent.reference_name = "CustomerD VDM Sent"

        eventsocacktimeout = register_class.cBooleanDMTerminator(self,
                {'name': 'Event SOC ACK Timeout',
                'offset': 69,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(eventsocacktimeout)
        eventsocacktimeout.reference_name = "Event SOC ACK Timeout"

        notsupportedreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Notsupported Received',
                'offset': 70,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(notsupportedreceived)
        notsupportedreceived.reference_name = "Notsupported Received"

        crossbarerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Crossbar Error',
                'offset': 71,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(crossbarerror)
        crossbarerror.reference_name = "Crossbar Error"

        mailboxupdated = register_class.cBooleanDMTerminator(self,
                {'name': 'Mailbox Updated',
                'offset': 72,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(mailboxupdated)
        mailboxupdated.reference_name = "Mailbox Updated"

        i2cexternalppstatus = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Communication error with external PP',
                'offset': 73,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(i2cexternalppstatus)
        i2cexternalppstatus.reference_name = "I2C Communication error with external PP"

        externaldcdcstatuschange = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Status Change',
                'offset': 74,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(externaldcdcstatuschange)
        externaldcdcstatuschange.reference_name = "External DCDC Status Change"

        frssignalreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'FRS Signal Received',
                'offset': 75,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(frssignalreceived)
        frssignalreceived.reference_name = "FRS Signal Received"

        chunkresponsereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Response Received',
                'offset': 76,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(chunkresponsereceived)
        chunkresponsereceived.reference_name = "Chunk Response Received"

        chunkrequestreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Request Received',
                'offset': 77,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(chunkrequestreceived)
        chunkrequestreceived.reference_name = "Chunk Request Received"

        alertmessagereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Alert Message Received',
                'offset': 78,
                'bit length': 1})
        InterruptMaskforI2C2_dm.addChild(alertmessagereceived)
        alertmessagereceived.reference_name = "Alert Message Received"

        CommonInterruptMaskforI2C2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Common Interrupt Mask for I2C2',
                                                         'offset': 80,
                                                         'bit length': 83})
        self.dataModel.addChild(CommonInterruptMaskforI2C2_dm)

        patchloaded = register_class.cBooleanDMTerminator(self,
                {'name': 'Patch Loaded',
                'offset': 0,
                'bit length': 1})
        CommonInterruptMaskforI2C2_dm.addChild(patchloaded)
        patchloaded.reference_name = "Patch Loaded"

        readyforpatch = register_class.cBooleanDMTerminator(self,
                {'name': 'Ready for Patch',
                'offset': 1,
                'bit length': 1})
        CommonInterruptMaskforI2C2_dm.addChild(readyforpatch)
        readyforpatch.reference_name = "Ready for Patch"

        i2ccontrollernacked = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Controller NACKed',
                'offset': 2,
                'bit length': 1})
        CommonInterruptMaskforI2C2_dm.addChild(i2ccontrollernacked)
        i2ccontrollernacked.reference_name = "I2C Controller NACKed"

        update_function = get_updater_function("intmask2_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cintclear1_0x18_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Interrupt Clear for I2C1',
                                           'address': 0x18,
                                           'byte length': 11,
                                           'permission': 'DRW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Interrupt Clear for I2C1',
                                                         'offset': 0,
                                                         'bit length': 88})

        InterruptClearforI2C1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Interrupt Clear for I2C1',
                                                         'offset': 1,
                                                         'bit length': 80})
        self.dataModel.addChild(InterruptClearforI2C1_dm)

        pdhardreset = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Hardreset',
                'offset': 0,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(pdhardreset)
        pdhardreset.reference_name = "PD Hardreset"

        pluginsertorremoval = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Insert or Removal',
                'offset': 2,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(pluginsertorremoval)
        pluginsertorremoval.reference_name = "Plug Insert or Removal"

        prswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Complete',
                'offset': 3,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(prswapcomplete)
        prswapcomplete.reference_name = "Power Swap Complete"

        drswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Complete',
                'offset': 4,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(drswapcomplete)
        drswapcomplete.reference_name = "Data Swap Complete"

        frswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'FR Swap Complete',
                'offset': 5,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(frswapcomplete)
        frswapcomplete.reference_name = "FR Swap Complete"

        overcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Overcurrent',
                'offset': 8,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(overcurrent)
        overcurrent.reference_name = "Overcurrent"

        attentionreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Attention Received',
                'offset': 9,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(attentionreceived)
        attentionreceived.reference_name = "Attention Received"

        vdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM received',
                'offset': 10,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(vdmreceived)
        vdmreceived.reference_name = "VDM received"

        newcontractascons = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Consumer',
                'offset': 11,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(newcontractascons)
        newcontractascons.reference_name = "New Contract as Consumer"

        newcontractasprov = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Provider',
                'offset': 12,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(newcontractasprov)
        newcontractasprov.reference_name = "New Contract as Provider"

        sourcecapmsgrcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Source Cap Message Received',
                'offset': 13,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(sourcecapmsgrcvd)
        sourcecapmsgrcvd.reference_name = "Source Cap Message Received"

        prswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Requested',
                'offset': 16,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(prswaprequested)
        prswaprequested.reference_name = "Power Swap Requested"

        drswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Requested',
                'offset': 17,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(drswaprequested)
        drswaprequested.reference_name = "Data Swap Requested"

        usbhostpresent = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host Present',
                'offset': 19,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(usbhostpresent)
        usbhostpresent.reference_name = "USB Host Present"

        usbhostpresentnolonger = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host No Longer Present',
                'offset': 20,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(usbhostpresentnolonger)
        usbhostpresentnolonger.reference_name = "USB Host No Longer Present"

        ppswitchchanged = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Path Switch Changed',
                'offset': 22,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(ppswitchchanged)
        ppswitchchanged.reference_name = "Power Path Switch Changed"

        powerstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Status Updated',
                'offset': 23,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(powerstatusupdate)
        powerstatusupdate.reference_name = "Power Status Updated"

        datastatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Status Updated',
                'offset': 24,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(datastatusupdate)
        datastatusupdate.reference_name = "Data Status Updated"

        statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Status Updated',
                'offset': 25,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(statusupdate)
        statusupdate.reference_name = "Status Updated"

        pdstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Status Updated',
                'offset': 26,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(pdstatusupdate)
        pdstatusupdate.reference_name = "PD Status Updated"

        cmd1complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD1 Complete',
                'offset': 29,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(cmd1complete)
        cmd1complete.reference_name = "CMD1 Complete"

        cmd2complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD2 Complete',
                'offset': 30,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(cmd2complete)
        cmd2complete.reference_name = "CMD2 Complete"

        errordeviceincompatible = register_class.cBooleanDMTerminator(self,
                {'name': 'Device Incompatible Error',
                'offset': 31,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(errordeviceincompatible)
        errordeviceincompatible.reference_name = "Device Incompatible Error"

        errorcannotprovidevoltageorcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Cannot Provide Voltage or Current Error',
                'offset': 32,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(errorcannotprovidevoltageorcurrent)
        errorcannotprovidevoltageorcurrent.reference_name = "Cannot Provide Voltage or Current Error"

        errorcanprovidevoltageorcurrentlater = register_class.cBooleanDMTerminator(self,
                {'name': 'Can Provide Voltage or Current Later Error',
                'offset': 33,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(errorcanprovidevoltageorcurrentlater)
        errorcanprovidevoltageorcurrentlater.reference_name = "Can Provide Voltage or Current Later Error"

        errorpowereventoccurred = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Event Occurred Error',
                'offset': 34,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(errorpowereventoccurred)
        errorpowereventoccurred.reference_name = "Power Event Occurred Error"

        errormissinggetcapmessage = register_class.cBooleanDMTerminator(self,
                {'name': 'Missing Get Capabalities Message Error',
                'offset': 35,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(errormissinggetcapmessage)
        errormissinggetcapmessage.reference_name = "Missing Get Capabalities Message Error"

        errorprotocolerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Protocol Error',
                'offset': 37,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(errorprotocolerror)
        errorprotocolerror.reference_name = "Protocol Error"

        errormessagedata = register_class.cBooleanDMTerminator(self,
                {'name': 'Message Data Error',
                'offset': 38,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(errormessagedata)
        errormessagedata.reference_name = "Message Data Error"

        errordischargefailed = register_class.cBooleanDMTerminator(self,
                {'name': 'Discharge Failed Error',
                'offset': 40,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(errordischargefailed)
        errordischargefailed.reference_name = "Discharge Failed Error"

        snktransitioncomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Sink Transition Completed',
                'offset': 41,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(snktransitioncomplete)
        snktransitioncomplete.reference_name = "Sink Transition Completed"

        plugearlynotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Early Notification',
                'offset': 42,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(plugearlynotification)
        plugearlynotification.reference_name = "Plug Early Notification"

        prochotnotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Prochot Notofication',
                'offset': 43,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(prochotnotification)
        prochotnotification.reference_name = "Prochot Notofication"

        errorunabletosource = register_class.cBooleanDMTerminator(self,
                {'name': 'Unable to Source Error',
                'offset': 45,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(errorunabletosource)
        errorunabletosource.reference_name = "Unable to Source Error"

        amentryfail = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entry Fail',
                'offset': 47,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(amentryfail)
        amentryfail.reference_name = "AM Entry Fail"

        amentered = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entered',
                'offset': 48,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(amentered)
        amentered.reference_name = "AM Entered"

        vdmmsgsent = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Message Sent',
                'offset': 49,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(vdmmsgsent)
        vdmmsgsent.reference_name = "VDM Message Sent"

        discovermodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Discover mode Completed',
                'offset': 50,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(discovermodecomplete)
        discovermodecomplete.reference_name = "Discover mode Completed"

        exitmodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Exit mode Completed',
                'offset': 51,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(exitmodecomplete)
        exitmodecomplete.reference_name = "Exit mode Completed"

        dataresetstart = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Reset Start',
                'offset': 52,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(dataresetstart)
        dataresetstart.reference_name = "Data Reset Start"

        usbstatusupdate = register_class.cHexDMTerminator(self,
                {'name': 'USB  Status Update',
                'offset': 53,
                'bit length': 2})
        InterruptClearforI2C1_dm.addChild(usbstatusupdate)
        usbstatusupdate.reference_name = "USB  Status Update"
        usbstatusupdate.help = "Reserved."

        connectionmanagerupdate = register_class.cHexDMTerminator(self,
                {'name': 'Connection Manager Update',
                'offset': 54,
                'bit length': 2})
        InterruptClearforI2C1_dm.addChild(connectionmanagerupdate)
        connectionmanagerupdate.reference_name = "Connection Manager Update"

        usersvidmodeentered = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Entered',
                'offset': 55,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(usersvidmodeentered)
        usersvidmodeentered.reference_name = "USVID Mode Entered"

        usersvidmodeexited = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Exited',
                'offset': 56,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(usersvidmodeexited)
        usersvidmodeexited.reference_name = "USVID Mode Exited"

        usersvidattnvdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Attention VDM Received',
                'offset': 57,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(usersvidattnvdmreceived)
        usersvidattnvdmreceived.reference_name = "USVID Attention VDM Received"

        usersvidothervdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Other VDM Received',
                'offset': 58,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(usersvidothervdmreceived)
        usersvidothervdmreceived.reference_name = "USVID Other VDM Received"

        extdcdceventreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Event Received',
                'offset': 60,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(extdcdceventreceived)
        extdcdceventreceived.reference_name = "External DCDC Event Received"
        extdcdceventreceived.help = "External DCDC Event received"

        dpsidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'DP SID Status Updated',
                'offset': 61,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(dpsidstatusupdate)
        dpsidstatusupdate.reference_name = "DP SID Status Updated"

        intelvidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Intel VID Status Updated',
                'offset': 62,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(intelvidstatusupdate)
        intelvidstatusupdate.reference_name = "Intel VID Status Updated"

        pd3statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD3 Status Updated',
                'offset': 63,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(pd3statusupdate)
        pd3statusupdate.reference_name = "PD3 Status Updated"

        txmembufferempty = register_class.cBooleanDMTerminator(self,
                {'name': 'TX Memory Buffer Empty',
                'offset': 64,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(txmembufferempty)
        txmembufferempty.reference_name = "TX Memory Buffer Empty"

        mbrdbufferready = register_class.cBooleanDMTerminator(self,
                {'name': 'MBRD Buffer Ready',
                'offset': 65,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(mbrdbufferready)
        mbrdbufferready.reference_name = "MBRD Buffer Ready"

        dellvdmarrive = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Arrived',
                'offset': 66,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(dellvdmarrive)
        dellvdmarrive.reference_name = "CustomerD VDM Arrived"

        vdmenteredmode = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Entered Mode',
                'offset': 67,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(vdmenteredmode)
        vdmenteredmode.reference_name = "VDM Entered Mode"

        dellvdmsent = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Sent',
                'offset': 68,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(dellvdmsent)
        dellvdmsent.reference_name = "CustomerD VDM Sent"

        eventsocacktimeout = register_class.cBooleanDMTerminator(self,
                {'name': 'Event SOC ACK Timeout',
                'offset': 69,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(eventsocacktimeout)
        eventsocacktimeout.reference_name = "Event SOC ACK Timeout"

        notsupportedreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Notsupported Received',
                'offset': 70,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(notsupportedreceived)
        notsupportedreceived.reference_name = "Notsupported Received"

        crossbarerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Crossbar Error',
                'offset': 71,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(crossbarerror)
        crossbarerror.reference_name = "Crossbar Error"

        mailboxupdated = register_class.cBooleanDMTerminator(self,
                {'name': 'Mailbox Updated',
                'offset': 72,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(mailboxupdated)
        mailboxupdated.reference_name = "Mailbox Updated"

        i2cexternalppstatus = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Communication error with external PP',
                'offset': 73,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(i2cexternalppstatus)
        i2cexternalppstatus.reference_name = "I2C Communication error with external PP"

        externaldcdcstatuschange = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Status Change',
                'offset': 74,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(externaldcdcstatuschange)
        externaldcdcstatuschange.reference_name = "External DCDC Status Change"

        frssignalreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'FRS Signal Received',
                'offset': 75,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(frssignalreceived)
        frssignalreceived.reference_name = "FRS Signal Received"

        chunkresponsereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Response Received',
                'offset': 76,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(chunkresponsereceived)
        chunkresponsereceived.reference_name = "Chunk Response Received"

        chunkrequestreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Request Received',
                'offset': 77,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(chunkrequestreceived)
        chunkrequestreceived.reference_name = "Chunk Request Received"

        alertmessagereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Alert Message Received',
                'offset': 78,
                'bit length': 1})
        InterruptClearforI2C1_dm.addChild(alertmessagereceived)
        alertmessagereceived.reference_name = "Alert Message Received"

        CommonInterruptClearforI2C1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Common Interrupt Clear for I2C1',
                                                         'offset': 80,
                                                         'bit length': 83})
        self.dataModel.addChild(CommonInterruptClearforI2C1_dm)

        patchloaded = register_class.cBooleanDMTerminator(self,
                {'name': 'Patch Loaded',
                'offset': 0,
                'bit length': 1})
        CommonInterruptClearforI2C1_dm.addChild(patchloaded)
        patchloaded.reference_name = "Patch Loaded"

        readyforpatch = register_class.cBooleanDMTerminator(self,
                {'name': 'Ready for Patch',
                'offset': 1,
                'bit length': 1})
        CommonInterruptClearforI2C1_dm.addChild(readyforpatch)
        readyforpatch.reference_name = "Ready for Patch"

        i2ccontrollernacked = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Controller NACKed',
                'offset': 2,
                'bit length': 1})
        CommonInterruptClearforI2C1_dm.addChild(i2ccontrollernacked)
        i2ccontrollernacked.reference_name = "I2C Controller NACKed"

        update_function = get_updater_function("intclear1_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cintclear2_0x19_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Interrupt Clear for I2C2',
                                           'address': 0x19,
                                           'byte length': 11,
                                           'permission': 'DRW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Interrupt Clear for I2C2',
                                                         'offset': 0,
                                                         'bit length': 88})

        InterruptClearforI2C2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Interrupt Clear for I2C2',
                                                         'offset': 1,
                                                         'bit length': 80})
        self.dataModel.addChild(InterruptClearforI2C2_dm)

        pdhardreset = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Hardreset',
                'offset': 0,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(pdhardreset)
        pdhardreset.reference_name = "PD Hardreset"

        pluginsertorremoval = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Insert or Removal',
                'offset': 2,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(pluginsertorremoval)
        pluginsertorremoval.reference_name = "Plug Insert or Removal"

        prswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Complete',
                'offset': 3,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(prswapcomplete)
        prswapcomplete.reference_name = "Power Swap Complete"

        drswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Complete',
                'offset': 4,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(drswapcomplete)
        drswapcomplete.reference_name = "Data Swap Complete"

        frswapcomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'FR Swap Complete',
                'offset': 5,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(frswapcomplete)
        frswapcomplete.reference_name = "FR Swap Complete"

        overcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Overcurrent',
                'offset': 8,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(overcurrent)
        overcurrent.reference_name = "Overcurrent"

        attentionreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Attention Received',
                'offset': 9,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(attentionreceived)
        attentionreceived.reference_name = "Attention Received"

        vdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM received',
                'offset': 10,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(vdmreceived)
        vdmreceived.reference_name = "VDM received"

        newcontractascons = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Consumer',
                'offset': 11,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(newcontractascons)
        newcontractascons.reference_name = "New Contract as Consumer"

        newcontractasprov = register_class.cBooleanDMTerminator(self,
                {'name': 'New Contract as Provider',
                'offset': 12,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(newcontractasprov)
        newcontractasprov.reference_name = "New Contract as Provider"

        sourcecapmsgrcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Source Cap Message Received',
                'offset': 13,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(sourcecapmsgrcvd)
        sourcecapmsgrcvd.reference_name = "Source Cap Message Received"

        prswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Swap Requested',
                'offset': 16,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(prswaprequested)
        prswaprequested.reference_name = "Power Swap Requested"

        drswaprequested = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Swap Requested',
                'offset': 17,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(drswaprequested)
        drswaprequested.reference_name = "Data Swap Requested"

        usbhostpresent = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host Present',
                'offset': 19,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(usbhostpresent)
        usbhostpresent.reference_name = "USB Host Present"

        usbhostpresentnolonger = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host No Longer Present',
                'offset': 20,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(usbhostpresentnolonger)
        usbhostpresentnolonger.reference_name = "USB Host No Longer Present"

        ppswitchchanged = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Path Switch Changed',
                'offset': 22,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(ppswitchchanged)
        ppswitchchanged.reference_name = "Power Path Switch Changed"

        powerstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Status Updated',
                'offset': 23,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(powerstatusupdate)
        powerstatusupdate.reference_name = "Power Status Updated"

        datastatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Status Updated',
                'offset': 24,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(datastatusupdate)
        datastatusupdate.reference_name = "Data Status Updated"

        statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Status Updated',
                'offset': 25,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(statusupdate)
        statusupdate.reference_name = "Status Updated"

        pdstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD Status Updated',
                'offset': 26,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(pdstatusupdate)
        pdstatusupdate.reference_name = "PD Status Updated"

        cmd1complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD1 Complete',
                'offset': 29,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(cmd1complete)
        cmd1complete.reference_name = "CMD1 Complete"

        cmd2complete = register_class.cBooleanDMTerminator(self,
                {'name': 'CMD2 Complete',
                'offset': 30,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(cmd2complete)
        cmd2complete.reference_name = "CMD2 Complete"

        errordeviceincompatible = register_class.cBooleanDMTerminator(self,
                {'name': 'Device Incompatible Error',
                'offset': 31,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(errordeviceincompatible)
        errordeviceincompatible.reference_name = "Device Incompatible Error"

        errorcannotprovidevoltageorcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Cannot Provide Voltage or Current Error',
                'offset': 32,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(errorcannotprovidevoltageorcurrent)
        errorcannotprovidevoltageorcurrent.reference_name = "Cannot Provide Voltage or Current Error"

        errorcanprovidevoltageorcurrentlater = register_class.cBooleanDMTerminator(self,
                {'name': 'Can Provide Voltage or Current Later Error',
                'offset': 33,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(errorcanprovidevoltageorcurrentlater)
        errorcanprovidevoltageorcurrentlater.reference_name = "Can Provide Voltage or Current Later Error"

        errorpowereventoccurred = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Event Occurred Error',
                'offset': 34,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(errorpowereventoccurred)
        errorpowereventoccurred.reference_name = "Power Event Occurred Error"

        errormissinggetcapmessage = register_class.cBooleanDMTerminator(self,
                {'name': 'Missing Get Capabalities Message Error',
                'offset': 35,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(errormissinggetcapmessage)
        errormissinggetcapmessage.reference_name = "Missing Get Capabalities Message Error"

        errorprotocolerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Protocol Error',
                'offset': 37,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(errorprotocolerror)
        errorprotocolerror.reference_name = "Protocol Error"

        errormessagedata = register_class.cBooleanDMTerminator(self,
                {'name': 'Message Data Error',
                'offset': 38,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(errormessagedata)
        errormessagedata.reference_name = "Message Data Error"

        errordischargefailed = register_class.cBooleanDMTerminator(self,
                {'name': 'Discharge Failed Error',
                'offset': 40,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(errordischargefailed)
        errordischargefailed.reference_name = "Discharge Failed Error"

        snktransitioncomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Sink Transition Completed',
                'offset': 41,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(snktransitioncomplete)
        snktransitioncomplete.reference_name = "Sink Transition Completed"

        plugearlynotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Plug Early Notification',
                'offset': 42,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(plugearlynotification)
        plugearlynotification.reference_name = "Plug Early Notification"

        prochotnotification = register_class.cBooleanDMTerminator(self,
                {'name': 'Prochot Notofication',
                'offset': 43,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(prochotnotification)
        prochotnotification.reference_name = "Prochot Notofication"

        errorunabletosource = register_class.cBooleanDMTerminator(self,
                {'name': 'Unable to Source Error',
                'offset': 45,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(errorunabletosource)
        errorunabletosource.reference_name = "Unable to Source Error"

        amentryfail = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entry Fail',
                'offset': 47,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(amentryfail)
        amentryfail.reference_name = "AM Entry Fail"

        amentered = register_class.cBooleanDMTerminator(self,
                {'name': 'AM Entered',
                'offset': 48,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(amentered)
        amentered.reference_name = "AM Entered"

        vdmmsgsent = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Message Sent',
                'offset': 49,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(vdmmsgsent)
        vdmmsgsent.reference_name = "VDM Message Sent"

        discovermodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Discover mode Completed',
                'offset': 50,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(discovermodecomplete)
        discovermodecomplete.reference_name = "Discover mode Completed"

        exitmodecomplete = register_class.cBooleanDMTerminator(self,
                {'name': 'Exit mode Completed',
                'offset': 51,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(exitmodecomplete)
        exitmodecomplete.reference_name = "Exit mode Completed"

        dataresetstart = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Reset Start',
                'offset': 52,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(dataresetstart)
        dataresetstart.reference_name = "Data Reset Start"

        usbstatusupdate = register_class.cHexDMTerminator(self,
                {'name': 'USB  Status Update',
                'offset': 53,
                'bit length': 2})
        InterruptClearforI2C2_dm.addChild(usbstatusupdate)
        usbstatusupdate.reference_name = "USB  Status Update"

        connectionmanagerupdate = register_class.cHexDMTerminator(self,
                {'name': 'Connection Manager Update',
                'offset': 54,
                'bit length': 2})
        InterruptClearforI2C2_dm.addChild(connectionmanagerupdate)
        connectionmanagerupdate.reference_name = "Connection Manager Update"

        usersvidmodeentered = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Entered',
                'offset': 55,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(usersvidmodeentered)
        usersvidmodeentered.reference_name = "USVID Mode Entered"

        usersvidmodeexited = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Mode Exited',
                'offset': 56,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(usersvidmodeexited)
        usersvidmodeexited.reference_name = "USVID Mode Exited"

        usersvidattnvdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Attention VDM Received',
                'offset': 57,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(usersvidattnvdmreceived)
        usersvidattnvdmreceived.reference_name = "USVID Attention VDM Received"

        usersvidothervdmreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Other VDM Received',
                'offset': 58,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(usersvidothervdmreceived)
        usersvidothervdmreceived.reference_name = "USVID Other VDM Received"

        extdcdceventreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Event Received',
                'offset': 60,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(extdcdceventreceived)
        extdcdceventreceived.reference_name = "External DCDC Event Received"
        extdcdceventreceived.help = "External DCDC Event received"

        dpsidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'DP SID Status Updated',
                'offset': 61,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(dpsidstatusupdate)
        dpsidstatusupdate.reference_name = "DP SID Status Updated"

        intelvidstatusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Intel VID Status Updated',
                'offset': 62,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(intelvidstatusupdate)
        intelvidstatusupdate.reference_name = "Intel VID Status Updated"

        pd3statusupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'PD3 Status Updated',
                'offset': 63,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(pd3statusupdate)
        pd3statusupdate.reference_name = "PD3 Status Updated"

        txmembufferempty = register_class.cBooleanDMTerminator(self,
                {'name': 'TX Memory Buffer Empty',
                'offset': 64,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(txmembufferempty)
        txmembufferempty.reference_name = "TX Memory Buffer Empty"

        mbrdbufferready = register_class.cBooleanDMTerminator(self,
                {'name': 'MBRD Buffer Ready',
                'offset': 65,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(mbrdbufferready)
        mbrdbufferready.reference_name = "MBRD Buffer Ready"

        dellvdmarrive = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Arrived',
                'offset': 66,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(dellvdmarrive)
        dellvdmarrive.reference_name = "CustomerD VDM Arrived"

        vdmenteredmode = register_class.cBooleanDMTerminator(self,
                {'name': 'VDM Entered Mode',
                'offset': 67,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(vdmenteredmode)
        vdmenteredmode.reference_name = "VDM Entered Mode"

        dellvdmsent = register_class.cBooleanDMTerminator(self,
                {'name': 'CustomerD VDM Sent',
                'offset': 68,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(dellvdmsent)
        dellvdmsent.reference_name = "CustomerD VDM Sent"

        eventsocacktimeout = register_class.cBooleanDMTerminator(self,
                {'name': 'Event SOC ACK Timeout',
                'offset': 69,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(eventsocacktimeout)
        eventsocacktimeout.reference_name = "Event SOC ACK Timeout"

        notsupportedreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Notsupported Received',
                'offset': 70,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(notsupportedreceived)
        notsupportedreceived.reference_name = "Notsupported Received"

        crossbarerror = register_class.cBooleanDMTerminator(self,
                {'name': 'Crossbar Error',
                'offset': 71,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(crossbarerror)
        crossbarerror.reference_name = "Crossbar Error"

        mailboxupdated = register_class.cBooleanDMTerminator(self,
                {'name': 'Mailbox Updated',
                'offset': 72,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(mailboxupdated)
        mailboxupdated.reference_name = "Mailbox Updated"

        i2cexternalppstatus = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Communication error with external PP',
                'offset': 73,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(i2cexternalppstatus)
        i2cexternalppstatus.reference_name = "I2C Communication error with external PP"

        externaldcdcstatuschange = register_class.cBooleanDMTerminator(self,
                {'name': 'External DCDC Status Change',
                'offset': 74,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(externaldcdcstatuschange)
        externaldcdcstatuschange.reference_name = "External DCDC Status Change"

        frssignalreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'FRS Signal Received',
                'offset': 75,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(frssignalreceived)
        frssignalreceived.reference_name = "FRS Signal Received"

        chunkresponsereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Response Received',
                'offset': 76,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(chunkresponsereceived)
        chunkresponsereceived.reference_name = "Chunk Response Received"

        chunkrequestreceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Chunk Request Received',
                'offset': 77,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(chunkrequestreceived)
        chunkrequestreceived.reference_name = "Chunk Request Received"

        alertmessagereceived = register_class.cBooleanDMTerminator(self,
                {'name': 'Alert Message Received',
                'offset': 78,
                'bit length': 1})
        InterruptClearforI2C2_dm.addChild(alertmessagereceived)
        alertmessagereceived.reference_name = "Alert Message Received"

        CommonInterruptClearforI2C2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Common Interrupt Clear for I2C2',
                                                         'offset': 80,
                                                         'bit length': 83})
        self.dataModel.addChild(CommonInterruptClearforI2C2_dm)

        patchloaded = register_class.cBooleanDMTerminator(self,
                {'name': 'Patch Loaded',
                'offset': 0,
                'bit length': 1})
        CommonInterruptClearforI2C2_dm.addChild(patchloaded)
        patchloaded.reference_name = "Patch Loaded"

        readyforpatch = register_class.cBooleanDMTerminator(self,
                {'name': 'Ready for Patch',
                'offset': 1,
                'bit length': 1})
        CommonInterruptClearforI2C2_dm.addChild(readyforpatch)
        readyforpatch.reference_name = "Ready for Patch"

        i2ccontrollernacked = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C Controller NACKed',
                'offset': 2,
                'bit length': 1})
        CommonInterruptClearforI2C2_dm.addChild(i2ccontrollernacked)
        i2ccontrollernacked.reference_name = "I2C Controller NACKed"

        update_function = get_updater_function("intclear2_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cstatus_0x1a_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Status',
                                           'address': 0x1a,
                                           'byte length': 5,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Status',
                                                         'offset': 0,
                                                         'bit length': 40})
        plugpresent = register_class.cListDMTerminator(self,
                {'name': 'Plug Present',
                    'offset': 0,
                    'bit length': 1})
        plugpresent.setReportList(['No plug is connected', 'A plug is connected'])
        self.dataModel.addChild(plugpresent)
        plugpresent.reference_name = "Plug Present"
        plugpresent.help = "Status of the plug"
        plugpresent.setMaxValue(1)
        connstate = register_class.cListDMTerminator(self,
                {'name': 'Connection State',
                    'offset': 1,
                    'bit length': 3})
        connstate.setReportList(['No connection', 'Port is disabled', 'Audio connection (Ra/Ra)', 'Debug connection (Rd/Rd)', 'No connection Ra detected (Ra but no Rd)', 'Reserved', 'Connection present no Ra detected', 'Connection present Ra detected'])
        self.dataModel.addChild(connstate)
        connstate.reference_name = "Connection State"
        connstate.help = "Details of a connected plug."
        connstate.setMaxValue(7)
        plugorientation = register_class.cListDMTerminator(self,
                {'name': 'Plug Orientation',
                    'offset': 4,
                    'bit length': 1})
        plugorientation.setReportList(['Upside-up orientation (plug CC on CC1)', 'Upside-down orientation(plug CC on CC2)'])
        self.dataModel.addChild(plugorientation)
        plugorientation.reference_name = "Plug Orientation"
        plugorientation.help = "Plug orientation indicator. Indicates port orientation when known (requires connection)."
        plugorientation.setMaxValue(1)
        portrole = register_class.cListDMTerminator(self,
                {'name': 'Port Role',
                    'offset': 5,
                    'bit length': 1})
        portrole.setReportList(['PD Controller is Sink (CCx pull-down active) or port is disabled/disconnected', 'PD Controller is Source (CCx pull-up active)'])
        self.dataModel.addChild(portrole)
        portrole.reference_name = "Port Role"
        portrole.help = "Current state of PD Controller CCx terminations. This also indicates the PD Controller Power Role, once connected. This bit does not toggle during Unattached.* state transitions."
        portrole.setMaxValue(1)
        datarole = register_class.cListDMTerminator(self,
                {'name': 'Data Role',
                    'offset': 6,
                    'bit length': 1})
        datarole.setReportList(['Upward-facing port (UFP)', 'Downward-facing port (DFP)'])
        self.dataModel.addChild(datarole)
        datarole.reference_name = "Data Role"
        datarole.help = "PD controller data role. This is only valid once there is a connection."
        datarole.setMaxValue(1)
        eprmodelsactive = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode ls Active',
                'offset': 7,
                'bit length': 1})
        self.dataModel.addChild(eprmodelsactive)
        eprmodelsactive.reference_name = "EPR Mode ls Active"
        vbusstatus = register_class.cListDMTerminator(self,
                {'name': 'VBUS Status',
                    'offset': 20,
                    'bit length': 2})
        vbusstatus.setReportList(['At vSafe0V (less than 0.8V)', 'At vSafe5V (4.75V to 5.5V)', 'Within expected limits per the USB PD negotiated value', 'Not within any of the other specified ranges'])
        self.dataModel.addChild(vbusstatus)
        vbusstatus.reference_name = "VBUS Status"
        vbusstatus.help = "Indicates the present state of VBUS."
        vbusstatus.setMaxValue(3)
        usbhostpresent = register_class.cListDMTerminator(self,
                {'name': 'USB Host Present',
                    'offset': 22,
                    'bit length': 2})
        usbhostpresent.setReportList(['No far-end device present providing VBUS or PD Controller power role is Source', 'VBUS is being provided by a Port Partner that is a PD device not capable of USB communications', 'VBUS is being provided by a Port Partner that is not a PD device', 'VBUS is being provided by a Port Partner that is a PD device capable of USB communications'])
        self.dataModel.addChild(usbhostpresent)
        usbhostpresent.reference_name = "USB Host Present"
        usbhostpresent.help = "USB host attachment status."
        usbhostpresent.setMaxValue(3)
        actingaslegacy = register_class.cListDMTerminator(self,
                {'name': 'Acting as Legacy',
                    'offset': 24,
                    'bit length': 2})
        actingaslegacy.setReportList(['PD Controller is not in a legacy mode', 'PD Controller is acting like a legacy sink.It will not respond to USB PD message traffic', 'PD Controller is acting like a legacy source. It will not respond to USB PD message traffic', 'PD controller is acting as a legacy sink port until the dead battery flag is cleared'])
        self.dataModel.addChild(actingaslegacy)
        actingaslegacy.reference_name = "Acting as Legacy"
        actingaslegacy.help = "Indicates when PD Controller has gone into a mode where it is acting like a legacy (non PD) device. It can take approximately 10 seconds for the PD controller to determine that it is attached to a legacy source or sink."
        actingaslegacy.setMaxValue(3)
        bist = register_class.cListDMTerminator(self,
                {'name': 'BIST',
                    'offset': 27,
                    'bit length': 1})
        bist.setReportList(['No BIST in progress', 'BIST in progress'])
        self.dataModel.addChild(bist)
        bist.reference_name = "BIST"
        bist.help = "Indicates if a BIST procedure is in progress."
        bist.setMaxValue(1)
        socacktimeout = register_class.cListDMTerminator(self,
                {'name': 'SOC Ack Timeout',
                    'offset': 30,
                    'bit length': 1})
        socacktimeout.setReportList(['SoC has responded timely', 'SoC has not responded timely to assertion of INT_EVENTx.DataStatusUpdate'])
        self.dataModel.addChild(socacktimeout)
        socacktimeout.reference_name = "SOC Ack Timeout"
        socacktimeout.help = "Indicates whether the attached SoC has responded timely."
        socacktimeout.setMaxValue(1)
        amstatus = register_class.cListDMTerminator(self,
                {'name': 'AM Status',
                    'offset': 32,
                    'bit length': 2})
        amstatus.setReportList(['No Alternate Modes attempted', 'At least one Alternate Mode entry successful and none unsuccessful', 'At least one Alternate Mode entry unsuccessful and none successful', 'At least one Alternate Mode entry successful and at least one mode entry unsuccessful'])
        self.dataModel.addChild(amstatus)
        amstatus.reference_name = "AM Status"
        amstatus.help = "Status of alternate mode negotiations."
        amstatus.setMaxValue(3)

        update_function = get_updater_function("status_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class csxconfig_0x1f_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'SX Config',
                                           'address': 0x1f,
                                           'byte length': 24,
                                           'permission': 'RO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'SX Config',
                                                         'offset': 0,
                                                         'bit length': 192})

        S0Config_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'S0 Config',
                                                         'offset': 0,
                                                         'bit length': 4})
        self.dataModel.addChild(S0Config_dm)

        s0configenable = register_class.cBooleanDMTerminator(self,
                {'name': 'S0 Config Enable',
                'offset': 0,
                'bit length': 1})
        S0Config_dm.addChild(s0configenable)
        s0configenable.reference_name = "S0 Config Enable"
        s0configenable.help = "Enables App Config loading upon entry to S0."

        s0configaddress = register_class.cListDMTerminator(self,
                {'name': 'S0 Config Address Port 1',
                    'offset': 1,
                    'bit length': 3})
        s0configaddress.setReportList(['Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        S0Config_dm.addChild(s0configaddress)
        s0configaddress.reference_name = "S0 Config Address Port 1"
        s0configaddress.help = "Port1 virtual address of S0 config. This config will be loaded in S0."
        s0configaddress.setMaxValue(7)

        S3Config_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'S3 Config',
                                                         'offset': 48,
                                                         'bit length': 52})
        self.dataModel.addChild(S3Config_dm)

        s3configenable = register_class.cBooleanDMTerminator(self,
                {'name': 'S3 Config Enable',
                'offset': 0,
                'bit length': 1})
        S3Config_dm.addChild(s3configenable)
        s3configenable.reference_name = "S3 Config Enable"
        s3configenable.help = "Enables App Config loading upon entry to S3."

        s3configaddress = register_class.cListDMTerminator(self,
                {'name': 'S3 Config Address Port 1',
                    'offset': 1,
                    'bit length': 3})
        s3configaddress.setReportList(['Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        S3Config_dm.addChild(s3configaddress)
        s3configaddress.reference_name = "S3 Config Address Port 1"
        s3configaddress.help = "Port1 virtual address of S3 config. This config will be loaded in S3."
        s3configaddress.setMaxValue(7)

        S4Config_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'S4 Config',
                                                         'offset': 96,
                                                         'bit length': 100})
        self.dataModel.addChild(S4Config_dm)

        s4configenable = register_class.cBooleanDMTerminator(self,
                {'name': 'S4 Config Enable',
                'offset': 0,
                'bit length': 1})
        S4Config_dm.addChild(s4configenable)
        s4configenable.reference_name = "S4 Config Enable"
        s4configenable.help = "Enables App Config loading upon entry to S4."

        s4configaddress = register_class.cListDMTerminator(self,
                {'name': 'S4 Config Address Port 1',
                    'offset': 1,
                    'bit length': 3})
        s4configaddress.setReportList(['Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        S4Config_dm.addChild(s4configaddress)
        s4configaddress.reference_name = "S4 Config Address Port 1"
        s4configaddress.help = "Port1 virtual address of S4 config. This config will be loaded in S4."
        s4configaddress.setMaxValue(7)

        S5Config_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'S5 Config',
                                                         'offset': 144,
                                                         'bit length': 148})
        self.dataModel.addChild(S5Config_dm)

        s5configenable = register_class.cBooleanDMTerminator(self,
                {'name': 'S5 Config Enable',
                'offset': 0,
                'bit length': 1})
        S5Config_dm.addChild(s5configenable)
        s5configenable.reference_name = "S5 Config Enable"
        s5configenable.help = "Enables App Config loading upon entry to S5."

        s5configaddress = register_class.cListDMTerminator(self,
                {'name': 'S5 Config Address Port 1',
                    'offset': 1,
                    'bit length': 3})
        s5configaddress.setReportList(['Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        S5Config_dm.addChild(s5configaddress)
        s5configaddress.reference_name = "S5 Config Address Port 1"
        s5configaddress.help = "Port1 virtual address of S5 config. This config will be loaded in S5."
        s5configaddress.setMaxValue(7)

        update_function = get_updater_function("sxconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class csetsxappconfig_0x20_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Set Sx App Config',
                                           'address': 0x20,
                                           'byte length': 2,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Set Sx App Config',
                                                         'offset': 0,
                                                         'bit length': 16})

        SleepState_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sleep State',
                                                         'offset': 0,
                                                         'bit length': 3})
        self.dataModel.addChild(SleepState_dm)

        sleepstate = register_class.cListDMTerminator(self,
                {'name': 'Sleep State',
                    'offset': 0,
                    'bit length': 3})
        sleepstate.setReportList(['S0', 'S3', 'S4', 'S5', 'Reserved'])
        SleepState_dm.addChild(sleepstate)
        sleepstate.reference_name = "Sleep State"
        sleepstate.help = "Current sleep state. When a change in sleep state occurs, a new app config will be applied per the settings in 0x1F"
        sleepstate.setMaxValue(4)

        update_function = get_updater_function("setsxappconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdiscoveredsvids_0x21_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Discovered SVIDs',
                                           'address': 0x21,
                                           'byte length': 33,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Discovered SVIDs',
                                                         'offset': 0,
                                                         'bit length': 264})

        Header_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Header',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.dataModel.addChild(Header_dm)

        numbersvidssop = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number SOP SVIDS',
                                                      'offset': 0,
                                                      'bit length': 4})
        Header_dm.addChild(numbersvidssop)
        numbersvidssop.reference_name = "Number SOP SVIDS"
        numbersvidssop.help = "Number of SVIDs discovered on SOP."
        numbersvidssop.setMaxValue(32)
        numbersvidssop.setMinValue(0)

        numbersvidssopprime = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number SOPPrime SVIDS',
                                                      'offset': 4,
                                                      'bit length': 4})
        Header_dm.addChild(numbersvidssopprime)
        numbersvidssopprime.reference_name = "Number SOPPrime SVIDS"
        numbersvidssopprime.help = "Number of SVIDs discovered on SOP"
        numbersvidssopprime.setMaxValue(32)
        numbersvidssopprime.setMinValue(0)

        SOPResponse_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'SOP Response',
                                                         'offset': 8,
                                                         'bit length': 136})
        self.dataModel.addChild(SOPResponse_dm)

        svidssop0 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOP 0',
                'offset': 0,
                'bit length': 16})
        SOPResponse_dm.addChild(svidssop0)
        svidssop0.reference_name = "SVID SOP 0"
        svidssop0.help = "First SVID supported by SOP port partner"

        svidssop1 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOP 1',
                'offset': 16,
                'bit length': 16})
        SOPResponse_dm.addChild(svidssop1)
        svidssop1.reference_name = "SVID SOP 1"
        svidssop1.help = "Second SVID supported by SOP port partner"

        svidssop2 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOP 2',
                'offset': 32,
                'bit length': 16})
        SOPResponse_dm.addChild(svidssop2)
        svidssop2.reference_name = "SVID SOP 2"
        svidssop2.help = "Third SVID supported by SOP port partner"

        svidssop3 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOP 3',
                'offset': 48,
                'bit length': 16})
        SOPResponse_dm.addChild(svidssop3)
        svidssop3.reference_name = "SVID SOP 3"
        svidssop3.help = "Fourth SVID supported by SOP port partner"

        svidssop4 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOP 4',
                'offset': 64,
                'bit length': 16})
        SOPResponse_dm.addChild(svidssop4)
        svidssop4.reference_name = "SVID SOP 4"
        svidssop4.help = "Fifth SVID supported by SOP port partner"

        svidssop5 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOP 5',
                'offset': 80,
                'bit length': 16})
        SOPResponse_dm.addChild(svidssop5)
        svidssop5.reference_name = "SVID SOP 5"
        svidssop5.help = "Sixth SVID supported by SOP port partner"

        svidssop6 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOP 6',
                'offset': 96,
                'bit length': 16})
        SOPResponse_dm.addChild(svidssop6)
        svidssop6.reference_name = "SVID SOP 6"
        svidssop6.help = "Seventh SVID supported by SOP port partner"

        svidssop7 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOP 7',
                'offset': 112,
                'bit length': 16})
        SOPResponse_dm.addChild(svidssop7)
        svidssop7.reference_name = "SVID SOP 7"
        svidssop7.help = "Eighth SVID supported by SOP port partner"

        SOPPrimeResponse_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'SOP Prime Response',
                                                         'offset': 136,
                                                         'bit length': 264})
        self.dataModel.addChild(SOPPrimeResponse_dm)

        svidssopprime0 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOPPrime 0',
                'offset': 0,
                'bit length': 16})
        SOPPrimeResponse_dm.addChild(svidssopprime0)
        svidssopprime0.reference_name = "SVID SOPPrime 0"
        svidssopprime0.help = "First SVID supported by SOP cable plug"

        svidssopprime1 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOPPrime 1',
                'offset': 16,
                'bit length': 16})
        SOPPrimeResponse_dm.addChild(svidssopprime1)
        svidssopprime1.reference_name = "SVID SOPPrime 1"
        svidssopprime1.help = "Second SVID supported by SOP cable plug"

        svidssopprime2 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOPPrime 2',
                'offset': 32,
                'bit length': 16})
        SOPPrimeResponse_dm.addChild(svidssopprime2)
        svidssopprime2.reference_name = "SVID SOPPrime 2"
        svidssopprime2.help = "Third SVID supported by SOP cable plug"

        svidssopprime3 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOPPrime 3',
                'offset': 48,
                'bit length': 16})
        SOPPrimeResponse_dm.addChild(svidssopprime3)
        svidssopprime3.reference_name = "SVID SOPPrime 3"
        svidssopprime3.help = "Fourth SVID supported by SOP cable plug"

        svidssopprime4 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOPPrime 4',
                'offset': 64,
                'bit length': 16})
        SOPPrimeResponse_dm.addChild(svidssopprime4)
        svidssopprime4.reference_name = "SVID SOPPrime 4"
        svidssopprime4.help = "Fifth SVID supported by SOP cable plug"

        svidssopprime5 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOPPrime 5',
                'offset': 80,
                'bit length': 16})
        SOPPrimeResponse_dm.addChild(svidssopprime5)
        svidssopprime5.reference_name = "SVID SOPPrime 5"
        svidssopprime5.help = "Sixth SVID supported by SOP cable plug"

        svidssopprime6 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOPPrime 6',
                'offset': 96,
                'bit length': 16})
        SOPPrimeResponse_dm.addChild(svidssopprime6)
        svidssopprime6.reference_name = "SVID SOPPrime 6"
        svidssopprime6.help = "Seventh SVID supported by SOP cable plug"

        svidssopprime7 = register_class.cHexDMTerminator(self,
                {'name': 'SVID SOPPrime 7',
                'offset': 112,
                'bit length': 16})
        SOPPrimeResponse_dm.addChild(svidssopprime7)
        svidssopprime7.reference_name = "SVID SOPPrime 7"
        svidssopprime7.help = "Eighth SVID supported by SOP cable plug"

        update_function = get_updater_function("discoveredsvids_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cconnectionmanagerstatus_0x22_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Connection Manager Status',
                                           'address': 0x22,
                                           'byte length': 1,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Connection Manager Status',
                                                         'offset': 0,
                                                         'bit length': 8})

        ConnectionManagerStatus_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Connection Manager Status',
                                                         'offset': 1,
                                                         'bit length': 7})
        self.dataModel.addChild(ConnectionManagerStatus_dm)

        usb2hostconnected = register_class.cListDMTerminator(self,
                {'name': 'USB2 Host Connected',
                    'offset': 0,
                    'bit length': 1})
        usb2hostconnected.setReportList(['No USB2 Host Connected', 'USB2 Host Connected'])
        ConnectionManagerStatus_dm.addChild(usb2hostconnected)
        usb2hostconnected.reference_name = "USB2 Host Connected"
        usb2hostconnected.help = "USB2 Host Connected"
        usb2hostconnected.setMaxValue(1)

        usb3hostconnected = register_class.cListDMTerminator(self,
                {'name': 'USB3 Host Connected',
                    'offset': 1,
                    'bit length': 1})
        usb3hostconnected.setReportList(['No USB3 Host Connected', 'USB3 Host Connected'])
        ConnectionManagerStatus_dm.addChild(usb3hostconnected)
        usb3hostconnected.reference_name = "USB3 Host Connected"
        usb3hostconnected.help = "USB3 Host Connected"
        usb3hostconnected.setMaxValue(1)

        dphostconnected = register_class.cListDMTerminator(self,
                {'name': 'DP Host Connected',
                    'offset': 2,
                    'bit length': 1})
        dphostconnected.setReportList(['No DP Host Connected', 'DP Host Connected'])
        ConnectionManagerStatus_dm.addChild(dphostconnected)
        dphostconnected.reference_name = "DP Host Connected"
        dphostconnected.help = "DP Host Connected"
        dphostconnected.setMaxValue(1)

        tbthostconnected = register_class.cListDMTerminator(self,
                {'name': 'TBT Host Connected',
                    'offset': 3,
                    'bit length': 1})
        tbthostconnected.setReportList(['No TBT Host Connected', 'TBT Host Connected'])
        ConnectionManagerStatus_dm.addChild(tbthostconnected)
        tbthostconnected.reference_name = "TBT Host Connected"
        tbthostconnected.help = "TBT Host Connected"
        tbthostconnected.setMaxValue(1)

        usb4hostconnected = register_class.cListDMTerminator(self,
                {'name': 'USB4 Host Connected',
                    'offset': 4,
                    'bit length': 1})
        usb4hostconnected.setReportList(['No USB4 Host Connected', 'USB4 Host Connected'])
        ConnectionManagerStatus_dm.addChild(usb4hostconnected)
        usb4hostconnected.reference_name = "USB4 Host Connected"
        usb4hostconnected.help = "USB4 Host Connected"
        usb4hostconnected.setMaxValue(1)

        pciehostconnected = register_class.cListDMTerminator(self,
                {'name': 'PCIe Host Connected',
                    'offset': 5,
                    'bit length': 1})
        pciehostconnected.setReportList(['No PCIe Host Connected', 'PCIe Host Connected'])
        ConnectionManagerStatus_dm.addChild(pciehostconnected)
        pciehostconnected.reference_name = "PCIe Host Connected"
        pciehostconnected.help = "PCIe Host Connected"
        pciehostconnected.setMaxValue(1)

        update_function = get_updater_function("connectionmanagerstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cusbconfig_0x23_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'USB Config',
                                           'address': 0x23,
                                           'byte length': 4,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'USB Config',
                                                         'offset': 0,
                                                         'bit length': 32})

        USBConfig_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'USB Config',
                                                         'offset': 13,
                                                         'bit length': 27})
        self.dataModel.addChild(USBConfig_dm)

        hostpresent = register_class.cBooleanDMTerminator(self,
                {'name': 'Host Present',
                'offset': 0,
                'bit length': 1})
        USBConfig_dm.addChild(hostpresent)
        hostpresent.reference_name = "Host Present"
        hostpresent.help = "Host present control. This is used to set the Host Present bit when transmitting the Enter_USB message."

        tbt3supported = register_class.cBooleanDMTerminator(self,
                {'name': 'TBT3 Supported',
                'offset': 1,
                'bit length': 1})
        USBConfig_dm.addChild(tbt3supported)
        tbt3supported.reference_name = "TBT3 Supported"
        tbt3supported.help = "TBT3 support control. This is used to set the TBT Support bit when transmitting the Enter_USB message."

        dpsupported = register_class.cBooleanDMTerminator(self,
                {'name': 'DP Supported',
                'offset': 2,
                'bit length': 1})
        USBConfig_dm.addChild(dpsupported)
        dpsupported.reference_name = "DP Supported"
        dpsupported.help = "DP support control. This is used to set the DP Support bit when transmitting the Enter_USB message."

        pciesupported = register_class.cBooleanDMTerminator(self,
                {'name': 'PCIe Supported',
                'offset': 3,
                'bit length': 1})
        USBConfig_dm.addChild(pciesupported)
        pciesupported.reference_name = "PCIe Supported"
        pciesupported.help = "PCIe control. This is used to set the PCIe Support bit when transmitting the Enter_USB message."

        usb3drd = register_class.cBooleanDMTerminator(self,
                {'name': 'USB3 DRD',
                'offset': 12,
                'bit length': 1})
        USBConfig_dm.addChild(usb3drd)
        usb3drd.reference_name = "USB3 DRD"
        usb3drd.help = "Dual-role data capability for USB3. Assert if capable of operating as a USB3 device."

        usb4drd = register_class.cBooleanDMTerminator(self,
                {'name': 'USB4 DRD',
                'offset': 13,
                'bit length': 1})
        USBConfig_dm.addChild(usb4drd)
        usb4drd.reference_name = "USB4 DRD"
        usb4drd.help = "Dual-role data capability for USB4. Assert if capable of operating as a USB4 device. Note that the USB PD spec requirements dictate that if this bit is asserted, the system also has to be device capable for USB 2.0."

        update_function = get_updater_function("usbconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cusbstatus_0x24_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'USB Status',
                                           'address': 0x24,
                                           'byte length': 9,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'USB Status',
                                                         'offset': 0,
                                                         'bit length': 72})

        USBStatus_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'USB Status',
                                                         'offset': 0,
                                                         'bit length': 7})
        self.dataModel.addChild(USBStatus_dm)

        eudosopsentorreceived = register_class.cListDMTerminator(self,
                {'name': 'EUDO Sop Sent/Received',
                    'offset': 0,
                    'bit length': 2})
        eudosopsentorreceived.setReportList(['No Enter USB', 'Enter USB Timeout', 'Enter USB Failure', 'Enter USB Successful'])
        USBStatus_dm.addChild(eudosopsentorreceived)
        eudosopsentorreceived.reference_name = "EUDO Sop Sent/Received"
        eudosopsentorreceived.help = "USB4 status indicator with Port Partner. This bit is asserted while the USB4 mode is active with Port Partner."
        eudosopsentorreceived.setMaxValue(3)

        usb4requiredplugmode = register_class.cListDMTerminator(self,
                {'name': 'USB4 Required Plug Mode',
                    'offset': 2,
                    'bit length': 2})
        usb4requiredplugmode.setReportList(['None', 'Reserved', 'USB4', 'TBT3'])
        USBStatus_dm.addChild(usb4requiredplugmode)
        usb4requiredplugmode.reference_name = "USB4 Required Plug Mode"
        usb4requiredplugmode.help = "USB4 mode requirement for Cable Plug. This field indicates which mode must be entered on the Cable Plug to enable USB4 mode."
        usb4requiredplugmode.setMaxValue(3)

        usb4modeactiveonplug = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Mode Active on Plug',
                'offset': 4,
                'bit length': 1})
        USBStatus_dm.addChild(usb4modeactiveonplug)
        usb4modeactiveonplug.reference_name = "USB Mode Active on Plug"
        usb4modeactiveonplug.help = "USB4 mode status with Cable Plug. This bit is asserted when the mode required for USB4 has been entered on Cable Plug."

        vproentryfailed = register_class.cBooleanDMTerminator(self,
                {'name': 'Vpro Entry Failed',
                'offset': 5,
                'bit length': 1})
        USBStatus_dm.addChild(vproentryfailed)
        vproentryfailed.reference_name = "Vpro Entry Failed"
        vproentryfailed.help = "vPro mode error. This bit is asserted if an error occurred while trying to enter the vPro mode."

        usbrentryneeded = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Rentry Needed',
                'offset': 6,
                'bit length': 1})
        USBStatus_dm.addChild(usbrentryneeded)
        usbrentryneeded.reference_name = "USB Rentry Needed"
        usbrentryneeded.help = "Asserted when USB Re-entry is needed."

        USB4RxTx_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'USB4 Rx Tx',
                                                         'offset': 21,
                                                         'bit length': 39})
        self.dataModel.addChild(USB4RxTx_dm)

        usb4enterusbrxtx = register_class.cBooleanDMTerminator(self,
                {'name': 'Host Present',
                'offset': 0,
                'bit length': 1})
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "Host Present"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."

        usb4enterusbrxtx = register_class.cBooleanDMTerminator(self,
                {'name': 'USB4 TBT3 Supported',
                'offset': 1,
                'bit length': 1})
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "USB4 TBT3 Supported"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."

        usb4enterusbrxtx = register_class.cBooleanDMTerminator(self,
                {'name': 'USB4 DP Supported',
                'offset': 2,
                'bit length': 1})
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "USB4 DP Supported"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."

        usb4enterusbrxtx = register_class.cBooleanDMTerminator(self,
                {'name': 'USB4 PCIe Supported',
                'offset': 3,
                'bit length': 1})
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "USB4 PCIe Supported"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."

        usb4enterusbrxtx = register_class.cListDMTerminator(self,
                {'name': 'Cable Current',
                    'offset': 4,
                    'bit length': 2})
        usb4enterusbrxtx.setReportList(['No Vbus', 'Reserved', '3A', '5A'])
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "Cable Current"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."
        usb4enterusbrxtx.setMaxValue(3)

        usb4enterusbrxtx = register_class.cListDMTerminator(self,
                {'name': 'Cable Type',
                    'offset': 6,
                    'bit length': 2})
        usb4enterusbrxtx.setReportList(['Passive', 'Active Retimer', 'Active Redriver', 'OpticallyIsolated'])
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "Cable Type"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."
        usb4enterusbrxtx.setMaxValue(3)

        usb4enterusbrxtx = register_class.cListDMTerminator(self,
                {'name': 'Cable Speed',
                    'offset': 8,
                    'bit length': 3})
        usb4enterusbrxtx.setReportList(['USB2', 'USB32Gen1', 'USB32Gen2', 'USB4'])
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "Cable Speed"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."
        usb4enterusbrxtx.setMaxValue(3)

        usb4enterusbrxtx = register_class.cBooleanDMTerminator(self,
                {'name': 'USB3 DRD',
                'offset': 12,
                'bit length': 1})
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "USB3 DRD"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."

        usb4enterusbrxtx = register_class.cBooleanDMTerminator(self,
                {'name': 'USB4 DRD',
                'offset': 13,
                'bit length': 1})
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "USB4 DRD"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."

        usb4enterusbrxtx = register_class.cListDMTerminator(self,
                {'name': 'USB Mode',
                    'offset': 15,
                    'bit length': 3})
        usb4enterusbrxtx.setReportList(['USB2', 'USB3', 'USB4'])
        USB4RxTx_dm.addChild(usb4enterusbrxtx)
        usb4enterusbrxtx.reference_name = "USB Mode"
        usb4enterusbrxtx.help = "Enter_USB Data Object (EUDO). This follows the USB PD definition for EUDO, it is sent by the DFP and received by the UFP."
        usb4enterusbrxtx.setMaxValue(2)

        TBTRxTx_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'TBT Rx Tx',
                                                         'offset': 40,
                                                         'bit length': 72})
        self.dataModel.addChild(TBTRxTx_dm)

        tbtentermodevdodatarxtx = register_class.cHexDMTerminator(self,
                {'name': 'TBT Enter Mode VDO Data Rx Tx',
                'offset': 0,
                'bit length': 32})
        TBTRxTx_dm.addChild(tbtentermodevdodatarxtx)
        tbtentermodevdodatarxtx.reference_name = "TBT Enter Mode VDO Data Rx Tx"
        tbtentermodevdodatarxtx.help = "vPro mode VDO. This is the VDO received by the UFP or transmitted by the DFP when vPro mode was entered."

        update_function = get_updater_function("usbstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cconnectionmanagercontrol_0x25_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Connection Manager Control',
                                           'address': 0x25,
                                           'byte length': 1,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Connection Manager Control',
                                                         'offset': 0,
                                                         'bit length': 8})

        ConnectionManagerControl_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Connection Manager Control',
                                                         'offset': 1,
                                                         'bit length': 7})
        self.dataModel.addChild(ConnectionManagerControl_dm)

        usb2hostconnected = register_class.cListDMTerminator(self,
                {'name': 'USB2 Host Connected',
                    'offset': 0,
                    'bit length': 1})
        usb2hostconnected.setReportList(['No USB2 Host Connected', 'USB2 Host Connected'])
        ConnectionManagerControl_dm.addChild(usb2hostconnected)
        usb2hostconnected.reference_name = "USB2 Host Connected"
        usb2hostconnected.help = "USB2 Host Connected"
        usb2hostconnected.setMaxValue(1)

        usb3hostconnected = register_class.cListDMTerminator(self,
                {'name': 'USB3 Host Connected',
                    'offset': 1,
                    'bit length': 1})
        usb3hostconnected.setReportList(['No USB3 Host Connected', 'USB3 Host Connected'])
        ConnectionManagerControl_dm.addChild(usb3hostconnected)
        usb3hostconnected.reference_name = "USB3 Host Connected"
        usb3hostconnected.help = "USB3 Host Connected"
        usb3hostconnected.setMaxValue(1)

        dphostconnected = register_class.cListDMTerminator(self,
                {'name': 'DP Host Connected',
                    'offset': 2,
                    'bit length': 1})
        dphostconnected.setReportList(['No DP Host Connected', 'DP Host Connected'])
        ConnectionManagerControl_dm.addChild(dphostconnected)
        dphostconnected.reference_name = "DP Host Connected"
        dphostconnected.help = "DP Host Connected"
        dphostconnected.setMaxValue(1)

        tbthostconnected = register_class.cListDMTerminator(self,
                {'name': 'TBT Host Connected',
                    'offset': 3,
                    'bit length': 1})
        tbthostconnected.setReportList(['No TBT Host Connected', 'TBT Host Connected'])
        ConnectionManagerControl_dm.addChild(tbthostconnected)
        tbthostconnected.reference_name = "TBT Host Connected"
        tbthostconnected.help = "TBT Host Connected"
        tbthostconnected.setMaxValue(1)

        usb4hostconnected = register_class.cListDMTerminator(self,
                {'name': 'USB4 Host Connected',
                    'offset': 4,
                    'bit length': 1})
        usb4hostconnected.setReportList(['No USB4 Host Connected', 'USB4 Host Connected'])
        ConnectionManagerControl_dm.addChild(usb4hostconnected)
        usb4hostconnected.reference_name = "USB4 Host Connected"
        usb4hostconnected.help = "USB4 Host Connected"
        usb4hostconnected.setMaxValue(1)

        pciehostconnected = register_class.cListDMTerminator(self,
                {'name': 'PCIe Host Connected',
                    'offset': 5,
                    'bit length': 1})
        pciehostconnected.setReportList(['No PCIe Host Connected', 'PCIe Host Connected'])
        ConnectionManagerControl_dm.addChild(pciehostconnected)
        pciehostconnected.reference_name = "PCIe Host Connected"
        pciehostconnected.help = "PCIe Host Connected"
        pciehostconnected.setMaxValue(1)

        update_function = get_updater_function("connectionmanagercontrol_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cpowerpathstatus_0x26_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Power Path Status',
                                           'address': 0x26,
                                           'byte length': 5,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Power Path Status',
                                                         'offset': 0,
                                                         'bit length': 40})

        self.setAsShared()
        ppcable1switch = register_class.cListDMTerminator(self,
                {'name': 'PPCable1 Switch',
                    'offset': 0,
                    'bit length': 2})
        ppcable1switch.setReportList(['PP_CABLE1 switch disabled', 'PP_CABLE1 switch currently disabled. The PD controller is waiting for PP5V pin to go high', 'PP_CABLE1 switch CC1 enabled', 'PP_CABLE1 switch CC2 enabled'])
        self.dataModel.addChild(ppcable1switch)
        ppcable1switch.reference_name = "PPCable1 Switch"
        ppcable1switch.help = "Indicates current state of PP_CABLE1 switch."
        ppcable1switch.setMaxValue(3)
        pp1switch = register_class.cListDMTerminator(self,
                {'name': 'PP1 Switch',
                    'offset': 6,
                    'bit length': 3})
        pp1switch.setReportList(['PP1 switch disabled', 'PP1 switch currently disabled due to fault', 'PP1 switch enabled'])
        self.dataModel.addChild(pp1switch)
        pp1switch.reference_name = "PP1 Switch"
        pp1switch.help = "Indicates current state of PP1 switch (PP_5V1)."
        pp1switch.setMaxValue(2)
        pp3switch = register_class.cListDMTerminator(self,
                {'name': 'PP3 Switch',
                    'offset': 12,
                    'bit length': 3})
        pp3switch.setReportList(['PP3 switch disabled', 'PP3 switch currently disabled due to fault', 'PP3 switch enabled (system output)', 'PP3 switch enabled (system input)'])
        self.dataModel.addChild(pp3switch)
        pp3switch.reference_name = "PP3 Switch"
        pp3switch.help = "Indicates current state of PP3 (PP_EXT1)."
        pp3switch.setMaxValue(3)
        pp5switch = register_class.cListDMTerminator(self,
                {'name': 'PP5 Switch',
                    'offset': 18,
                    'bit length': 3})
        pp5switch.setReportList(['PP5 switch disabled', 'The PP5 switch is currently disabled due to fault (system output)', 'PP5 switch enabled (system output)', 'PP5 switch enabled (system input)'])
        self.dataModel.addChild(pp5switch)
        pp5switch.reference_name = "PP5 Switch"
        pp5switch.help = "Indicates current state of PP5 (Virtual)."
        pp5switch.setMaxValue(3)
        pp1overcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'PP1 Overcurrent',
                'offset': 28,
                'bit length': 1})
        self.dataModel.addChild(pp1overcurrent)
        pp1overcurrent.reference_name = "PP1 Overcurrent"
        pp1overcurrent.help = "PP_5V1 overcurrent indicator. Asserted if an overcurrent conditions exists on PP1 switch (PP_5V1)."
        ppcable1overcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'PPCable1 Overcurrent',
                'offset': 34,
                'bit length': 1})
        self.dataModel.addChild(ppcable1overcurrent)
        ppcable1overcurrent.reference_name = "PPCable1 Overcurrent"
        ppcable1overcurrent.help = "PP_CABLE1 overcurrent indicator. Asserted if an overcurrent condition exists on PP_CABLE1 (VCONN)."
        powersource = register_class.cListDMTerminator(self,
                {'name': 'Power Source',
                    'offset': 38,
                    'bit length': 2})
        powersource.setReportList(['Reserved', 'PD Controller is powered from VIN_3V3', 'Dead Battery flag is set (PD Controller is powered from VBUS)'])
        self.dataModel.addChild(powersource)
        powersource.reference_name = "Power Source"
        powersource.help = "Indicates current PD Controller power source. NOTE: Since the Dead Battery flag forces PD Controller to be powered from VBUS, only 10b is valid when this flag is set. Any other setting indicates that the Dead Battery flag is not set."
        powersource.setMaxValue(2)

        update_function = get_updater_function("powerpathstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cglobalsystemconfig_0x27_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Global System Configuration',
                                           'address': 0x27,
                                           'byte length': 14,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Global System Configuration',
                                                         'offset': 0,
                                                         'bit length': 112})

        self.setAsShared()
        ppcable1config = register_class.cListDMTerminator(self,
                {'name': 'PP Cable1 Switch Config',
                    'offset': 0,
                    'bit length': 1})
        ppcable1config.setReportList(['PP Cable Switch Not Used', 'PP Cable Switch as Output,Guaranteed 4.5-5.5V'])
        self.dataModel.addChild(ppcable1config)
        ppcable1config.reference_name = "PP Cable1 Switch Config"
        ppcable1config.help = "Enable PP_CABLE1. If this bit is asserted the PD controller will enable VCONN on PP_CABLE1 when required for USB specification compliance."
        ppcable1config.setMaxValue(1)
        pp5config = register_class.cListDMTerminator(self,
                {'name': 'PP5 Config',
                    'offset': 4,
                    'bit length': 2})
        pp5config.setReportList(['Not used (disabled)', 'PP5 configured as source'])
        self.dataModel.addChild(pp5config)
        pp5config.reference_name = "PP5 Config"
        pp5config.help = "PP5 configuration (Virtual)."
        pp5config.setMaxValue(1)
        pp1config = register_class.cListDMTerminator(self,
                {'name': 'PP1 Config',
                    'offset': 8,
                    'bit length': 3})
        pp1config.setReportList(['Not used (disabled)', 'PP1 configured as source'])
        self.dataModel.addChild(pp1config)
        pp1config.reference_name = "PP1 Config"
        pp1config.help = "PP1 configuration (PP_5V1)."
        pp1config.setMaxValue(1)
        ilimovershoot = register_class.cListDMTerminator(self,
                {'name': 'ILIM Over Shoot',
                    'offset': 14,
                    'bit length': 2})
        ilimovershoot.setReportList(['0 mA', '100 mA', '200 mA'])
        self.dataModel.addChild(ilimovershoot)
        ilimovershoot.reference_name = "ILIM Over Shoot"
        ilimovershoot.help = "PP_5V ILIM configuration. Controls the amount of overshoot used by the FW to select the current limit for the PP5V to Px_VBUS."
        ilimovershoot.setMaxValue(2)
        pp3config = register_class.cListDMTerminator(self,
                {'name': 'PP3 Config',
                    'offset': 16,
                    'bit length': 3})
        pp3config.setReportList(['PP3 not used and disabled', 'PP3 configured for Source (output)', 'PP3 configured for Sink (input)', 'PP3 configured for Sink (input) but will wait for SYS_RDY  before closing the switch', 'PP3 configured for Sink (input) and Source (output)', 'PP3 configured for Sink (input) and Source (output) but will wait for SYS_RDY before closing the switch'])
        self.dataModel.addChild(pp3config)
        pp3config.reference_name = "PP3 Config"
        pp3config.help = "PP3 configuration. This register configures PP3 switch controls."
        pp3config.setMaxValue(5)
        rcpthreshold = register_class.cListDMTerminator(self,
                {'name': 'RCP Threshold',
                    'offset': 22,
                    'bit length': 2})
        rcpthreshold.setReportList(['6 mV (nominal)', '8 mV (nominal)', '10 mV (nominal)', '12 mV (nominal)'])
        self.dataModel.addChild(rcpthreshold)
        rcpthreshold.reference_name = "RCP Threshold"
        rcpthreshold.help = "Threshold used for RCP on PP_EXT."
        rcpthreshold.setMaxValue(3)
        tbtcontrollertype = register_class.cListDMTerminator(self,
                {'name': 'TBT Controller Type',
                    'offset': 26,
                    'bit length': 3})
        tbtcontrollertype.setReportList(['Default', 'AR', 'TR or later Ridge platform', 'ICL or later Lake platform', 'GR Platform', 'BR Platform'])
        self.dataModel.addChild(tbtcontrollertype)
        tbtcontrollertype.reference_name = "TBT Controller Type"
        tbtcontrollertype.help = "Type of TBT controller. Controls specific behavior for different TBT controllers. See documentation for each TBT controller for details."
        tbtcontrollertype.setMaxValue(5)
        enableoneufppolicy = register_class.cBooleanDMTerminator(self,
                {'name': 'Enable One UFP Policy',
                'offset': 29,
                'bit length': 1})
        self.dataModel.addChild(enableoneufppolicy)
        enableoneufppolicy.reference_name = "Enable One UFP Policy"
        enableoneufppolicy.help = "Enable bit for simple UFP policy manager."
        enablespm = register_class.cBooleanDMTerminator(self,
                {'name': 'Enable SPM',
                'offset': 30,
                'bit length': 1})
        self.dataModel.addChild(enablespm)
        enablespm.reference_name = "Enable SPM"
        enablespm.help = "Enable bit for simple source power management. See Simple Power Management Feature section in User Reference. The SPM feature also requires that the Prevent_High_Current_Contract_Event GPIO Event be assigned to one of the GPIOs or that the host issue the Trig 4CC task to initialize the Rp advertisement. Otherwise, the initial advertisement as configured in the MinimumCurrentAdvertisement field will persist indefinitely."
        multiportsinknonoverlaptime = register_class.cListDMTerminator(self,
                {'name': 'MultiPort Sink Non Overlap Time',
                    'offset': 31,
                    'bit length': 2})
        multiportsinknonoverlaptime.setReportList(['1 ms', '5 ms', '10 ms', '15 ms'])
        self.dataModel.addChild(multiportsinknonoverlaptime)
        multiportsinknonoverlaptime.reference_name = "MultiPort Sink Non Overlap Time"
        multiportsinknonoverlaptime.help = "Delay configuration for MultiPortSinkPolicy. Controls the amount of time a new Sink input path closes after the old Sink input path opens. This forms a break-before-make condition when controlling Sink paths from both ports. This is only applicable when MultiPortSinkPolicy = 01b and applies to externally controlled switch paths (PP3 or PP4). This feature may be deprecated in the future."
        multiportsinknonoverlaptime.setMaxValue(3)
        i2ctimeout = register_class.cListDMTerminator(self,
                {'name': 'I2C Timeout',
                    'offset': 34,
                    'bit length': 3})
        i2ctimeout.setReportList(['25 ms', '50 ms', '75 ms', '100 ms', '125 ms', '150 ms', '175 ms', '1000 ms'])
        self.dataModel.addChild(i2ctimeout)
        i2ctimeout.reference_name = "I2C Timeout"
        i2ctimeout.help = "I2C bus timeout. The PD controller will reset its I2C target hardware if for some reason it holds the SCL line low for more than the time selected in this register. This prevents locking up the I2C bus. This applies to both I2C1s_SCL and I2C2s_SCL."
        i2ctimeout.setMaxValue(7)
        disableeepromupdates = register_class.cBooleanDMTerminator(self,
                {'name': 'Disable EEPROM Updates',
                'offset': 37,
                'bit length': 1})
        self.dataModel.addChild(disableeepromupdates)
        disableeepromupdates.reference_name = "Disable EEPROM Updates"
        disableeepromupdates.help = "EEPROM updates not allowed if this bit asserted."
        minimumcurrentadvertisement = register_class.cListDMTerminator(self,
                {'name': 'Minimum Current Advertisement',
                    'offset': 39,
                    'bit length': 1})
        minimumcurrentadvertisement.setReportList(['0.9 A (USB default during an implicit contract)', '1.5 A'])
        self.dataModel.addChild(minimumcurrentadvertisement)
        minimumcurrentadvertisement.reference_name = "Minimum Current Advertisement"
        minimumcurrentadvertisement.help = "Configuration for SPM. If the PD controller is configured to automatically reduce the current advertisement, it reduces to this value."
        minimumcurrentadvertisement.setMaxValue(1)
        i2cecvoltagethreshold = register_class.cListDMTerminator(self,
                {'name': 'I2C EC Voltage Threshold',
                    'offset': 40,
                    'bit length': 1})
        i2cecvoltagethreshold.setReportList(['1.8 V', '3.3 V'])
        self.dataModel.addChild(i2cecvoltagethreshold)
        i2cecvoltagethreshold.reference_name = "I2C EC Voltage Threshold"
        i2cecvoltagethreshold.help = "Pull-up voltage for I2C_EC. This is set to 1.8V by default."
        i2cecvoltagethreshold.setMaxValue(1)
        i2c2svoltagethreshold = register_class.cListDMTerminator(self,
                {'name': 'I2C 2S Voltage Threshold',
                    'offset': 41,
                    'bit length': 1})
        i2c2svoltagethreshold.setReportList(['1.8 V', '3.3 V'])
        self.dataModel.addChild(i2c2svoltagethreshold)
        i2c2svoltagethreshold.reference_name = "I2C 2S Voltage Threshold"
        i2c2svoltagethreshold.help = "Pull-up voltage for I2C2s. This is set to 1.8V by default."
        i2c2svoltagethreshold.setMaxValue(1)
        i2c3mvoltagethreshold = register_class.cListDMTerminator(self,
                {'name': 'I2C 3M Voltage Threshold',
                    'offset': 42,
                    'bit length': 1})
        i2c3mvoltagethreshold.setReportList(['1.8 V', '3.3 V'])
        self.dataModel.addChild(i2c3mvoltagethreshold)
        i2c3mvoltagethreshold.reference_name = "I2C 3M Voltage Threshold"
        i2c3mvoltagethreshold.help = "Pull-up voltage for I2C3m. This is set to 3.3V by default."
        i2c3mvoltagethreshold.setMaxValue(1)
        usbdefaultcurrent = register_class.cHexDMTerminator(self,
                {'name': 'USB Default Current',
                'offset': 43,
                'bit length': 2})
        self.dataModel.addChild(usbdefaultcurrent)
        usbdefaultcurrent.reference_name = "USB Default Current"
        usbdefaultcurrent.help = "This field selects the value for USB default current. It is used in conjunction with the MinimumCurrentAdvertisement field."
        eprsupportedassource = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Supported As Source',
                'offset': 45,
                'bit length': 1})
        self.dataModel.addChild(eprsupportedassource)
        eprsupportedassource.reference_name = "EPR Supported As Source"
        eprsupportedassink = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Supported As Sink',
                'offset': 46,
                'bit length': 1})
        self.dataModel.addChild(eprsupportedassink)
        eprsupportedassink.reference_name = "EPR Supported As Sink"
        enablesxamneg = register_class.cBooleanDMTerminator(self,
                {'name': 'Enable AM entry/exit on low-power mode exit/entry',
                'offset': 47,
                'bit length': 1})
        self.dataModel.addChild(enablesxamneg)
        enablesxamneg.reference_name = "Enable AM entry/exit on low-power mode exit/entry"
        frscurrentlimit = register_class.cListDMTerminator(self,
                {'name': 'FRS Current Limit',
                    'offset': 48,
                    'bit length': 1})
        frscurrentlimit.setReportList(['Normal current clamp', 'Maximize current clamp'])
        self.dataModel.addChild(frscurrentlimit)
        frscurrentlimit.reference_name = "FRS Current Limit"
        frscurrentlimit.help = "Current clamp during FRS. Controls current limit during the fast turn on pulse for PP_5V1 and PP_5V2 during fast-role swap."
        frscurrentlimit.hide()
        frscurrentlimit.setMaxValue(1)
        frspulsewidth = register_class.cHexDMTerminator(self,
                {'name': 'FRS Pulse Width',
                'offset': 49,
                'bit length': 5})
        self.dataModel.addChild(frspulsewidth)
        frspulsewidth.reference_name = "FRS Pulse Width"
        frspulsewidth.help = "FRS pulse width configuration. This sets the pulse width for the fast-turn on circuit for PP_5V1 and PP_5V2 during fast-role swap. It is recommended to use the value 0x0D."
        frspulsewidth.hide()
        crossbarpollingmode = register_class.cListDMTerminator(self,
                {'name': 'Crossbar Polling Mode',
                    'offset': 54,
                    'bit length': 1})
        crossbarpollingmode.setReportList(['Interrupt Mode', 'Polling Mode'])
        self.dataModel.addChild(crossbarpollingmode)
        crossbarpollingmode.reference_name = "Crossbar Polling Mode"
        crossbarpollingmode.help = "Assert this bit to enable Crossbar Polling Mode. If this bit is disabled Crossbar Interrupt Mode will be used."
        crossbarpollingmode.setMaxValue(1)
        crossbarconfigtype1extended = register_class.cListDMTerminator(self,
                {'name': 'Crossbar Config Type 1 Extended',
                    'offset': 55,
                    'bit length': 1})
        crossbarconfigtype1extended.setReportList(['Type 1 Write', 'Type 1 Extended Write'])
        self.dataModel.addChild(crossbarconfigtype1extended)
        crossbarconfigtype1extended.reference_name = "Crossbar Config Type 1 Extended"
        crossbarconfigtype1extended.help = "Assert this bit to enable Crossbar Type 1 Extended Write. If this bit is disabled Crossbar Type 1 Write will be used."
        crossbarconfigtype1extended.setMaxValue(1)
        externaldcdcstatuspollinginterval = register_class.cHexDMTerminator(self,
                {'name': 'External DCDC Status Polling Interval',
                'offset': 56,
                'bit length': 8})
        self.dataModel.addChild(externaldcdcstatuspollinginterval)
        externaldcdcstatuspollinginterval.reference_name = "External DCDC Status Polling Interval"
        port1i2c2stargetaddress = register_class.cHexDMTerminator(self,
                {'name': 'Port1 I2C2 Target Address',
                'offset': 64,
                'bit length': 8})
        self.dataModel.addChild(port1i2c2stargetaddress)
        port1i2c2stargetaddress.reference_name = "Port1 I2C2 Target Address"
        port1i2c2stargetaddress.help = "Target address for Port 1 on I2C2s."
        port2i2c2stargetaddress = register_class.cHexDMTerminator(self,
                {'name': 'Port2 I2C2 Target Address',
                'offset': 72,
                'bit length': 8})
        self.dataModel.addChild(port2i2c2stargetaddress)
        port2i2c2stargetaddress.reference_name = "Port2 I2C2 Target Address"
        port2i2c2stargetaddress.help = "Target address for Port 2 on I2C2s."
        port2i2c2stargetaddress.hide()
        vsyspreventshighpower = register_class.cBooleanDMTerminator(self,
                {'name': 'Vsys Prevents High Power',
                'offset': 80,
                'bit length': 1})
        self.dataModel.addChild(vsyspreventshighpower)
        vsyspreventshighpower.reference_name = "Vsys Prevents High Power"
        vsyspreventshighpower.help = "Halts setting up External DCDC configuration until 5V power is present from the system. Will not configure any DCDC devices in Dead-Battery Mode"
        waitforvin3v3 = register_class.cBooleanDMTerminator(self,
                {'name': 'Wait for VIN_3V3',
                'offset': 81,
                'bit length': 1})
        self.dataModel.addChild(waitforvin3v3)
        waitforvin3v3.reference_name = "Wait for VIN_3V3"
        waitforvin3v3.help = "Stalls the PD in PTCH mode until Vsys is present. Meant for Desktop designs only"
        waitforminpowerindb = register_class.cBooleanDMTerminator(self,
                {'name': 'Wait for Minimum Power',
                'offset': 82,
                'bit length': 1})
        self.dataModel.addChild(waitforminpowerindb)
        waitforminpowerindb.reference_name = "Wait for Minimum Power"
        waitforminpowerindb.help = "Stalls the PD in PTCH mode until a power connection is made that meets the needed conditions then continues initialization"

        update_function = get_updater_function("globalsystemconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cportconfig_0x28_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Port Configuration',
                                           'address': 0x28,
                                           'byte length': 17,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Port Configuration',
                                                         'offset': 0,
                                                         'bit length': 136})

        PortConfig_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Port Config',
                                                         'offset': 0,
                                                         'bit length': 130})
        self.dataModel.addChild(PortConfig_dm)

        typecstatemachine = register_class.cListDMTerminator(self,
                {'name': 'TypeC State machine',
                    'offset': 0,
                    'bit length': 2})
        typecstatemachine.setReportList(['Sink state machine only', 'Source state machine only', 'DRP state machine', 'Type-C state-machine is disabled (CC pins are high-z)'])
        PortConfig_dm.addChild(typecstatemachine)
        typecstatemachine.reference_name = "TypeC State machine"
        typecstatemachine.help = "Port Configuration.#filter_filter21# This field will be overriden by SPM engine when SPM is enabled.  It is not recommended to override SPM value.  GUI must ensure HI to this register while SPM is running is not accesible.  If one desires to override the SPM driven value, it is allowed however care must be taken to place the port in correct TypeC State for the desired operation.  When this field is overriden by external controller, SPM does not take any action until the next SPM event.#/ph#"
        typecstatemachine.setMaxValue(3)

        typecsupportoptions = register_class.cListDMTerminator(self,
                {'name': 'TypeC Support Options',
                    'offset': 8,
                    'bit length': 2})
        typecsupportoptions.setReportList(['No Type-C optional states are supported', 'Try.SRC state is supported as a DRP', 'Try.SNK state is supported as a DRP', 'Reserved'])
        PortConfig_dm.addChild(typecsupportoptions)
        typecsupportoptions.reference_name = "TypeC Support Options"
        typecsupportoptions.help = "Configuration for optional features. This register controls whether optional Type-C state machine states are supported. NOTE: These states are mutually-exclusive and these options only exist when specific Type-C state machines are used."
        typecsupportoptions.setMaxValue(3)

        disablepd = register_class.cBooleanDMTerminator(self,
                {'name': 'Disable PD',
                'offset': 10,
                'bit length': 1})
        PortConfig_dm.addChild(disablepd)
        disablepd.reference_name = "Disable PD"
        disablepd.help = "Assert this bit to disable USB PD."

        usbcommcapable = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Communication Capable',
                'offset': 11,
                'bit length': 1})
        PortConfig_dm.addChild(usbcommcapable)
        usbcommcapable.reference_name = "USB Communication Capable"
        usbcommcapable.help = "USB communications capable. Assert this bit in systems that are USB communications capable."

        debugaccessorysupport = register_class.cBooleanDMTerminator(self,
                {'name': 'DebugAccessory Support',
                'offset': 12,
                'bit length': 1})
        PortConfig_dm.addChild(debugaccessorysupport)
        debugaccessorysupport.reference_name = "DebugAccessory Support"

        usb3rate = register_class.cListDMTerminator(self,
                {'name': 'USB3 Rate',
                    'offset': 13,
                    'bit length': 2})
        usb3rate.setReportList(['USB3 not supported', 'USB3 Gen1 signaling rate supported', 'USB3 Gen2 signaling rate supported', 'Reserved'])
        PortConfig_dm.addChild(usb3rate)
        usb3rate.reference_name = "USB3 Rate"
        usb3rate.help = "USB3 configuration."
        usb3rate.setMaxValue(3)

        crossbari2ccontrollerenable = register_class.cListDMTerminator(self,
                {'name': 'Crossbar I2C Controller enable',
                    'offset': 15,
                    'bit length': 1})
        crossbari2ccontrollerenable.setReportList(['Crossbar mux is disabled on the I2C3 Controller', 'Crossbar mux is enabled on the I2C3 Controller'])
        PortConfig_dm.addChild(crossbari2ccontrollerenable)
        crossbari2ccontrollerenable.reference_name = "Crossbar I2C Controller enable"
        crossbari2ccontrollerenable.help = "Crossbar mux I2C Controller Enable."
        crossbari2ccontrollerenable.setMaxValue(1)

        vbusovpusage = register_class.cListDMTerminator(self,
                {'name': 'VBUS OVP Usage',
                    'offset': 16,
                    'bit length': 2})
        vbusovpusage.setReportList(['100%', '105%', '111%', '114%'])
        PortConfig_dm.addChild(vbusovpusage)
        vbusovpusage.reference_name = "VBUS OVP Usage"
        vbusovpusage.help = "OVP configuration settings. These two bits are used to select the OVP trip-point. The PD controller automatically computes the lowest threshold that does not overlap with the expected maximum voltage (including maximum tolerance allowed by USB PD specification). The OVP trip-point will be set at the selected percentage of the computed threshold."
        vbusovpusage.setMaxValue(3)

        softstart = register_class.cListDMTerminator(self,
                {'name': 'Soft Start',
                    'offset': 18,
                    'bit length': 2})
        softstart.setReportList(['0.41 V/ms (typical)', '0.79 V/ms (typical)', '1.57 V/ms (typical)', '3.39 V/ms (typical)'])
        PortConfig_dm.addChild(softstart)
        softstart.reference_name = "Soft Start"
        softstart.help = "Soft start configuration settings. Controls the soft start for the sinking power path switch."
        softstart.setMaxValue(3)

        ovp4pp5v = register_class.cListDMTerminator(self,
                {'name': 'OVP for PP5V',
                    'offset': 20,
                    'bit length': 2})
        ovp4pp5v.setReportList(['Use setting 0: 5.25 V (typical)', 'Use setting 1: 5.5 V (typical)', 'Use setting 2: 5.8 V (typical)', 'Use setting 3: 6.1 V (typical)'])
        PortConfig_dm.addChild(ovp4pp5v)
        ovp4pp5v.reference_name = "OVP for PP5V"
        ovp4pp5v.help = "VBUS OVP settings while sourcing from PP5V. This applies while sourcing through PP1 or PP2. See data-sheet for voltage range."
        ovp4pp5v.setMaxValue(3)

        crossbarconfigtype1extended = register_class.cListDMTerminator(self,
                {'name': 'Crossbar Config Type 1 Extended',
                    'offset': 22,
                    'bit length': 1})
        crossbarconfigtype1extended.setReportList(['Type 1 Write', 'Type 1 Extended Write'])
        PortConfig_dm.addChild(crossbarconfigtype1extended)
        crossbarconfigtype1extended.reference_name = "Crossbar Config Type 1 Extended"
        crossbarconfigtype1extended.help = "Assert this bit to enable Crossbar Type 1 Extended Write. If this bit is disabled Crossbar Type 1 Write will be used."
        crossbarconfigtype1extended.setMaxValue(1)

        vbussinkuvptriphv = register_class.cListDMTerminator(self,
                {'name': 'VBUS Sink UVP Trip HV',
                    'offset': 24,
                    'bit length': 3})
        vbussinkuvptriphv.setReportList(['5%', '10%', '15%', '20%', '25%', '30%', '40%', '50%'])
        PortConfig_dm.addChild(vbussinkuvptriphv)
        vbussinkuvptriphv.reference_name = "VBUS Sink UVP Trip HV"
        vbussinkuvptriphv.help = "VBUS disconnect when power role is sink. The disconnect threshold is set to (1-VBUS_SinkUvpTripHV)*(min expected VBUS). The 000b setting follows the USB-C specification requirements. Use a non-zero value for additional margin."
        vbussinkuvptriphv.setMaxValue(7)

        apdovbusuvpthreshold = register_class.cHexDMTerminator(self,
                {'name': 'APDO VBUS UVP Threshold',
                'offset': 27,
                'bit length': 2})
        PortConfig_dm.addChild(apdovbusuvpthreshold)
        apdovbusuvpthreshold.reference_name = "APDO VBUS UVP Threshold"

        apdoilimovershoot = register_class.cHexDMTerminator(self,
                {'name': 'APDO ILIM Over Shoot',
                'offset': 29,
                'bit length': 2})
        PortConfig_dm.addChild(apdoilimovershoot)
        apdoilimovershoot.reference_name = "APDO ILIM Over Shoot"

        apdovbusuvptrippointoffset = register_class.cHexDMTerminator(self,
                {'name': 'APDO VBUS Uvp TripPoint Offset',
                'offset': 32,
                'bit length': 16})
        PortConfig_dm.addChild(apdovbusuvptrippointoffset)
        apdovbusuvptrippointoffset.reference_name = "APDO VBUS Uvp TripPoint Offset"

        vbusforvalidppsstatus = register_class.cHexDMTerminator(self,
                {'name': 'VBUS For Valid PPS Status',
                'offset': 48,
                'bit length': 16})
        PortConfig_dm.addChild(vbusforvalidppsstatus)
        vbusforvalidppsstatus.reference_name = "VBUS For Valid PPS Status"

        extdcdctype = register_class.cListDMTerminator(self,
                {'name': 'External DCDC Type',
                    'offset': 64,
                    'bit length': 8})
        extdcdctype.setReportList(['Marina Bay', 'Reserved'])
        PortConfig_dm.addChild(extdcdctype)
        extdcdctype.reference_name = "External DCDC Type"
        extdcdctype.help = "External DCDC Type"
        extdcdctype.setMaxValue(1)

        sinkmodei2cirqconfig = register_class.cBooleanDMTerminator(self,
                {'name': 'Sink Mode I2C IRQ Config',
                'offset': 72,
                'bit length': 1})
        PortConfig_dm.addChild(sinkmodei2cirqconfig)
        sinkmodei2cirqconfig.reference_name = "Sink Mode I2C IRQ Config"
        sinkmodei2cirqconfig.help = "Enables support for GPIO10 to I2C IRQ"

        greaterthanthresholdvoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Greater Than Threshold Voltage',
                                                      'offset': 80,
                                                      'bit length': 16})
        greaterthanthresholdvoltage.dictScaleUnits = {' V': 0.05}
        greaterthanthresholdvoltage.defaultUnit = ' V'
        PortConfig_dm.addChild(greaterthanthresholdvoltage)
        greaterthanthresholdvoltage.reference_name = "Greater Than Threshold Voltage"
        greaterthanthresholdvoltage.help = "Threshold voltage to trigger the GREATER_THAN_THRESHOLD_VOLTAGE GPIO Event (50mV per LSB)."
        greaterthanthresholdvoltage.setMaxValue(65535)
        greaterthanthresholdvoltage.setMinValue(0)

        fixedpdoilimovershoot = register_class.cListDMTerminator(self,
                {'name': 'Fixed PDO ILIM',
                    'offset': 128,
                    'bit length': 2})
        fixedpdoilimovershoot.setReportList(['125mA', '250mA', '400mA', '500mA'])
        PortConfig_dm.addChild(fixedpdoilimovershoot)
        fixedpdoilimovershoot.reference_name = "Fixed PDO ILIM"
        fixedpdoilimovershoot.help = "Added current offset for Fixed PDO Contract"
        fixedpdoilimovershoot.setMaxValue(3)

        update_function = get_updater_function("portconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cportcontrol_0x29_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Port Control',
                                           'address': 0x29,
                                           'byte length': 4,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Port Control',
                                                         'offset': 0,
                                                         'bit length': 32})
        typeccurrent = register_class.cListDMTerminator(self,
                {'name': 'TypeC Current',
                    'offset': 0,
                    'bit length': 2})
        typeccurrent.setReportList(['USB Default Current', '1.5 A', '3.0 A', 'Reserved'])
        self.dataModel.addChild(typeccurrent)
        typeccurrent.reference_name = "TypeC Current"
        typeccurrent.help = "Type-C Current advertisement. This setting is ignored if a Source role is not enabled and active. This setting is also ignored during an explicit USB PD contract, where the Rp value is used for collision avoidance as required by the USB PD specification. Note that when PP5V is low, the FW will only use the default Type-C current regardless of the value in this field."
        typeccurrent.setMaxValue(3)
        processswaptosink = register_class.cBooleanDMTerminator(self,
                {'name': 'Process Swap to Sink',
                'offset': 4,
                'bit length': 1})
        self.dataModel.addChild(processswaptosink)
        processswaptosink.reference_name = "Process Swap to Sink"
        processswaptosink.help = "Configure response to PR_Swap to sink. If this bit is asserted, the PD Controller will automatically accept a PR_Swap request to become a Sink.  Otherwise, the PD Controller will reject such a request."
        initiateswaptosink = register_class.cBooleanDMTerminator(self,
                {'name': 'Initiate Swap to Sink',
                'offset': 5,
                'bit length': 1})
        self.dataModel.addChild(initiateswaptosink)
        initiateswaptosink.reference_name = "Initiate Swap to Sink"
        initiateswaptosink.help = "Configure PR_Swap to sink initiation. If this bit is asserted, the PD Controller automatically initiates and sends PR_Swap requests to the Port Partner when appropriate if presently operating as Source (P/C)."
        processswaptosource = register_class.cBooleanDMTerminator(self,
                {'name': 'Process Swap to Source',
                'offset': 6,
                'bit length': 1})
        self.dataModel.addChild(processswaptosource)
        processswaptosource.reference_name = "Process Swap to Source"
        processswaptosource.help = "Configure response to PR_Swap to source. If this bit is asserted, the PD Controller will automatically accept a PR_Swap request to become a Source.  Otherwise, the PD Controller will reject such a request."
        initiateswaptosource = register_class.cBooleanDMTerminator(self,
                {'name': 'Initiate Swap to Source',
                'offset': 7,
                'bit length': 1})
        self.dataModel.addChild(initiateswaptosource)
        initiateswaptosource.reference_name = "Initiate Swap to Source"
        initiateswaptosource.help = "Configure PR_Swap to source initiation. If this bit is asserted, the PD Controller automatically initiates and sends PR_Swap requests to the Port Partner when appropriate if presently operating as Sink (C/P)."
        automaticcaprequest = register_class.cBooleanDMTerminator(self,
                {'name': 'Automatic Cap Request',
                'offset': 8,
                'bit length': 1})
        self.dataModel.addChild(automaticcaprequest)
        automaticcaprequest.reference_name = "Automatic Cap Request"
        autoppsstatusen = register_class.cBooleanDMTerminator(self,
                {'name': 'Auto PPS Status Enable',
                'offset': 10,
                'bit length': 1})
        self.dataModel.addChild(autoppsstatusen)
        autoppsstatusen.reference_name = "Auto PPS Status Enable"
        autoppsstatusen.help = "When this bit is enabled, the PD controller calculates the message field then automatically returns PPS_Status message when a Get_PPS_Status message is received.  When this bit is cleared, register value in TX_PPS_SDB(0x7A) prior to clearing the bit is retained until the TX_PPS_SDB is overridden by an external controller."
        retimerfwupdate = register_class.cBooleanDMTerminator(self,
                {'name': 'Retimer FW Update',
                'offset': 11,
                'bit length': 1})
        self.dataModel.addChild(retimerfwupdate)
        retimerfwupdate.reference_name = "Retimer FW Update"
        retimerfwupdate.help = "Enable Retimer FW update. Setting to 1 causes the PD controller to enter the retimer FW update state. Setting to 0 exits the update state."
        processswaptoufp = register_class.cBooleanDMTerminator(self,
                {'name': 'Process Swap to UFP',
                'offset': 12,
                'bit length': 1})
        self.dataModel.addChild(processswaptoufp)
        processswaptoufp.reference_name = "Process Swap to UFP"
        processswaptoufp.help = "Configure response to DR_Swap to UFP. If this bit is asserted, the PD Controller will automatically accept a DR_Swap request to become a UFP.  Otherwise, the PD Controller will reject such a request."
        initiateswaptoufp = register_class.cBooleanDMTerminator(self,
                {'name': 'Initiate Swap to UFP',
                'offset': 13,
                'bit length': 1})
        self.dataModel.addChild(initiateswaptoufp)
        initiateswaptoufp.reference_name = "Initiate Swap to UFP"
        initiateswaptoufp.help = "Configure DR_Swap to UFP initiation. If this bit is asserted, the PD Controller automatically initiates and sends DR_Swap requests to the Port Partner when appropriate if presently operating as DFP."
        processswaptodfp = register_class.cBooleanDMTerminator(self,
                {'name': 'Process Swap to DFP',
                'offset': 14,
                'bit length': 1})
        self.dataModel.addChild(processswaptodfp)
        processswaptodfp.reference_name = "Process Swap to DFP"
        processswaptodfp.help = "Configure response to DR_Swap to DFP. If this bit is asserted, the PD Controller will automatically accept a DR_Swap request to become a DFP.  Otherwise, the PD Controller will reject such a request."
        initiateswaptodfp = register_class.cBooleanDMTerminator(self,
                {'name': 'Initiate Swap to DFP',
                'offset': 15,
                'bit length': 1})
        self.dataModel.addChild(initiateswaptodfp)
        initiateswaptodfp.reference_name = "Initiate Swap to DFP"
        initiateswaptodfp.help = "Configure DR_Swap to DFP initiation. If this bit is asserted, the PD Controller automatically initiates and sends DR_Swap requests to the Port Partner when appropriate if presently operating as UFP."
        automaticidrequest = register_class.cBooleanDMTerminator(self,
                {'name': 'Automatic ID Request',
                'offset': 16,
                'bit length': 1})
        self.dataModel.addChild(automaticidrequest)
        automaticidrequest.reference_name = "Automatic ID Request"
        automaticidrequest.help = "Configure identity discovery for SOP. If this bit is asserted, the PD Controller will automatically issue Discover Identity VDM for all SOP types when appropriate."
        amintrusivemode = register_class.cListDMTerminator(self,
                {'name': 'AM Intrusive Mode',
                    'offset': 17,
                    'bit length': 1})
        amintrusivemode.setReportList(['Do not operate in Alternate Mode Intrusive mode', 'Operate in Alternate Mode Intrusive mode'])
        self.dataModel.addChild(amintrusivemode)
        amintrusivemode.reference_name = "AM Intrusive Mode"
        amintrusivemode.help = "Assert to allow host to manage Alt mode process. It is recommended that this bit be set to 0b so that the PD controller can automatically handle Alternate Mode entry and exit."
        amintrusivemode.setMaxValue(1)
        forceusb3gen1 = register_class.cListDMTerminator(self,
                {'name': 'Force USB3 Gen1',
                    'offset': 18,
                    'bit length': 1})
        forceusb3gen1.setReportList(['DATA_STATUS.USB3Speed register will always report full capabilities', 'DATA_STATUS.USB3Speed register will report USB3 Gen1 only'])
        self.dataModel.addChild(forceusb3gen1)
        forceusb3gen1.reference_name = "Force USB3 Gen1"
        forceusb3gen1.help = "Forced Gen1 operation"
        forceusb3gen1.setMaxValue(1)
        unconstrainedpower = register_class.cListDMTerminator(self,
                {'name': 'Unconstrained Power',
                    'offset': 19,
                    'bit length': 1})
        unconstrainedpower.setReportList(['There is no external power besides VBUS (if present) for the system', 'The system is receiving external power from a source other than VBUS'])
        self.dataModel.addChild(unconstrainedpower)
        unconstrainedpower.reference_name = "Unconstrained Power"
        unconstrainedpower.help = "External power configuration. This also sets the Unconstrained Power bit defined by USB PD. When this bit is changed from 1 to 0 the PD controller will not attempt a power role swap with the Port Partner. If a power role swap is desired the host should issue a SWSr 4CC command."
        unconstrainedpower.setMaxValue(1)
        enablecurrentmonitor = register_class.cBooleanDMTerminator(self,
                {'name': 'Enable Current Monitor',
                'offset': 20,
                'bit length': 1})
        self.dataModel.addChild(enablecurrentmonitor)
        enablecurrentmonitor.reference_name = "Enable Current Monitor"
        enablecurrentmonitor.help = "Assert this bit to enable the current monitor (peak and average) that are read from the ADC_RESULTS register. While asserted the PD controller will remain in the active power mode."
        sinkcontrolbit = register_class.cListDMTerminator(self,
                {'name': 'Sink Control Bit',
                    'offset': 21,
                    'bit length': 1})
        sinkcontrolbit.setReportList(['UnconstrainedPower does not affect sink switches', 'When the Unconstrained Power bit is 1 then PP_EXT1 and PP_EXT2 are disabled'])
        self.dataModel.addChild(sinkcontrolbit)
        sinkcontrolbit.reference_name = "Sink Control Bit"
        sinkcontrolbit.help = "Configure reaction to UnconstrainedPower bit. This configures whether the state of the UnconstrainedPower bit affects PP3 or PP4."
        sinkcontrolbit.setMaxValue(1)
        frswapenabled = register_class.cBooleanDMTerminator(self,
                {'name': 'FR Swap Enabled',
                'offset': 22,
                'bit length': 1})
        self.dataModel.addChild(frswapenabled)
        frswapenabled.reference_name = "FR Swap Enabled"
        frswapenabled.help = "Enable Fast-Role Swap as initial sink. Assert this bit to enable Fast-Role Swap detection. If the amount of current the Port Partner requires during Fast-Role Swap process is less than or equal to the current in TX_SOURCE_CAPS.TXSourcePDO1 when an FRS signal is detected, then the device will perform a fast-role swap."
        vconncurrentlimit = register_class.cListDMTerminator(self,
                {'name': 'VCONN Current Limit',
                    'offset': 23,
                    'bit length': 1})
        vconncurrentlimit.setReportList(['410 mA (typical)', '590 mA (typical)'])
        self.dataModel.addChild(vconncurrentlimit)
        vconncurrentlimit.reference_name = "VCONN Current Limit"
        vconncurrentlimit.help = "Current limit configuration for PP_CABLEx."
        vconncurrentlimit.setMaxValue(1)
        resistor15kpresent = register_class.cListDMTerminator(self,
                {'name': 'Resistor 15k Present',
                    'offset': 24,
                    'bit length': 1})
        resistor15kpresent.setReportList(['System does NOT have 15 kOhm pull-down', 'System has 15 kOhm pull-down'])
        self.dataModel.addChild(resistor15kpresent)
        resistor15kpresent.reference_name = "Resistor 15k Present"
        resistor15kpresent.help = "Configure D+ and D- termination. Assert this bit if there is a 15kOhm pull-down on D+ and D- (USB2.0 Host Phy pull-downs enabled).  This should not be used for DCP or DCP Auto modes."
        resistor15kpresent.setMaxValue(1)
        dcdenable = register_class.cBooleanDMTerminator(self,
                {'name': 'DCD Enable',
                'offset': 25,
                'bit length': 1})
        self.dataModel.addChild(dcdenable)
        dcdenable.reference_name = "DCD Enable"
        dcdenable.help = "Enable for Data-Contact Detection. Assert this bit to enable Data Contact Detect as defined by BC 1.2 for sinks."
        dcdenable.hide()
        chargeradvertiseenable = register_class.cListDMTerminator(self,
                {'name': 'Charger Advertise Enable',
                    'offset': 26,
                    'bit length': 3})
        chargeradvertiseenable.setReportList(['Do not emulate any legacy charger', 'BC 1.2 CDP only', 'BC 1.2 DCP only', 'Reserved1', 'Reserved2', 'DCP Auto 1 (2.7V and DCP)', 'DCP Auto 2 (1.2V 2.7V and DCP)', 'Reserved3'])
        self.dataModel.addChild(chargeradvertiseenable)
        chargeradvertiseenable.reference_name = "Charger Advertise Enable"
        chargeradvertiseenable.help = "Configure the types of legacy chargers to emulate."
        chargeradvertiseenable.setMaxValue(7)
        usbdisable = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Disable',
                'offset': 29,
                'bit length': 1})
        self.dataModel.addChild(usbdisable)
        usbdisable.reference_name = "USB Disable"
        usbdisable.help = "Overrides USB connections in DATA_STATUS. If this bit is asserted, it forces USB2Connection and USB3Connection in the DATA_STATUS (0x5F) register to be zero."
        chargerdetectenable = register_class.cListDMTerminator(self,
                {'name': 'Charger Detect Enable',
                    'offset': 30,
                    'bit length': 2})
        chargerdetectenable.setReportList(['Do not detect any legacy chargers', 'Detect BC 1.2 chargers', 'Reserved do not use', 'Detect BC 1.2 and proprietary legacy chargers'])
        self.dataModel.addChild(chargerdetectenable)
        chargerdetectenable.reference_name = "Charger Detect Enable"
        chargerdetectenable.help = "Configure the types of legacy chargers to detect."
        chargerdetectenable.setMaxValue(3)

        update_function = get_updater_function("portcontrol_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cmisccontrol_0x2b_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Misc Control',
                                           'address': 0x2b,
                                           'byte length': 8,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Misc Control',
                                                         'offset': 0,
                                                         'bit length': 64})

        self.setAsShared()
        peportpriority = register_class.cBooleanDMTerminator(self,
                {'name': 'PE Port Priority',
                'offset': 7,
                'bit length': 1})
        self.dataModel.addChild(peportpriority)
        peportpriority.reference_name = "PE Port Priority"
        peportpriority.help = "Trying new/better way to balance between ports."
        peportpriority.hide()
        uarttraceenable = register_class.cBooleanDMTerminator(self,
                {'name': 'UART Trace Enable',
                'offset': 8,
                'bit length': 1})
        self.dataModel.addChild(uarttraceenable)
        uarttraceenable.reference_name = "UART Trace Enable"
        uarttraceenable.hide()
        dbstenable = register_class.cBooleanDMTerminator(self,
                {'name': 'DBST Enable',
                'offset': 9,
                'bit length': 1})
        self.dataModel.addChild(dbstenable)
        dbstenable.reference_name = "DBST Enable"
        dbstenable.hide()
        overrideufphardresetsoponcableerr = register_class.cBooleanDMTerminator(self,
                {'name': 'Override Ufp Hardreset Sop On CableErr',
                'offset': 10,
                'bit length': 1})
        self.dataModel.addChild(overrideufphardresetsoponcableerr)
        overrideufphardresetsoponcableerr.reference_name = "Override Ufp Hardreset Sop On CableErr"
        overrideufphardresetsoponcableerr.help = "If set to 1 will override HardReset of SOP No response."
        overrideufphardresetsoponcableerr.hide()
        numofreattemptsonnoresp = register_class.cHexDMTerminator(self,
                {'name': 'Number of Reattempts on No Response',
                'offset': 14,
                'bit length': 2})
        self.dataModel.addChild(numofreattemptsonnoresp)
        numofreattemptsonnoresp.reference_name = "Number of Reattempts on No Response"
        numofreattemptsonnoresp.help = "Reserved."
        numofreattemptsonnoresp.hide()
        uartgpio = register_class.cHexDMTerminator(self,
                {'name': 'UART GPIO',
                'offset': 16,
                'bit length': 8})
        self.dataModel.addChild(uartgpio)
        uartgpio.reference_name = "UART GPIO"
        uartgpio.hide()
        uartdivider = register_class.cHexDMTerminator(self,
                {'name': 'UART Divider',
                'offset': 24,
                'bit length': 8})
        self.dataModel.addChild(uartdivider)
        uartdivider.reference_name = "UART Divider"
        uartdivider.hide()
        overridedpstatushandling = register_class.cBooleanDMTerminator(self,
                {'name': 'Override DP Status Handling',
                'offset': 32,
                'bit length': 1})
        self.dataModel.addChild(overridedpstatushandling)
        overridedpstatushandling.reference_name = "Override DP Status Handling"
        overridedpstatushandling.help = "Override DP Status Handling"
        overridedpstatushandling.hide()

        MiscControl_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Misc Control',
                                                         'offset': 3,
                                                         'bit length': 6})
        self.dataModel.addChild(MiscControl_dm)

        pdspecminorversion = register_class.cHexDMTerminator(self,
                {'name': 'PD Spec Minor Version',
                'offset': 0,
                'bit length': 4})
        MiscControl_dm.addChild(pdspecminorversion)
        pdspecminorversion.reference_name = "PD Spec Minor Version"
        pdspecminorversion.hide()

        overrideufpattentionspacing = register_class.cBooleanDMTerminator(self,
                {'name': 'Override Ufp Attention Spacing',
                'offset': 2,
                'bit length': 1})
        MiscControl_dm.addChild(overrideufpattentionspacing)
        overrideufpattentionspacing.reference_name = "Override Ufp Attention Spacing"
        overrideufpattentionspacing.help = "Override Ufp Attention Spacing"

        update_function = get_updater_function("misccontrol_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cbootstatus_0x2d_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Boot Flags',
                                           'address': 0x2d,
                                           'byte length': 5,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Boot Flags',
                                                         'offset': 0,
                                                         'bit length': 40})

        self.setAsShared()
        patchheadererr = register_class.cBooleanDMTerminator(self,
                {'name': 'Patch Header Error',
                'offset': 0,
                'bit length': 1})
        self.dataModel.addChild(patchheadererr)
        patchheadererr.reference_name = "Patch Header Error"
        patchheadererr.help = "Asserted when a patch bundle header errors."
        deadbatteryflag = register_class.cBooleanDMTerminator(self,
                {'name': 'Dead Battery Flag',
                'offset': 2,
                'bit length': 1})
        self.dataModel.addChild(deadbatteryflag)
        deadbatteryflag.reference_name = "Dead Battery Flag"
        deadbatteryflag.help = "Dead Battery flag indicator. This bit is asserted when the PD Controller booted in dead-battery mode."
        i2ceeprompresent = register_class.cBooleanDMTerminator(self,
                {'name': 'I2C EEPROM Present',
                'offset': 3,
                'bit length': 1})
        self.dataModel.addChild(i2ceeprompresent)
        i2ceeprompresent.reference_name = "I2C EEPROM Present"
        i2ceeprompresent.help = "EEPROM presence indicator. This bit is asserted when an EEPROM device was discovered on I2C3m during boot."
        region0 = register_class.cBooleanDMTerminator(self,
                {'name': 'Region 0',
                'offset': 4,
                'bit length': 1})
        self.dataModel.addChild(region0)
        region0.reference_name = "Region 0"
        region0.help = "Region 0 attempted indicator. This bit is asserted when Region 0 of the EEPROM memory was attempted."
        region1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Region 1',
                'offset': 5,
                'bit length': 1})
        self.dataModel.addChild(region1)
        region1.reference_name = "Region 1"
        region1.help = "Region 1 attempted indicator. This bit is asserted when Region 1 of the EEPROM memory was attempted."
        region0invalid = register_class.cBooleanDMTerminator(self,
                {'name': 'Region 0 Invalid',
                'offset': 6,
                'bit length': 1})
        self.dataModel.addChild(region0invalid)
        region0invalid.reference_name = "Region 0 Invalid"
        region0invalid.help = "Region 0 header status indicator. This bit is asserted when Region 0 header of the EEPROM memory was invalid."
        region1invalid = register_class.cBooleanDMTerminator(self,
                {'name': 'Region 1 Invalid',
                'offset': 7,
                'bit length': 1})
        self.dataModel.addChild(region1invalid)
        region1invalid.reference_name = "Region 1 Invalid"
        region1invalid.help = "Region 1 header status indicator. This bit is asserted when Region 1 header of the EEPROM memory was invalid."
        region0eepromerr = register_class.cBooleanDMTerminator(self,
                {'name': 'Region 0 EEPROM Error',
                'offset': 8,
                'bit length': 1})
        self.dataModel.addChild(region0eepromerr)
        region0eepromerr.reference_name = "Region 0 EEPROM Error"
        region0eepromerr.help = "Region 0 status indicator. This bit is asserted when an error occurred attempting to read Region 0 of EEPROM memory. A retry may have been successful."
        region1eepromerr = register_class.cBooleanDMTerminator(self,
                {'name': 'Region 1 EEPROM Error',
                'offset': 9,
                'bit length': 1})
        self.dataModel.addChild(region1eepromerr)
        region1eepromerr.reference_name = "Region 1 EEPROM Error"
        region1eepromerr.help = "Region 1 status indicator. This bit is asserted when an error occurred attempting to read Region 1 of EEPROM memory. A retry may have been successful."
        patchdownloaderr = register_class.cBooleanDMTerminator(self,
                {'name': 'Patch Download Error',
                'offset': 10,
                'bit length': 1})
        self.dataModel.addChild(patchdownloaderr)
        patchdownloaderr.reference_name = "Patch Download Error"
        patchdownloaderr.help = "Asserted when a patch download error occurs."
        region0crcfail = register_class.cBooleanDMTerminator(self,
                {'name': 'Region 0 CRC Fail',
                'offset': 12,
                'bit length': 1})
        self.dataModel.addChild(region0crcfail)
        region0crcfail.reference_name = "Region 0 CRC Fail"
        region0crcfail.help = "Region 0 CRC status indicator. This bit is asserted when the CRC of data read from Region 0 of EEPROM memory failed."
        region1crcfail = register_class.cBooleanDMTerminator(self,
                {'name': 'Region 1 CRC Fail',
                'offset': 13,
                'bit length': 1})
        self.dataModel.addChild(region1crcfail)
        region1crcfail.reference_name = "Region 1 CRC Fail"
        region1crcfail.help = "Region 1 CRC status indicator. This bit is asserted when the CRC of data read from Region 1 of EEPROM memory failed."
        pp3switch = register_class.cBooleanDMTerminator(self,
                {'name': 'PP3 Switch',
                'offset': 17,
                'bit length': 1})
        self.dataModel.addChild(pp3switch)
        pp3switch.reference_name = "PP3 Switch"
        pp3switch.help = "PP3 switch status. This bit is asserted when the PP3 sink path was enabled during dead-battery mode"
        pp4switch = register_class.cBooleanDMTerminator(self,
                {'name': 'PP4 Switch',
                'offset': 18,
                'bit length': 1})
        self.dataModel.addChild(pp4switch)
        pp4switch.reference_name = "PP4 Switch"
        pp4switch.help = "PP4 switch status. This bit is asserted when the PP4 sink path was enabled during dead-battery mode"
        mastertsd = register_class.cBooleanDMTerminator(self,
                {'name': 'Master TSD',
                'offset': 19,
                'bit length': 1})
        self.dataModel.addChild(mastertsd)
        mastertsd.reference_name = "Master TSD"
        mastertsd.help = "Master thermal shut-down indicator. This bit is asserted if the PD controller is rebooting after the master thermal sensor caused a reset."
        state = register_class.cDictDMTerminator(self,
                                                     {'name': 'State',
                                                      'offset': 20,
                                                      'bit length': 4})
        state.setReportDict(OrderedDict([(0, 'None'), (1, 'IN_PROGRESS'), (2, 'LOADING_FROM_EEPROM'), (3, 'WAITING_FOR_PATCH'), (4, 'WAITING_FOR_LDO_GOOD'), (5, 'WAITING_FOR_PATCH_I2C_FOREVER'), (15, 'SUCCESS')]))
        self.dataModel.addChild(state)
        state.reference_name = "State"
        state.help = "Present state of boot process.#filter_filter21#"
        state.hide()
        state.setMaxValue(15)
        otpcustomeroai2c = register_class.cHexDMTerminator(self,
                {'name': 'OTP Customer OA I2C',
                'offset': 25,
                'bit length': 2})
        self.dataModel.addChild(otpcustomeroai2c)
        otpcustomeroai2c.reference_name = "OTP Customer OA I2C"
        otpcustomeroai2c.hide()
        patchconfigsource = register_class.cListDMTerminator(self,
                {'name': 'Patch Config Source',
                    'offset': 29,
                    'bit length': 3})
        patchconfigsource.setReportList(['No configuration has been loaded', 'Source-only default configuration 0 has been loaded', 'Source-only default configuration 1 has been loaded', 'Sink-only default configuration 0 has been loaded', 'Sink-only default configuration 1 has been loaded', 'A configuration has been loaded from EEPROM', 'A configuration has been loaded from I2C', 'A configuration has been loaded from SRAM'])
        self.dataModel.addChild(patchconfigsource)
        patchconfigsource.reference_name = "Patch Config Source"
        patchconfigsource.help = "Source of patch configuration. This field indicates the source of the configuration patch that has been successfully loaded."
        patchconfigsource.setMaxValue(7)
        revid = register_class.cHexDMTerminator(self,
                {'name': 'Revision ID',
                'offset': 32,
                'bit length': 8})
        self.dataModel.addChild(revid)
        revid.reference_name = "Revision ID"
        revid.help = "Revision ID for the PD controller."

        update_function = get_updater_function("bootstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cbuilddescription_0x2e_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Build Description',
                                           'address': 0x2e,
                                           'byte length': 49,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Build Description',
                                                         'offset': 0,
                                                         'bit length': 392})

        self.setAsShared()
        builddescription = register_class.cHexDMTerminator(self,
                {'name': 'Build Description',
                'offset': 0,
                'bit length': 392})
        self.dataModel.addChild(builddescription)
        builddescription.reference_name = "Build Description"
        builddescription.help = "Build description. This is an ASCII string that uniquely identifies custom build information."

        update_function = get_updater_function("builddescription_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdeviceinfo_0x2f_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Device Information',
                                           'address': 0x2f,
                                           'byte length': 40,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Device Information',
                                                         'offset': 0,
                                                         'bit length': 320})

        self.setAsShared()
        devicename = register_class.cAsciiDMTerminator(self,
                                                     {'name': 'Device Info',
                                                      'offset': 0,
                                                      'bit length': 320})
        self.dataModel.addChild(devicename)
        devicename.reference_name = "Device Info"
        devicename.help = "Device information. This is an ASCII string with hardware and firmware version information of the PD Controller."

        update_function = get_updater_function("deviceinfo_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

def rxsourcecaps_dm_generator(self):

    SourcePDO2MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO2MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO2MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO2MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    SourcePDO2MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    SourcePDO2MaximumCurrentRXSourceCapFixed.setMinValue(0)
    SourcePDO2MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO2VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO2VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO2VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO2VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    SourcePDO2VoltageRXSourceCapFixed.setMaxValue(1023)
    SourcePDO2VoltageRXSourceCapFixed.setMinValue(0)
    SourcePDO2VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO2PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SourcePDO2PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO2PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    SourcePDO2PeakCurrentRXSourceCapFixed.setMaxValue(3)
    SourcePDO2EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SourcePDO2EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    SourcePDO2MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO2MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO2MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO2MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO2MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO2MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO2MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO2MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO2MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO2MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO2MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO2MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO2MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO2MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO2MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO2MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO2MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO2MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO2MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO2MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO2MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO2MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO2MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO2MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO2MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO2MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO2MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO2MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO2MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO2MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO2MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO2MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO2MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO2MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO2MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO2MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO2MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO2MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO2MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO2MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SourcePDO2MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO2MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO2MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO2MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO2MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO2MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SourcePDO2MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO2MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO2MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO2MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO2MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO2MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SourcePDO2MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO2MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO2MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO2MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO2MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO2PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 27,
            'bit length': 1})
    
    SourcePDO2PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 28,
                'bit length': 2})
    SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO3MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO3MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO3MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO3MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    SourcePDO3MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    SourcePDO3MaximumCurrentRXSourceCapFixed.setMinValue(0)
    SourcePDO3MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO3VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO3VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO3VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO3VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    SourcePDO3VoltageRXSourceCapFixed.setMaxValue(1023)
    SourcePDO3VoltageRXSourceCapFixed.setMinValue(0)
    SourcePDO3VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO3PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SourcePDO3PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO3PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    SourcePDO3PeakCurrentRXSourceCapFixed.setMaxValue(3)
    SourcePDO3EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SourcePDO3EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    SourcePDO3MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO3MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO3MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO3MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO3MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO3MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO3MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO3MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO3MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO3MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO3MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO3MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO3MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO3MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO3MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO3MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO3MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO3MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO3MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO3MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO3MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO3MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO3MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO3MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO3MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO3MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO3MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO3MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO3MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO3MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO3MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO3MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO3MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO3MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO3MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO3MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO3MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO3MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO3MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO3MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SourcePDO3MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO3MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO3MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO3MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO3MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO3MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SourcePDO3MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO3MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO3MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO3MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO3MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO3MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SourcePDO3MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO3MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO3MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO3MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO3MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO3PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 27,
            'bit length': 1})
    
    SourcePDO3PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 28,
                'bit length': 2})
    SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO4MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO4MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO4MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO4MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    SourcePDO4MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    SourcePDO4MaximumCurrentRXSourceCapFixed.setMinValue(0)
    SourcePDO4MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO4VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO4VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO4VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO4VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    SourcePDO4VoltageRXSourceCapFixed.setMaxValue(1023)
    SourcePDO4VoltageRXSourceCapFixed.setMinValue(0)
    SourcePDO4VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO4PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SourcePDO4PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO4PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    SourcePDO4PeakCurrentRXSourceCapFixed.setMaxValue(3)
    SourcePDO4EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SourcePDO4EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    SourcePDO4MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO4MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO4MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO4MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO4MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO4MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO4MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO4MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO4MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO4MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO4MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO4MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO4MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO4MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO4MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO4MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO4MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO4MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO4MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO4MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO4MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO4MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO4MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO4MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO4MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO4MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO4MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO4MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO4MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO4MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO4MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO4MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO4MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO4MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO4MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO4MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO4MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO4MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO4MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO4MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SourcePDO4MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO4MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO4MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO4MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO4MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO4MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SourcePDO4MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO4MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO4MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO4MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO4MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO4MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SourcePDO4MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO4MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO4MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO4MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO4MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO4PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 27,
            'bit length': 1})
    
    SourcePDO4PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 28,
                'bit length': 2})
    SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO5MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO5MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO5MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO5MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    SourcePDO5MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    SourcePDO5MaximumCurrentRXSourceCapFixed.setMinValue(0)
    SourcePDO5MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO5VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO5VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO5VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO5VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    SourcePDO5VoltageRXSourceCapFixed.setMaxValue(1023)
    SourcePDO5VoltageRXSourceCapFixed.setMinValue(0)
    SourcePDO5VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO5PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SourcePDO5PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO5PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    SourcePDO5PeakCurrentRXSourceCapFixed.setMaxValue(3)
    SourcePDO5EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SourcePDO5EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    SourcePDO5MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO5MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO5MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO5MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO5MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO5MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO5MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO5MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO5MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO5MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO5MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO5MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO5MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO5MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO5MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO5MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO5MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO5MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO5MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO5MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO5MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO5MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO5MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO5MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO5MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO5MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO5MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO5MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO5MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO5MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO5MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO5MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO5MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO5MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO5MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO5MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO5MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO5MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO5MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO5MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SourcePDO5MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO5MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO5MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO5MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO5MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO5MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SourcePDO5MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO5MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO5MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO5MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO5MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO5MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SourcePDO5MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO5MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO5MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO5MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO5MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO5PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 27,
            'bit length': 1})
    
    SourcePDO5PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 28,
                'bit length': 2})
    SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO6MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO6MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO6MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO6MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    SourcePDO6MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    SourcePDO6MaximumCurrentRXSourceCapFixed.setMinValue(0)
    SourcePDO6MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO6VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO6VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO6VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO6VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    SourcePDO6VoltageRXSourceCapFixed.setMaxValue(1023)
    SourcePDO6VoltageRXSourceCapFixed.setMinValue(0)
    SourcePDO6VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO6PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SourcePDO6PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO6PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    SourcePDO6PeakCurrentRXSourceCapFixed.setMaxValue(3)
    SourcePDO6EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SourcePDO6EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    SourcePDO6MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO6MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO6MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO6MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO6MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO6MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO6MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO6MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO6MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO6MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO6MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO6MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO6MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO6MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO6MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO6MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO6MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO6MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO6MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO6MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO6MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO6MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO6MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO6MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO6MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO6MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO6MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO6MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO6MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO6MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO6MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO6MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO6MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO6MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO6MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO6MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO6MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO6MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO6MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO6MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SourcePDO6MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO6MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO6MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO6MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO6MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO6MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SourcePDO6MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO6MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO6MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO6MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO6MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO6MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SourcePDO6MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO6MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO6MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO6MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO6MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO6PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 27,
            'bit length': 1})
    
    SourcePDO6PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 28,
                'bit length': 2})
    SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO7MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO7MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO7MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO7MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    SourcePDO7MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    SourcePDO7MaximumCurrentRXSourceCapFixed.setMinValue(0)
    SourcePDO7MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO7VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO7VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO7VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO7VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    SourcePDO7VoltageRXSourceCapFixed.setMaxValue(1023)
    SourcePDO7VoltageRXSourceCapFixed.setMinValue(0)
    SourcePDO7VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO7PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SourcePDO7PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO7PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    SourcePDO7PeakCurrentRXSourceCapFixed.setMaxValue(3)
    SourcePDO7EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SourcePDO7EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    SourcePDO7MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO7MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO7MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO7MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO7MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO7MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO7MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO7MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO7MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO7MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO7MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO7MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO7MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO7MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO7MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO7MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO7MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO7MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO7MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO7MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SourcePDO7MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO7MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO7MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO7MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO7MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO7MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO7MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SourcePDO7MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO7MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO7MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO7MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO7MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO7MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SourcePDO7MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO7MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO7MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO7MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO7MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO7MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO7MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SourcePDO7MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO7MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO7MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO7MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO7MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO7MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SourcePDO7MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO7MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO7MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO7MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO7MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO7MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SourcePDO7MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO7MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO7MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO7MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO7MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO7PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 27,
            'bit length': 1})
    
    SourcePDO7PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 28,
                'bit length': 2})
    SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    EPRSourcePDO1MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO1MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO1MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    EPRSourcePDO1MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO1MaximumCurrentRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO1MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO1VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO1VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO1VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    EPRSourcePDO1VoltageRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO1VoltageRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO1VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO1PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO1PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO1PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    EPRSourcePDO1PeakCurrentRXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO1EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSourcePDO1EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    EPRSourcePDO1MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO1PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO1PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO1PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO1PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO1PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO1PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO2MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO2MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO2MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    EPRSourcePDO2MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO2MaximumCurrentRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO2MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO2VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO2VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO2VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    EPRSourcePDO2VoltageRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO2VoltageRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO2VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO2PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO2PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO2PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    EPRSourcePDO2PeakCurrentRXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO2EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSourcePDO2EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    EPRSourcePDO2MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO2PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO2PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO2PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO2PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO2PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO2PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO3MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO3MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO3MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    EPRSourcePDO3MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO3MaximumCurrentRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO3MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO3VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO3VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO3VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    EPRSourcePDO3VoltageRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO3VoltageRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO3VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO3PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO3PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO3PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    EPRSourcePDO3PeakCurrentRXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO3EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSourcePDO3EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    EPRSourcePDO3MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO3PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO3PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO3PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO3PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO3PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO3PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO4MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO4MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO4MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    EPRSourcePDO4MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO4MaximumCurrentRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO4MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO4VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO4VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO4VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    EPRSourcePDO4VoltageRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO4VoltageRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO4VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO4PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO4PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO4PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    EPRSourcePDO4PeakCurrentRXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO4EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSourcePDO4EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    EPRSourcePDO4MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO4PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO4PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO4PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO4PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO4PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO4PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO5MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO5MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO5MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    EPRSourcePDO5MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO5MaximumCurrentRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO5MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO5VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO5VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO5VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    EPRSourcePDO5VoltageRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO5VoltageRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO5VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO5PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO5PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO5PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    EPRSourcePDO5PeakCurrentRXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO5EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSourcePDO5EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    EPRSourcePDO5MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO5PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO5PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO5PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO5PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO5PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO5PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO6MaximumCurrentRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumCurrentRXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO6MaximumCurrentRXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO6MaximumCurrentRXSourceCapFixed.reference_name = "Maximum Current-RX Source Cap Fixed"
    EPRSourcePDO6MaximumCurrentRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO6MaximumCurrentRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO6MaximumCurrentRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO6VoltageRXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO6VoltageRXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6VoltageRXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO6VoltageRXSourceCapFixed.reference_name = "Voltage-RX Source Cap Fixed"
    EPRSourcePDO6VoltageRXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO6VoltageRXSourceCapFixed.setMinValue(0)
    EPRSourcePDO6VoltageRXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO6PeakCurrentRXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO6PeakCurrentRXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO6PeakCurrentRXSourceCapFixed.reference_name = "Peak Current-RX Source Cap Fixed"
    EPRSourcePDO6PeakCurrentRXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO6EPRModeCapableRXSourceCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSourcePDO6EPRModeCapableRXSourceCapFixed.reference_name = "EPR Mode Capable-RX Source Cap Fixed"
    EPRSourcePDO6MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO6PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO6PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO6PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO6PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO6PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO6PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 1):
        get_child_object(self, [u'Source PDO 1']).unhide()

    else:
        get_child_object(self, [u'Source PDO 1']).hide()

    get_child_object(self, [u'Source PDO 1']).maxpower1 = get_child_object(self, ['Source PDO 1', 'Voltage']).valueToInt()*get_child_object(self, ['Source PDO 1', 'Maximum Current']).valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 2']), SourcePDO2VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 2']), SourcePDO2PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 2']), SourcePDO2EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 2):
        get_child_object(self, [u'Source PDO 2']).unhide()

    else:
        get_child_object(self, [u'Source PDO 2']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 3']), SourcePDO3VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 3']), SourcePDO3PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 3']), SourcePDO3EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 3):
        get_child_object(self, [u'Source PDO 3']).unhide()

    else:
        get_child_object(self, [u'Source PDO 3']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 4']), SourcePDO4VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 4']), SourcePDO4PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 4']), SourcePDO4EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 4):
        get_child_object(self, [u'Source PDO 4']).unhide()

    else:
        get_child_object(self, [u'Source PDO 4']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 5']), SourcePDO5VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 5']), SourcePDO5PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 5']), SourcePDO5EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 5):
        get_child_object(self, [u'Source PDO 5']).unhide()

    else:
        get_child_object(self, [u'Source PDO 5']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 6']), SourcePDO6VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 6']), SourcePDO6PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 6']), SourcePDO6EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 6):
        get_child_object(self, [u'Source PDO 6']).unhide()

    else:
        get_child_object(self, [u'Source PDO 6']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 7']).maxpower = get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 7']), SourcePDO7VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 7']), SourcePDO7PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'Source PDO 7']), SourcePDO7EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 7']).maxpower = get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 7']).maxpower = get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 7):
        get_child_object(self, [u'Source PDO 7']).unhide()

    else:
        get_child_object(self, [u'Source PDO 7']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 1']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 1']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 1']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number of Valid EPR PDOs']).valueToInt() >= 1):
        get_child_object(self, [u'EPR Source PDO 1']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 1']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number of Valid EPR PDOs']).valueToInt() >= 2):
        get_child_object(self, [u'EPR Source PDO 2']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 2']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number of Valid EPR PDOs']).valueToInt() >= 3):
        get_child_object(self, [u'EPR Source PDO 3']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 3']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number of Valid EPR PDOs']).valueToInt() >= 4):
        get_child_object(self, [u'EPR Source PDO 4']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 4']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number of Valid EPR PDOs']).valueToInt() >= 5):
        get_child_object(self, [u'EPR Source PDO 5']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 5']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6VoltageRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Peak Current'], "Peak Current-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6PeakCurrentRXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6EPRModeCapableRXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Peak Current'], "Peak Current-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number of Valid EPR PDOs']).valueToInt() >= 6):
        get_child_object(self, [u'EPR Source PDO 6']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 6']).hide()

    return self.childrenAsListDMGenerator()


class crxsourcecaps_0x30_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Received Source Capabilities',
                                           'address': 0x30,
                                           'byte length': 53,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received Source Capabilities',
                                                         'offset': 0,
                                                         'bit length': 424})

        NumberofSourcePDOs_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Number of Source PDOs',
                                                         'offset': 0,
                                                         'bit length': 7})
        self.dataModel.addChild(NumberofSourcePDOs_dm)

        numvalidpdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid PDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        NumberofSourcePDOs_dm.addChild(numvalidpdos)
        numvalidpdos.reference_name = "Number Valid PDOs"
        numvalidpdos.help = "Number of valid PDOs in this register. Each PDO is 4 bytes. (max of 7)"
        numvalidpdos.setMaxValue(7)
        numvalidpdos.setMinValue(0)
        numvalidpdos.addUpdateRegisterByName("self")

        numvalideprpdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number of Valid EPR PDOs',
                                                      'offset': 3,
                                                      'bit length': 3})
        NumberofSourcePDOs_dm.addChild(numvalideprpdos)
        numvalideprpdos.reference_name = "Number of Valid EPR PDOs"
        numvalideprpdos.setMaxValue(6)
        numvalideprpdos.setMinValue(0)
        numvalideprpdos.addUpdateRegisterByName("self")

        lastsrccapreceivedisepr = register_class.cBooleanDMTerminator(self,
                {'name': 'Last Src Cap Received is EPR',
                'offset': 6,
                'bit length': 1})
        NumberofSourcePDOs_dm.addChild(lastsrccapreceivedisepr)
        lastsrccapreceivedisepr.reference_name = "Last Src Cap Received is EPR"

        SourcePDO1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 1',
                                                         'offset': 8,
                                                         'bit length': 40})
        self.dataModel.addChild(SourcePDO1_dm)

        sourcepdo1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        sourcepdo1.dictScaleUnits = {'A': 0.01}
        sourcepdo1.defaultUnit = 'A'
        SourcePDO1_dm.addChild(sourcepdo1)
        sourcepdo1.reference_name = "Maximum Current"
        sourcepdo1.help = "First Source Capabilities PDO received"
        sourcepdo1.setMaxValue(1023)
        sourcepdo1.setMinValue(0)

        sourcepdo1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        sourcepdo1.dictScaleUnits = {'V': 0.05}
        sourcepdo1.defaultUnit = 'V'
        SourcePDO1_dm.addChild(sourcepdo1)
        sourcepdo1.reference_name = "Voltage"
        sourcepdo1.help = "First Source Capabilities PDO received"
        sourcepdo1.setMaxValue(1023)
        sourcepdo1.setMinValue(0)

        sourcepdo1 = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        sourcepdo1.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO1_dm.addChild(sourcepdo1)
        sourcepdo1.reference_name = "Peak Current"
        sourcepdo1.help = "First Source Capabilities PDO received"
        sourcepdo1.setMaxValue(3)

        sourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Unchunked Extended Message Support',
                'offset': 24,
                'bit length': 1})
        SourcePDO1_dm.addChild(sourcepdo1)
        sourcepdo1.reference_name = "Unchunked Extended Message Support"
        sourcepdo1.help = "First Source Capabilities PDO received"

        sourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Dual Data Role',
                'offset': 25,
                'bit length': 1})
        SourcePDO1_dm.addChild(sourcepdo1)
        sourcepdo1.reference_name = "Dual Data Role"
        sourcepdo1.help = "First Source Capabilities PDO received"
        sourcepdo1.hide()

        sourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Communication Capable',
                'offset': 26,
                'bit length': 1})
        SourcePDO1_dm.addChild(sourcepdo1)
        sourcepdo1.reference_name = "USB Communication Capable"
        sourcepdo1.help = "First Source Capabilities PDO received"

        sourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Unconstrained Power',
                'offset': 27,
                'bit length': 1})
        SourcePDO1_dm.addChild(sourcepdo1)
        sourcepdo1.reference_name = "Unconstrained Power"
        sourcepdo1.help = "First Source Capabilities PDO received"
        sourcepdo1.hide()

        sourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Suspend Supported',
                'offset': 28,
                'bit length': 1})
        SourcePDO1_dm.addChild(sourcepdo1)
        sourcepdo1.reference_name = "USB Suspend Supported"
        sourcepdo1.help = "First Source Capabilities PDO received"

        sourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Dual-Role Power',
                'offset': 29,
                'bit length': 1})
        SourcePDO1_dm.addChild(sourcepdo1)
        sourcepdo1.reference_name = "Dual-Role Power"
        sourcepdo1.help = "First Source Capabilities PDO received"
        sourcepdo1.hide()

        sourcepdo1 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo1.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        
        sourcepdo1.reference_name = "Supply Type"
        sourcepdo1.help = "First Source Capabilities PDO received"
        sourcepdo1.setMaxValue(3)
        sourcepdo1ForceVal = register_class.cForceSetDMTerminator(self,
                                                     {'name': 'Supply Type',
                                                      'offset': 30,
                                                      'bit length': 2,
                                                      'force value': int(0),
                                                      'force display': 'Fixed',
                                                      'display widget' : sourcepdo1})
        sourcepdo1ForceVal.reference_name = "Supply Type"
        SourcePDO1_dm.addChild(sourcepdo1ForceVal)

        SourcePDO1_dm.maxpower1 = 0

        SourcePDO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 2',
                                                         'offset': 40,
                                                         'bit length': 72})
        self.dataModel.addChild(SourcePDO2_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO2_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SourcePDO2_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO2_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 27,
                'bit length': 1})
        SourcePDO2_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 28,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO2_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        sourcepdo2 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo2.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO2_dm.addChild(sourcepdo2)
        sourcepdo2.reference_name = "Supply Type"
        sourcepdo2.help = "Second Source Capabilities PDO received"
        sourcepdo2.setMaxValue(3)
        sourcepdo2.addUpdateRegisterByName("self")

        SourcePDO2_dm.maxpower = 0

        SourcePDO3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 3',
                                                         'offset': 72,
                                                         'bit length': 104})
        self.dataModel.addChild(SourcePDO3_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO3_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SourcePDO3_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO3_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 27,
                'bit length': 1})
        SourcePDO3_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 28,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO3_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        sourcepdo3 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo3.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO3_dm.addChild(sourcepdo3)
        sourcepdo3.reference_name = "Supply Type"
        sourcepdo3.help = "Third Source Capabilities PDO received"
        sourcepdo3.setMaxValue(3)
        sourcepdo3.addUpdateRegisterByName("self")

        SourcePDO3_dm.maxpower = 0

        SourcePDO4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 4',
                                                         'offset': 104,
                                                         'bit length': 136})
        self.dataModel.addChild(SourcePDO4_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO4_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SourcePDO4_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO4_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 27,
                'bit length': 1})
        SourcePDO4_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 28,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO4_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        sourcepdo4 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo4.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO4_dm.addChild(sourcepdo4)
        sourcepdo4.reference_name = "Supply Type"
        sourcepdo4.help = "Fourth Source Capabilities PDO received"
        sourcepdo4.setMaxValue(3)
        sourcepdo4.addUpdateRegisterByName("self")

        SourcePDO4_dm.maxpower = 0

        SourcePDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 5',
                                                         'offset': 136,
                                                         'bit length': 168})
        self.dataModel.addChild(SourcePDO5_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO5_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SourcePDO5_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO5_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 27,
                'bit length': 1})
        SourcePDO5_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 28,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO5_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        sourcepdo5 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo5.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO5_dm.addChild(sourcepdo5)
        sourcepdo5.reference_name = "Supply Type"
        sourcepdo5.help = "Fifth Source Capabilities PDO received"
        sourcepdo5.setMaxValue(3)
        sourcepdo5.addUpdateRegisterByName("self")

        SourcePDO5_dm.maxpower = 0

        SourcePDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 6',
                                                         'offset': 168,
                                                         'bit length': 200})
        self.dataModel.addChild(SourcePDO6_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO6_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SourcePDO6_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO6_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 27,
                'bit length': 1})
        SourcePDO6_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 28,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO6_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        sourcepdo6 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo6.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO6_dm.addChild(sourcepdo6)
        sourcepdo6.reference_name = "Supply Type"
        sourcepdo6.help = "Sixth Source Capabilities PDO received"
        sourcepdo6.setMaxValue(3)
        sourcepdo6.addUpdateRegisterByName("self")

        SourcePDO6_dm.maxpower = 0

        SourcePDO7_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 7',
                                                         'offset': 200,
                                                         'bit length': 232})
        self.dataModel.addChild(SourcePDO7_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO7_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO7_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SourcePDO7_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO7_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO7_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO7_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 27,
                'bit length': 1})
        SourcePDO7_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 28,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO7_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        sourcepdo7 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo7.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO7_dm.addChild(sourcepdo7)
        sourcepdo7.reference_name = "Supply Type"
        sourcepdo7.help = "Seventh Source Capabilities PDO received"
        sourcepdo7.setMaxValue(3)
        sourcepdo7.addUpdateRegisterByName("self")

        SourcePDO7_dm.maxpower = 0

        EPRSourcePDO1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 1',
                                                         'offset': 232,
                                                         'bit length': 264})
        self.dataModel.addChild(EPRSourcePDO1_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO1_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO1_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSourcePDO1_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO1_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO1_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO1_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO1_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO1_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sourcepdo8 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo8.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO1_dm.addChild(sourcepdo8)
        sourcepdo8.reference_name = "Supply Type"
        sourcepdo8.help = "EPR First Source Capabilities PDO received"
        sourcepdo8.setMaxValue(3)
        sourcepdo8.addUpdateRegisterByName("self")

        EPRSourcePDO1_dm.maxpower = 0

        EPRSourcePDO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 2',
                                                         'offset': 264,
                                                         'bit length': 296})
        self.dataModel.addChild(EPRSourcePDO2_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO2_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSourcePDO2_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO2_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO2_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO2_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO2_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sourcepdo9 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo9.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO2_dm.addChild(sourcepdo9)
        sourcepdo9.reference_name = "Supply Type"
        sourcepdo9.help = "EPR Second Source Capabilities PDO received"
        sourcepdo9.setMaxValue(3)
        sourcepdo9.addUpdateRegisterByName("self")

        EPRSourcePDO2_dm.maxpower = 0

        EPRSourcePDO3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 3',
                                                         'offset': 296,
                                                         'bit length': 328})
        self.dataModel.addChild(EPRSourcePDO3_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO3_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSourcePDO3_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO3_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO3_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO3_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO3_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sourcepdo10 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo10.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO3_dm.addChild(sourcepdo10)
        sourcepdo10.reference_name = "Supply Type"
        sourcepdo10.help = "EPR Third Source Capabilities PDO received"
        sourcepdo10.setMaxValue(3)
        sourcepdo10.addUpdateRegisterByName("self")

        EPRSourcePDO3_dm.maxpower = 0

        EPRSourcePDO4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 4',
                                                         'offset': 328,
                                                         'bit length': 360})
        self.dataModel.addChild(EPRSourcePDO4_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO4_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSourcePDO4_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO4_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO4_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO4_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO4_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sourcepdo11 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo11.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO4_dm.addChild(sourcepdo11)
        sourcepdo11.reference_name = "Supply Type"
        sourcepdo11.help = "EPR Fourth Source Capabilities PDO received"
        sourcepdo11.setMaxValue(3)
        sourcepdo11.addUpdateRegisterByName("self")

        EPRSourcePDO4_dm.maxpower = 0

        EPRSourcePDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 5',
                                                         'offset': 360,
                                                         'bit length': 392})
        self.dataModel.addChild(EPRSourcePDO5_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO5_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSourcePDO5_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO5_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO5_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO5_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO5_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sourcepdo12 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo12.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO5_dm.addChild(sourcepdo12)
        sourcepdo12.reference_name = "Supply Type"
        sourcepdo12.help = "EPR Fifth Source Capabilities PDO received"
        sourcepdo12.setMaxValue(3)
        sourcepdo12.addUpdateRegisterByName("self")

        EPRSourcePDO5_dm.maxpower = 0

        EPRSourcePDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 6',
                                                         'offset': 392,
                                                         'bit length': 424})
        self.dataModel.addChild(EPRSourcePDO6_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-RX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO6_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSourcePDO6_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Source Cap Fixed"

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO6_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO6_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO6_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO6_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sourcepdo13 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sourcepdo13.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO6_dm.addChild(sourcepdo13)
        sourcepdo13.reference_name = "Supply Type"
        sourcepdo13.help = "EPR Sixth Source Capabilities PDO received"
        sourcepdo13.setMaxValue(3)
        sourcepdo13.addUpdateRegisterByName("self")

        EPRSourcePDO6_dm.maxpower = 0

        self.dataModel.parent = self
        self.dataModel.setDataModelGenerator(rxsourcecaps_dm_generator)

        update_function = get_updater_function("rxsourcecaps_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

def rxsinkcaps_dm_generator(self):

    SinkPDO2OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO2OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO2OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO2OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    SinkPDO2OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    SinkPDO2OperatingCurrentRXSinkCapFixed.setMinValue(0)
    SinkPDO2VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO2VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO2VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO2VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    SinkPDO2VoltageRXSinkCapFixed.setMaxValue(1023)
    SinkPDO2VoltageRXSinkCapFixed.setMinValue(0)
    SinkPDO2PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO2PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO2PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    SinkPDO2PeakCurrentRXSinkCapFixed.setMaxValue(3)
    SinkPDO2EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SinkPDO2EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    SinkPDO2OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO2OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO2OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO2OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO2OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO2OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO2MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO2MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO2MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO2MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO2MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO2MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO2MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO2MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO2MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO2MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO2MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO2MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO2OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO2OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO2OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO2OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO2OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO2OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO2MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO2MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO2MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO2MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO2MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO2MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO2MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO2MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO2MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO2MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO2MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO2MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO2MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO2MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO2MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO2MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO2MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO2MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO2MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO2MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO2MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO2MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO2MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO2MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO2MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO2MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO2MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO2MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO2MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO2MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO3OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO3OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO3OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO3OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    SinkPDO3OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    SinkPDO3OperatingCurrentRXSinkCapFixed.setMinValue(0)
    SinkPDO3VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO3VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO3VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO3VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    SinkPDO3VoltageRXSinkCapFixed.setMaxValue(1023)
    SinkPDO3VoltageRXSinkCapFixed.setMinValue(0)
    SinkPDO3PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO3PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO3PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    SinkPDO3PeakCurrentRXSinkCapFixed.setMaxValue(3)
    SinkPDO3EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SinkPDO3EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    SinkPDO3OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO3OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO3OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO3OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO3OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO3OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO3MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO3MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO3MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO3MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO3MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO3MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO3MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO3MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO3MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO3MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO3MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO3MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO3OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO3OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO3OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO3OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO3OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO3OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO3MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO3MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO3MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO3MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO3MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO3MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO3MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO3MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO3MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO3MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO3MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO3MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO3MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO3MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO3MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO3MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO3MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO3MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO3MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO3MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO3MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO3MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO3MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO3MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO3MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO3MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO3MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO3MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO3MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO3MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO4OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO4OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO4OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO4OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    SinkPDO4OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    SinkPDO4OperatingCurrentRXSinkCapFixed.setMinValue(0)
    SinkPDO4VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO4VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO4VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO4VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    SinkPDO4VoltageRXSinkCapFixed.setMaxValue(1023)
    SinkPDO4VoltageRXSinkCapFixed.setMinValue(0)
    SinkPDO4PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO4PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO4PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    SinkPDO4PeakCurrentRXSinkCapFixed.setMaxValue(3)
    SinkPDO4EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SinkPDO4EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    SinkPDO4OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO4OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO4OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO4OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO4OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO4OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO4MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO4MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO4MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO4MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO4MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO4MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO4MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO4MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO4MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO4MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO4MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO4MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO4OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO4OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO4OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO4OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO4OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO4OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO4MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO4MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO4MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO4MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO4MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO4MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO4MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO4MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO4MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO4MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO4MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO4MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO4MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO4MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO4MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO4MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO4MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO4MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO4MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO4MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO4MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO4MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO4MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO4MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO4MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO4MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO4MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO4MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO4MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO4MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO5OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO5OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO5OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO5OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    SinkPDO5OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    SinkPDO5OperatingCurrentRXSinkCapFixed.setMinValue(0)
    SinkPDO5VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO5VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO5VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO5VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    SinkPDO5VoltageRXSinkCapFixed.setMaxValue(1023)
    SinkPDO5VoltageRXSinkCapFixed.setMinValue(0)
    SinkPDO5PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO5PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO5PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    SinkPDO5PeakCurrentRXSinkCapFixed.setMaxValue(3)
    SinkPDO5EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SinkPDO5EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    SinkPDO5OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO5OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO5OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO5OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO5OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO5OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO5MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO5MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO5MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO5MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO5MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO5MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO5MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO5MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO5MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO5MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO5MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO5MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO5OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO5OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO5OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO5OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO5OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO5OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO5MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO5MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO5MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO5MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO5MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO5MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO5MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO5MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO5MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO5MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO5MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO5MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO5MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO5MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO5MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO5MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO5MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO5MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO5MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO5MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO5MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO5MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO5MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO5MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO5MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO5MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO5MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO5MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO5MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO5MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO6OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO6OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO6OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO6OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    SinkPDO6OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    SinkPDO6OperatingCurrentRXSinkCapFixed.setMinValue(0)
    SinkPDO6VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO6VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO6VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO6VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    SinkPDO6VoltageRXSinkCapFixed.setMaxValue(1023)
    SinkPDO6VoltageRXSinkCapFixed.setMinValue(0)
    SinkPDO6PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO6PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO6PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    SinkPDO6PeakCurrentRXSinkCapFixed.setMaxValue(3)
    SinkPDO6EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SinkPDO6EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    SinkPDO6OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO6OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO6OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO6OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO6OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO6OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO6MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO6MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO6MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO6MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO6MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO6MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO6MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO6MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO6MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO6MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO6MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO6MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO6OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO6OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO6OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO6OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO6OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO6OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO6MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO6MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO6MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO6MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO6MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO6MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO6MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO6MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO6MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO6MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO6MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO6MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO6MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO6MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO6MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO6MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO6MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO6MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO6MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO6MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO6MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO6MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO6MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO6MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO6MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO6MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO6MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO6MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO6MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO6MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO7OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO7OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO7OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO7OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    SinkPDO7OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    SinkPDO7OperatingCurrentRXSinkCapFixed.setMinValue(0)
    SinkPDO7VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO7VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO7VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO7VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    SinkPDO7VoltageRXSinkCapFixed.setMaxValue(1023)
    SinkPDO7VoltageRXSinkCapFixed.setMinValue(0)
    SinkPDO7PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO7PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO7PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    SinkPDO7PeakCurrentRXSinkCapFixed.setMaxValue(3)
    SinkPDO7EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    SinkPDO7EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    SinkPDO7OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO7OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO7OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO7OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO7OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO7OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO7MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO7MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO7MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO7MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO7MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO7MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO7MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO7MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO7MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO7MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO7MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO7MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO7OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO7OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO7OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO7OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO7OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO7OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO7MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO7MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO7MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO7MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO7MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO7MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO7MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO7MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO7MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO7MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO7MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO7MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO7MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO7MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO7MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO7MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO7MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO7MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO7MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO7MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO7MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO7MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO7MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO7MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO7MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO7MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO7MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO7MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO7MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO7MaximumVoltageTXSinkCapPPS.setMinValue(0)
    EPRSinkPDO1OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO1OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO1OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO1OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    EPRSinkPDO1OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO1OperatingCurrentRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO1VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO1VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO1VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    EPRSinkPDO1VoltageRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO1VoltageRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO1PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO1PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO1PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    EPRSinkPDO1PeakCurrentRXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO1EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSinkPDO1EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    EPRSinkPDO1OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO1PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO1PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO1PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO1PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO1PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO1PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO2OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO2OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO2OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO2OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    EPRSinkPDO2OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO2OperatingCurrentRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO2VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO2VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO2VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    EPRSinkPDO2VoltageRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO2VoltageRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO2PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO2PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO2PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    EPRSinkPDO2PeakCurrentRXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO2EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSinkPDO2EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    EPRSinkPDO2OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO2PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO2PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO2PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO2PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO2PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO2PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO3OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO3OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO3OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO3OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    EPRSinkPDO3OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO3OperatingCurrentRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO3VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO3VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO3VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    EPRSinkPDO3VoltageRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO3VoltageRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO3PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO3PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO3PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    EPRSinkPDO3PeakCurrentRXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO3EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSinkPDO3EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    EPRSinkPDO3OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO3PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO3PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO3PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO3PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO3PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO3PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO4OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO4OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO4OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO4OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    EPRSinkPDO4OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO4OperatingCurrentRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO4VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO4VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO4VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    EPRSinkPDO4VoltageRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO4VoltageRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO4PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO4PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO4PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    EPRSinkPDO4PeakCurrentRXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO4EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSinkPDO4EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    EPRSinkPDO4OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO4PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO4PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO4PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO4PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO4PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO4PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO5OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO5OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO5OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO5OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    EPRSinkPDO5OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO5OperatingCurrentRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO5VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO5VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO5VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    EPRSinkPDO5VoltageRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO5VoltageRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO5PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO5PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO5PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    EPRSinkPDO5PeakCurrentRXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO5EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSinkPDO5EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    EPRSinkPDO5OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO5PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO5PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO5PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO5PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO5PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO5PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO6OperatingCurrentRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO6OperatingCurrentRXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO6OperatingCurrentRXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO6OperatingCurrentRXSinkCapFixed.reference_name = "Operating Current-RX Sink Cap Fixed"
    EPRSinkPDO6OperatingCurrentRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO6OperatingCurrentRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO6VoltageRXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO6VoltageRXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6VoltageRXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO6VoltageRXSinkCapFixed.reference_name = "Voltage-RX Sink Cap Fixed"
    EPRSinkPDO6VoltageRXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO6VoltageRXSinkCapFixed.setMinValue(0)
    EPRSinkPDO6PeakCurrentRXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO6PeakCurrentRXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO6PeakCurrentRXSinkCapFixed.reference_name = "Peak Current-RX Sink Cap Fixed"
    EPRSinkPDO6PeakCurrentRXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO6EPRModeCapableRXSinkCapFixed = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'EPR Mode Capable',
            'offset': 22,
            'bit length': 1})
    
    EPRSinkPDO6EPRModeCapableRXSinkCapFixed.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"
    EPRSinkPDO6OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO6PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO6PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO6PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO6PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO6PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO6PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 1):
        get_child_object(self, [u'Sink PDO 1']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 1']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 2):
        get_child_object(self, [u'Sink PDO 2']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 2']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 3):
        get_child_object(self, [u'Sink PDO 3']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 3']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 4):
        get_child_object(self, [u'Sink PDO 4']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 4']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 5):
        get_child_object(self, [u'Sink PDO 5']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 5']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 6):
        get_child_object(self, [u'Sink PDO 6']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 6']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 7):
        get_child_object(self, [u'Sink PDO 7']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 7']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'RX Sink Num Valid EPR PDOs']).valueToInt() >= 1):
        get_child_object(self, [u'EPR Sink PDO 1']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 1']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'RX Sink Num Valid EPR PDOs']).valueToInt() >= 2):
        get_child_object(self, [u'EPR Sink PDO 2']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 2']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'RX Sink Num Valid EPR PDOs']).valueToInt() >= 3):
        get_child_object(self, [u'EPR Sink PDO 3']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 3']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'RX Sink Num Valid EPR PDOs']).valueToInt() >= 4):
        get_child_object(self, [u'EPR Sink PDO 4']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 4']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'RX Sink Num Valid EPR PDOs']).valueToInt() >= 5):
        get_child_object(self, [u'EPR Sink PDO 5']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 5']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6OperatingCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Voltage'], "Voltage-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6VoltageRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6PeakCurrentRXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6EPRModeCapableRXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Voltage'], "Voltage-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Peak Current'], "Peak Current-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Mode Capable'], "EPR Mode Capable-RX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'RX Sink Num Valid EPR PDOs']).valueToInt() >= 6):
        get_child_object(self, [u'EPR Sink PDO 6']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 6']).hide()

    return self.childrenAsListDMGenerator()


class crxsinkcaps_0x31_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Received Sink Capabilities',
                                           'address': 0x31,
                                           'byte length': 53,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received Sink Capabilities',
                                                         'offset': 0,
                                                         'bit length': 424})

        NumberofSinkPDOs_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Number of Sink PDOs',
                                                         'offset': 0,
                                                         'bit length': 7})
        self.dataModel.addChild(NumberofSinkPDOs_dm)

        numvalidpdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid PDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        NumberofSinkPDOs_dm.addChild(numvalidpdos)
        numvalidpdos.reference_name = "Number Valid PDOs"
        numvalidpdos.help = "Number of valid PDOs in this register. Each PDO is 4 bytes. (max of 7)"
        numvalidpdos.setMaxValue(7)
        numvalidpdos.setMinValue(0)
        numvalidpdos.addUpdateRegisterByName("self")

        rxsinknumvalideprpdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'RX Sink Num Valid EPR PDOs',
                                                      'offset': 3,
                                                      'bit length': 3})
        NumberofSinkPDOs_dm.addChild(rxsinknumvalideprpdos)
        rxsinknumvalideprpdos.reference_name = "RX Sink Num Valid EPR PDOs"
        rxsinknumvalideprpdos.help = "Number of valid EPR PDOs in this register. Each EPR PDO is 4 bytes. (max of 6)"
        rxsinknumvalideprpdos.setMaxValue(6)
        rxsinknumvalideprpdos.setMinValue(0)
        rxsinknumvalideprpdos.addUpdateRegisterByName("self")

        lastsinkcapreceivedisepr = register_class.cBooleanDMTerminator(self,
                {'name': 'Last Sink Cap Received Is EPR',
                'offset': 6,
                'bit length': 1})
        NumberofSinkPDOs_dm.addChild(lastsinkcapreceivedisepr)
        lastsinkcapreceivedisepr.reference_name = "Last Sink Cap Received Is EPR"
        lastsinkcapreceivedisepr.help = "Flag showing if the last received Sink Capability is an EPR capability."

        SinkPDO1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 1',
                                                         'offset': 8,
                                                         'bit length': 40})
        self.dataModel.addChild(SinkPDO1_dm)

        sinkpdo1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        sinkpdo1.dictScaleUnits = {'A': 0.01}
        sinkpdo1.defaultUnit = 'A'
        SinkPDO1_dm.addChild(sinkpdo1)
        sinkpdo1.reference_name = "Operating Current"
        sinkpdo1.help = "First Sink Capabilities PDO received"
        sinkpdo1.setMaxValue(1023)
        sinkpdo1.setMinValue(0)

        sinkpdo1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        sinkpdo1.dictScaleUnits = {'V': 0.05}
        sinkpdo1.defaultUnit = 'V'
        
        sinkpdo1.reference_name = "Voltage"
        sinkpdo1.help = "First Sink Capabilities PDO received"
        sinkpdo1.setMaxValue(1023)
        sinkpdo1.setMinValue(0)
        sinkpdo1ForceVal = register_class.cForceSetDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10,
                                                      'force value': int(100),
                                                      'force display': '5 V',
                                                      'display widget' : sinkpdo1})
        sinkpdo1ForceVal.reference_name = "Voltage"
        SinkPDO1_dm.addChild(sinkpdo1ForceVal)

        sinkpdo1 = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        sinkpdo1.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO1_dm.addChild(sinkpdo1)
        sinkpdo1.reference_name = "Peak Current"
        sinkpdo1.help = "First Sink Capabilities PDO received"
        sinkpdo1.setMaxValue(3)

        sinkpdo1 = register_class.cListDMTerminator(self,
                {'name': 'Fast Role Swap required USB Type-C Current',
                    'offset': 23,
                    'bit length': 2})
        sinkpdo1.setReportList(['FRS Not Supported', 'Default USB Power', '5V,1.5A', '5V,3A'])
        SinkPDO1_dm.addChild(sinkpdo1)
        sinkpdo1.reference_name = "Fast Role Swap required USB Type-C Current"
        sinkpdo1.help = "First Sink Capabilities PDO received"
        sinkpdo1.setMaxValue(3)

        sinkpdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Higher Capability',
                'offset': 28,
                'bit length': 1})
        SinkPDO1_dm.addChild(sinkpdo1)
        sinkpdo1.reference_name = "Higher Capability"
        sinkpdo1.help = "First Sink Capabilities PDO received"

        sinkpdo1 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo1.setReportList(['Fixed', 'Battery', 'Variable'])
        
        sinkpdo1.reference_name = "Supply Type"
        sinkpdo1.help = "First Sink Capabilities PDO received"
        sinkpdo1.setMaxValue(2)
        sinkpdo1ForceVal = register_class.cForceSetDMTerminator(self,
                                                     {'name': 'Supply Type',
                                                      'offset': 30,
                                                      'bit length': 2,
                                                      'force value': int(0),
                                                      'force display': 'Fixed',
                                                      'display widget' : sinkpdo1})
        sinkpdo1ForceVal.reference_name = "Supply Type"
        SinkPDO1_dm.addChild(sinkpdo1ForceVal)

        SinkPDO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 2',
                                                         'offset': 40,
                                                         'bit length': 72})
        self.dataModel.addChild(SinkPDO2_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO2_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO2_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SinkPDO2_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO2_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO2_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        sinkpdo2 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo2.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO2_dm.addChild(sinkpdo2)
        sinkpdo2.reference_name = "Supply Type"
        sinkpdo2.help = "Second Sink Capabilities PDO received"
        sinkpdo2.setMaxValue(3)
        sinkpdo2.addUpdateRegisterByName("self")

        SinkPDO3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 3',
                                                         'offset': 72,
                                                         'bit length': 104})
        self.dataModel.addChild(SinkPDO3_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO3_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO3_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SinkPDO3_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO3_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO3_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        sinkpdo3 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo3.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO3_dm.addChild(sinkpdo3)
        sinkpdo3.reference_name = "Supply Type"
        sinkpdo3.help = "Third Sink Capabilities PDO received"
        sinkpdo3.setMaxValue(3)
        sinkpdo3.addUpdateRegisterByName("self")

        SinkPDO4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 4',
                                                         'offset': 104,
                                                         'bit length': 136})
        self.dataModel.addChild(SinkPDO4_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO4_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO4_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SinkPDO4_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO4_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO4_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        sinkpdo4 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo4.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO4_dm.addChild(sinkpdo4)
        sinkpdo4.reference_name = "Supply Type"
        sinkpdo4.help = "Fourth Sink Capabilities PDO received"
        sinkpdo4.setMaxValue(3)
        sinkpdo4.addUpdateRegisterByName("self")

        SinkPDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 5',
                                                         'offset': 136,
                                                         'bit length': 168})
        self.dataModel.addChild(SinkPDO5_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO5_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO5_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SinkPDO5_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO5_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO5_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        sinkpdo5 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo5.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO5_dm.addChild(sinkpdo5)
        sinkpdo5.reference_name = "Supply Type"
        sinkpdo5.help = "Fifth Sink Capabilities PDO received"
        sinkpdo5.setMaxValue(3)
        sinkpdo5.addUpdateRegisterByName("self")

        SinkPDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 6',
                                                         'offset': 168,
                                                         'bit length': 200})
        self.dataModel.addChild(SinkPDO6_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO6_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO6_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SinkPDO6_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO6_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO6_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        sinkpdo6 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo6.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO6_dm.addChild(sinkpdo6)
        sinkpdo6.reference_name = "Supply Type"
        sinkpdo6.help = "Sixth Sink Capabilities PDO received"
        sinkpdo6.setMaxValue(3)
        sinkpdo6.addUpdateRegisterByName("self")

        SinkPDO7_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 7',
                                                         'offset': 200,
                                                         'bit length': 232})
        self.dataModel.addChild(SinkPDO7_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO7_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO7_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        SinkPDO7_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO7_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO7_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO7_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        sinkpdo7 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo7.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO7_dm.addChild(sinkpdo7)
        sinkpdo7.reference_name = "Supply Type"
        sinkpdo7.help = "Seventh Sink Capabilities PDO received"
        sinkpdo7.setMaxValue(3)
        sinkpdo7.addUpdateRegisterByName("self")

        EPRSinkPDO1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 1',
                                                         'offset': 232,
                                                         'bit length': 264})
        self.dataModel.addChild(EPRSinkPDO1_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO1_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO1_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSinkPDO1_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO1_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO1_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO1_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO1_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sinkpdo8 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo8.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO1_dm.addChild(sinkpdo8)
        sinkpdo8.reference_name = "Supply Type"
        sinkpdo8.help = "EPR First Sink Capabilities PDO received"
        sinkpdo8.setMaxValue(3)
        sinkpdo8.addUpdateRegisterByName("self")

        EPRSinkPDO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 2',
                                                         'offset': 264,
                                                         'bit length': 296})
        self.dataModel.addChild(EPRSinkPDO2_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO2_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO2_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSinkPDO2_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO2_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO2_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO2_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO2_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sinkpdo9 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo9.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO2_dm.addChild(sinkpdo9)
        sinkpdo9.reference_name = "Supply Type"
        sinkpdo9.help = "EPR Second Sink Capabilities PDO received"
        sinkpdo9.setMaxValue(3)
        sinkpdo9.addUpdateRegisterByName("self")

        EPRSinkPDO3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 3',
                                                         'offset': 296,
                                                         'bit length': 328})
        self.dataModel.addChild(EPRSinkPDO3_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO3_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO3_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSinkPDO3_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO3_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO3_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO3_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO3_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sinkpdo10 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo10.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO3_dm.addChild(sinkpdo10)
        sinkpdo10.reference_name = "Supply Type"
        sinkpdo10.help = "EPR Third Sink Capabilities PDO received"
        sinkpdo10.setMaxValue(3)
        sinkpdo10.addUpdateRegisterByName("self")

        EPRSinkPDO4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 4',
                                                         'offset': 328,
                                                         'bit length': 360})
        self.dataModel.addChild(EPRSinkPDO4_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO4_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO4_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSinkPDO4_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO4_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO4_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO4_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO4_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sinkpdo11 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo11.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO4_dm.addChild(sinkpdo11)
        sinkpdo11.reference_name = "Supply Type"
        sinkpdo11.help = "EPR Fourth Sink Capabilities PDO received"
        sinkpdo11.setMaxValue(3)
        sinkpdo11.addUpdateRegisterByName("self")

        EPRSinkPDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 5',
                                                         'offset': 360,
                                                         'bit length': 392})
        self.dataModel.addChild(EPRSinkPDO5_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO5_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO5_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSinkPDO5_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO5_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO5_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO5_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO5_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sinkpdo12 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo12.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO5_dm.addChild(sinkpdo12)
        sinkpdo12.reference_name = "Supply Type"
        sinkpdo12.help = "EPR Fifth Sink Capabilities PDO received"
        sinkpdo12.setMaxValue(3)
        sinkpdo12.addUpdateRegisterByName("self")

        EPRSinkPDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 6',
                                                         'offset': 392,
                                                         'bit length': 424})
        self.dataModel.addChild(EPRSinkPDO6_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO6_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-RX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-RX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO6_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-RX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        EPRModeCapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        EPRSinkPDO6_dm.addChild(EPRModeCapable)
        EPRModeCapable.reference_name = "EPR Mode Capable-RX Sink Cap Fixed"

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO6_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO6_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO6_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO6_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        sinkpdo13 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        sinkpdo13.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO6_dm.addChild(sinkpdo13)
        sinkpdo13.reference_name = "Supply Type"
        sinkpdo13.help = "EPR Sixth Sink Capabilities PDO received"
        sinkpdo13.setMaxValue(3)
        sinkpdo13.addUpdateRegisterByName("self")

        self.dataModel.parent = self
        self.dataModel.setDataModelGenerator(rxsinkcaps_dm_generator)

        update_function = get_updater_function("rxsinkcaps_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

# -------------------------Alert definitions - Transmit Source Capabilities------------------
def power_path_for_pdo_1_0x32_fo_8_check_function(self, argumentList, newValue):
    returnVal = {'check failed': False,
                 'message': "",
                 'change list': None}

    if newValue == 0:
        if argumentList[0].valueToInt() == 0:
            returnVal = {'check failed': True,
                         'message': "Warning: PP1 switch is used as Source but it is configured as {Dependent Condition} in {Dependent Bit Field}  (Register : Global System Configuration,  Field : PP1 Config)",
                         'change list': [
                             {'object': argumentList[0],
                              'valid setting list': [
                        {'value': 1, 'description': "PP1 configured as source" }]}
                         ]}
            return returnVal            

    update_function = get_updater_function("power_path_for_pdo_1_0x32_fo_8_check_function_updater")
    if update_function is not None:
        self.alert_update_fxn = types.MethodType(update_function, self, self)
        updater_return = self.alert_update_fxn(argumentList, newValue)
        if updater_return is not None:
            return updater_return


    return returnVal

def power_path_for_pdo_2_0x32_fo_10_check_function(self, argumentList, newValue):
    returnVal = {'check failed': False,
                 'message': "",
                 'change list': None}

    if newValue == 0:
        if argumentList[0].valueToInt() == 0:
            returnVal = {'check failed': True,
                         'message': "Need to Fill  (Register : Global System Configuration,  Field : PP1 Config)",
                         'change list': [
                             {'object': argumentList[0],
                              'valid setting list': [
                        {'value': 1, 'description': "PP1 configured as source" }]}
                         ]}
            return returnVal            
    if newValue == 2:
        if argumentList[1].valueToInt() in [0, 3]:
            returnVal = {'check failed': True,
                         'message': "Need to Fill  (Register : Global System Configuration,  Field : PP3 Config)",
                         'change list': [
                             {'object': argumentList[1],
                              'valid setting list': [
                        {'value': 1, 'description': "PP3 configured for Source (output)" }, 
                        {'value': 4, 'description': "PP3 configured for Sink (input) and Source (output)" }]}
                         ]}
            return returnVal            

    update_function = get_updater_function("power_path_for_pdo_2_0x32_fo_10_check_function_updater")
    if update_function is not None:
        self.alert_update_fxn = types.MethodType(update_function, self, self)
        updater_return = self.alert_update_fxn(argumentList, newValue)
        if updater_return is not None:
            return updater_return


    return returnVal

def power_path_for_pdo_3_0x32_fo_12_check_function(self, argumentList, newValue):
    returnVal = {'check failed': False,
                 'message': "",
                 'change list': None}

    if newValue == 0:
        if argumentList[0].valueToInt() == 0:
            returnVal = {'check failed': True,
                         'message': "Need to Fill  (Register : Global System Configuration,  Field : PP1 Config)",
                         'change list': [
                             {'object': argumentList[0],
                              'valid setting list': [
                        {'value': 1, 'description': "PP1 configured as source" }]}
                         ]}
            return returnVal            
    if newValue == 2:
        if argumentList[1].valueToInt() in [0, 3]:
            returnVal = {'check failed': True,
                         'message': "Need to Fill  (Register : Global System Configuration,  Field : PP3 Config)",
                         'change list': [
                             {'object': argumentList[1],
                              'valid setting list': [
                        {'value': 1, 'description': "PP3 configured for Source (output)" }, 
                        {'value': 4, 'description': "PP3 configured for Sink (input) and Source (output)" }]}
                         ]}
            return returnVal            

    update_function = get_updater_function("power_path_for_pdo_3_0x32_fo_12_check_function_updater")
    if update_function is not None:
        self.alert_update_fxn = types.MethodType(update_function, self, self)
        updater_return = self.alert_update_fxn(argumentList, newValue)
        if updater_return is not None:
            return updater_return


    return returnVal

def txsourcecaps_dm_generator(self):

    SourcePDO2MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 46,
                                                  'bit length': 10})
    SourcePDO2MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO2MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO2MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    SourcePDO2MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    SourcePDO2MaximumCurrentTXSourceCapFixed.setMinValue(0)
    SourcePDO2MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO2VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 56,
                                                  'bit length': 10})
    SourcePDO2VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO2VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO2VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    SourcePDO2VoltageTXSourceCapFixed.setMaxValue(1023)
    SourcePDO2VoltageTXSourceCapFixed.setMinValue(0)
    SourcePDO2VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO2PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 66,
                'bit length': 2})
    SourcePDO2PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO2PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    SourcePDO2PeakCurrentTXSourceCapFixed.setMaxValue(3)
    SourcePDO2MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 46,
                                                  'bit length': 10})
    SourcePDO2MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO2MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO2MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO2MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO2MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO2MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO2MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 56,
                                                  'bit length': 10})
    SourcePDO2MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO2MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO2MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO2MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO2MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO2MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 66,
                                                  'bit length': 10})
    SourcePDO2MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO2MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO2MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO2MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO2MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO2MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 46,
                                                  'bit length': 10})
    SourcePDO2MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO2MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO2MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO2MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO2MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO2MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO2MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 56,
                                                  'bit length': 10})
    SourcePDO2MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO2MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO2MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO2MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO2MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO2MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 66,
                                                  'bit length': 10})
    SourcePDO2MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO2MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO2MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO2MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO2MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO2MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO2MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 46,
                                                  'bit length': 7})
    SourcePDO2MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO2MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO2MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO2MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO2MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO2MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 54,
                                                  'bit length': 8})
    SourcePDO2MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO2MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO2MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO2MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO2MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO2MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 63,
                                                  'bit length': 8})
    SourcePDO2MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO2MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO2MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO2MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO2MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO2PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 73,
            'bit length': 1})
    
    SourcePDO2PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 74,
                'bit length': 2})
    SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO3MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 76,
                                                  'bit length': 10})
    SourcePDO3MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO3MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO3MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    SourcePDO3MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    SourcePDO3MaximumCurrentTXSourceCapFixed.setMinValue(0)
    SourcePDO3MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO3VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 86,
                                                  'bit length': 10})
    SourcePDO3VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO3VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO3VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    SourcePDO3VoltageTXSourceCapFixed.setMaxValue(1023)
    SourcePDO3VoltageTXSourceCapFixed.setMinValue(0)
    SourcePDO3VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO3PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 96,
                'bit length': 2})
    SourcePDO3PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO3PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    SourcePDO3PeakCurrentTXSourceCapFixed.setMaxValue(3)
    SourcePDO3MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 76,
                                                  'bit length': 10})
    SourcePDO3MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO3MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO3MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO3MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO3MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO3MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO3MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 86,
                                                  'bit length': 10})
    SourcePDO3MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO3MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO3MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO3MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO3MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO3MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 96,
                                                  'bit length': 10})
    SourcePDO3MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO3MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO3MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO3MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO3MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO3MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 76,
                                                  'bit length': 10})
    SourcePDO3MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO3MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO3MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO3MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO3MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO3MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO3MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 86,
                                                  'bit length': 10})
    SourcePDO3MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO3MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO3MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO3MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO3MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO3MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 96,
                                                  'bit length': 10})
    SourcePDO3MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO3MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO3MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO3MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO3MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO3MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO3MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 76,
                                                  'bit length': 7})
    SourcePDO3MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO3MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO3MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO3MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO3MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO3MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 84,
                                                  'bit length': 8})
    SourcePDO3MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO3MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO3MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO3MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO3MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO3MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 93,
                                                  'bit length': 8})
    SourcePDO3MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO3MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO3MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO3MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO3MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO3PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 103,
            'bit length': 1})
    
    SourcePDO3PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 104,
                'bit length': 2})
    SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO4MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 106,
                                                  'bit length': 10})
    SourcePDO4MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO4MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO4MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    SourcePDO4MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    SourcePDO4MaximumCurrentTXSourceCapFixed.setMinValue(0)
    SourcePDO4MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO4VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 116,
                                                  'bit length': 10})
    SourcePDO4VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO4VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO4VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    SourcePDO4VoltageTXSourceCapFixed.setMaxValue(1023)
    SourcePDO4VoltageTXSourceCapFixed.setMinValue(0)
    SourcePDO4VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO4PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 126,
                'bit length': 2})
    SourcePDO4PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO4PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    SourcePDO4PeakCurrentTXSourceCapFixed.setMaxValue(3)
    SourcePDO4MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 106,
                                                  'bit length': 10})
    SourcePDO4MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO4MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO4MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO4MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO4MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO4MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO4MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 116,
                                                  'bit length': 10})
    SourcePDO4MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO4MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO4MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO4MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO4MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO4MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 126,
                                                  'bit length': 10})
    SourcePDO4MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO4MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO4MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO4MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO4MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO4MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 106,
                                                  'bit length': 10})
    SourcePDO4MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO4MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO4MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO4MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO4MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO4MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO4MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 116,
                                                  'bit length': 10})
    SourcePDO4MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO4MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO4MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO4MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO4MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO4MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 126,
                                                  'bit length': 10})
    SourcePDO4MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO4MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO4MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO4MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO4MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO4MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO4MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 106,
                                                  'bit length': 7})
    SourcePDO4MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO4MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO4MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO4MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO4MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO4MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 114,
                                                  'bit length': 8})
    SourcePDO4MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO4MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO4MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO4MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO4MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO4MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 123,
                                                  'bit length': 8})
    SourcePDO4MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO4MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO4MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO4MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO4MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO4PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 133,
            'bit length': 1})
    
    SourcePDO4PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 134,
                'bit length': 2})
    SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO5MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 136,
                                                  'bit length': 10})
    SourcePDO5MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO5MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO5MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    SourcePDO5MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    SourcePDO5MaximumCurrentTXSourceCapFixed.setMinValue(0)
    SourcePDO5MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO5VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 146,
                                                  'bit length': 10})
    SourcePDO5VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO5VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO5VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    SourcePDO5VoltageTXSourceCapFixed.setMaxValue(1023)
    SourcePDO5VoltageTXSourceCapFixed.setMinValue(0)
    SourcePDO5VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO5PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 156,
                'bit length': 2})
    SourcePDO5PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO5PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    SourcePDO5PeakCurrentTXSourceCapFixed.setMaxValue(3)
    SourcePDO5MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 136,
                                                  'bit length': 10})
    SourcePDO5MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO5MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO5MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO5MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO5MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO5MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO5MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 146,
                                                  'bit length': 10})
    SourcePDO5MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO5MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO5MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO5MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO5MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO5MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 156,
                                                  'bit length': 10})
    SourcePDO5MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO5MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO5MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO5MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO5MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO5MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 136,
                                                  'bit length': 10})
    SourcePDO5MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO5MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO5MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO5MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO5MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO5MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO5MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 146,
                                                  'bit length': 10})
    SourcePDO5MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO5MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO5MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO5MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO5MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO5MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 156,
                                                  'bit length': 10})
    SourcePDO5MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO5MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO5MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO5MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO5MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO5MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO5MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 136,
                                                  'bit length': 7})
    SourcePDO5MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO5MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO5MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO5MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO5MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO5MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 144,
                                                  'bit length': 8})
    SourcePDO5MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO5MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO5MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO5MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO5MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO5MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 153,
                                                  'bit length': 8})
    SourcePDO5MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO5MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO5MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO5MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO5MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO5PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 163,
            'bit length': 1})
    
    SourcePDO5PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 164,
                'bit length': 2})
    SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO6MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 166,
                                                  'bit length': 10})
    SourcePDO6MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO6MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO6MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    SourcePDO6MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    SourcePDO6MaximumCurrentTXSourceCapFixed.setMinValue(0)
    SourcePDO6MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO6VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 176,
                                                  'bit length': 10})
    SourcePDO6VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO6VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO6VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    SourcePDO6VoltageTXSourceCapFixed.setMaxValue(1023)
    SourcePDO6VoltageTXSourceCapFixed.setMinValue(0)
    SourcePDO6VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO6PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 186,
                'bit length': 2})
    SourcePDO6PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO6PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    SourcePDO6PeakCurrentTXSourceCapFixed.setMaxValue(3)
    SourcePDO6MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 166,
                                                  'bit length': 10})
    SourcePDO6MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO6MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO6MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO6MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO6MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO6MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO6MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 176,
                                                  'bit length': 10})
    SourcePDO6MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO6MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO6MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO6MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO6MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO6MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 186,
                                                  'bit length': 10})
    SourcePDO6MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO6MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO6MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO6MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO6MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO6MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 166,
                                                  'bit length': 10})
    SourcePDO6MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO6MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO6MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO6MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO6MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO6MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO6MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 176,
                                                  'bit length': 10})
    SourcePDO6MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO6MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO6MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO6MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO6MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO6MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 186,
                                                  'bit length': 10})
    SourcePDO6MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO6MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO6MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO6MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO6MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO6MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO6MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 166,
                                                  'bit length': 7})
    SourcePDO6MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO6MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO6MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO6MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO6MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO6MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 174,
                                                  'bit length': 8})
    SourcePDO6MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO6MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO6MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO6MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO6MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO6MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 183,
                                                  'bit length': 8})
    SourcePDO6MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO6MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO6MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO6MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO6MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO6PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 193,
            'bit length': 1})
    
    SourcePDO6PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 194,
                'bit length': 2})
    SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    SourcePDO7MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 196,
                                                  'bit length': 10})
    SourcePDO7MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    SourcePDO7MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    SourcePDO7MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    SourcePDO7MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    SourcePDO7MaximumCurrentTXSourceCapFixed.setMinValue(0)
    SourcePDO7MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO7VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 206,
                                                  'bit length': 10})
    SourcePDO7VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    SourcePDO7VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    SourcePDO7VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    SourcePDO7VoltageTXSourceCapFixed.setMaxValue(1023)
    SourcePDO7VoltageTXSourceCapFixed.setMinValue(0)
    SourcePDO7VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    SourcePDO7PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 216,
                'bit length': 2})
    SourcePDO7PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SourcePDO7PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    SourcePDO7PeakCurrentTXSourceCapFixed.setMaxValue(3)
    SourcePDO7MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 196,
                                                  'bit length': 10})
    SourcePDO7MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    SourcePDO7MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    SourcePDO7MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    SourcePDO7MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    SourcePDO7MaximumPowerTXSourceCapBattery.setMinValue(0)
    SourcePDO7MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    SourcePDO7MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 206,
                                                  'bit length': 10})
    SourcePDO7MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO7MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO7MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    SourcePDO7MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO7MinimumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO7MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 216,
                                                  'bit length': 10})
    SourcePDO7MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    SourcePDO7MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    SourcePDO7MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    SourcePDO7MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    SourcePDO7MaximumVoltageTXSourceCapBattery.setMinValue(0)
    SourcePDO7MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 196,
                                                  'bit length': 10})
    SourcePDO7MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    SourcePDO7MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    SourcePDO7MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    SourcePDO7MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    SourcePDO7MaximumCurrentTXSourceCapVariable.setMinValue(0)
    SourcePDO7MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO7MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 206,
                                                  'bit length': 10})
    SourcePDO7MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO7MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO7MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    SourcePDO7MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO7MinimumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO7MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 216,
                                                  'bit length': 10})
    SourcePDO7MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    SourcePDO7MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    SourcePDO7MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    SourcePDO7MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    SourcePDO7MaximumVoltageTXSourceCapVariable.setMinValue(0)
    SourcePDO7MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    SourcePDO7MaximumCurrentTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 196,
                                                  'bit length': 7})
    SourcePDO7MaximumCurrentTXSourceCapPPS.dictScaleUnits = {'A': 0.05}
    SourcePDO7MaximumCurrentTXSourceCapPPS.defaultUnit = 'A'
    
    SourcePDO7MaximumCurrentTXSourceCapPPS.reference_name = "Maximum Current-TX Source Cap PPS"
    SourcePDO7MaximumCurrentTXSourceCapPPS.setMaxValue(127)
    SourcePDO7MaximumCurrentTXSourceCapPPS.setMinValue(0)
    SourcePDO7MinimumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 204,
                                                  'bit length': 8})
    SourcePDO7MinimumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO7MinimumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO7MinimumVoltageTXSourceCapPPS.reference_name = "Minimum Voltage-TX Source Cap PPS"
    SourcePDO7MinimumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO7MinimumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO7MaximumVoltageTXSourceCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 213,
                                                  'bit length': 8})
    SourcePDO7MaximumVoltageTXSourceCapPPS.dictScaleUnits = {'V': 0.1}
    SourcePDO7MaximumVoltageTXSourceCapPPS.defaultUnit = 'V'
    
    SourcePDO7MaximumVoltageTXSourceCapPPS.reference_name = "Maximum Voltage-TX Source Cap PPS"
    SourcePDO7MaximumVoltageTXSourceCapPPS.setMaxValue(255)
    SourcePDO7MaximumVoltageTXSourceCapPPS.setMinValue(0)
    SourcePDO7PPSPowerLimitedTXSourceCapPPS = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'PPS Power Limited',
            'offset': 223,
            'bit length': 1})
    
    SourcePDO7PPSPowerLimitedTXSourceCapPPS.reference_name = "PPS Power Limited-TX Source Cap PPS"
    SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS = register_class.cListDMTerminator(self.parent,
            {'name': 'SPR Programmable Power Supply',
                'offset': 224,
                'bit length': 2})
    SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS.setReportList(['SPR Programmable Power Supply'])
    
    SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
    SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS.setMaxValue(0)
    EPRSourcePDO1MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO1MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO1MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    EPRSourcePDO1MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO1MaximumCurrentTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO1MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO1VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO1VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO1VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    EPRSourcePDO1VoltageTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO1VoltageTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO1VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO1PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO1PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO1PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    EPRSourcePDO1PeakCurrentTXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO1MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO1MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO1MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO1MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO1MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO1MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO1MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO1PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO1PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO1PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO1PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO1PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO1PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO1MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO1MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO2MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO2MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO2MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    EPRSourcePDO2MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO2MaximumCurrentTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO2MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO2VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO2VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO2VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    EPRSourcePDO2VoltageTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO2VoltageTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO2VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO2PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO2PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO2PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    EPRSourcePDO2PeakCurrentTXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO2MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO2MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO2MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO2MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO2MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO2MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO2MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO2PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO2PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO2PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO2PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO2PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO2PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO2MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO2MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO3MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO3MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO3MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    EPRSourcePDO3MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO3MaximumCurrentTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO3MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO3VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO3VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO3VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    EPRSourcePDO3VoltageTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO3VoltageTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO3VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO3PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO3PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO3PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    EPRSourcePDO3PeakCurrentTXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO3MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO3MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO3MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO3MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO3MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO3MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO3MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO3PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO3PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO3PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO3PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO3PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO3PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO3MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO3MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO4MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO4MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO4MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    EPRSourcePDO4MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO4MaximumCurrentTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO4MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO4VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO4VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO4VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    EPRSourcePDO4VoltageTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO4VoltageTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO4VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO4PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO4PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO4PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    EPRSourcePDO4PeakCurrentTXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO4MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO4MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO4MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO4MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO4MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO4MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO4MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO4PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO4PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO4PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO4PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO4PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO4PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO4MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO4MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO5MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO5MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO5MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    EPRSourcePDO5MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO5MaximumCurrentTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO5MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO5VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO5VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO5VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    EPRSourcePDO5VoltageTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO5VoltageTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO5VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO5PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO5PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO5PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    EPRSourcePDO5PeakCurrentTXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO5MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO5MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO5MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO5MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO5MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO5MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO5MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO5PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO5PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO5PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO5PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO5PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO5PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO5MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO5MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    EPRSourcePDO6MaximumCurrentTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumCurrentTXSourceCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO6MaximumCurrentTXSourceCapFixed.defaultUnit = 'A'
    
    EPRSourcePDO6MaximumCurrentTXSourceCapFixed.reference_name = "Maximum Current-TX Source Cap Fixed"
    EPRSourcePDO6MaximumCurrentTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO6MaximumCurrentTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO6MaximumCurrentTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO6VoltageTXSourceCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO6VoltageTXSourceCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6VoltageTXSourceCapFixed.defaultUnit = 'V'
    
    EPRSourcePDO6VoltageTXSourceCapFixed.reference_name = "Voltage-TX Source Cap Fixed"
    EPRSourcePDO6VoltageTXSourceCapFixed.setMaxValue(1023)
    EPRSourcePDO6VoltageTXSourceCapFixed.setMinValue(0)
    EPRSourcePDO6VoltageTXSourceCapFixed.addUpdateRegisterByName("self")
    EPRSourcePDO6PeakCurrentTXSourceCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSourcePDO6PeakCurrentTXSourceCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO6PeakCurrentTXSourceCapFixed.reference_name = "Peak Current-TX Source Cap Fixed"
    EPRSourcePDO6PeakCurrentTXSourceCapFixed.setMaxValue(3)
    EPRSourcePDO6MaximumPowerTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.defaultUnit = 'W'
    
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.reference_name = "Maximum Power-TX Source Cap Battery"
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO6MaximumPowerTXSourceCapBattery.addUpdateRegisterByName("self")
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.reference_name = "Minimum Voltage-TX Source Cap Battery"
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO6MinimumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.defaultUnit = 'V'
    
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.reference_name = "Maximum Voltage-TX Source Cap Battery"
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.setMaxValue(1023)
    EPRSourcePDO6MaximumVoltageTXSourceCapBattery.setMinValue(0)
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.defaultUnit = 'A'
    
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.reference_name = "Maximum Current-TX Source Cap Variable"
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO6MaximumCurrentTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.reference_name = "Minimum Voltage-TX Source Cap Variable"
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO6MinimumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.defaultUnit = 'V'
    
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.reference_name = "Maximum Voltage-TX Source Cap Variable"
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.setMaxValue(1023)
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.setMinValue(0)
    EPRSourcePDO6MaximumVoltageTXSourceCapVariable.addUpdateRegisterByName("self")
    EPRSourcePDO6PDPTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSourcePDO6PDPTXSourceCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSourcePDO6PDPTXSourceCapAVS.defaultUnit = 'W'
    
    EPRSourcePDO6PDPTXSourceCapAVS.reference_name = "PDP-TX Source Cap AVS"
    EPRSourcePDO6PDPTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO6PDPTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.reference_name = "Minimum Voltage-TX Source Cap AVS"
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.setMaxValue(255)
    EPRSourcePDO6MinimumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.defaultUnit = 'V'
    
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.reference_name = "Maximum Voltage-TX Source Cap AVS"
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.setMaxValue(511)
    EPRSourcePDO6MaximumVoltageTXSourceCapAVS.setMinValue(0)
    EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'AVS Peak Current',
                'offset': 26,
                'bit length': 2})
    EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS.reference_name = "AVS Peak Current-TX Source Cap AVS"
    EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS.setMaxValue(3)
    EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
    EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS.setMaxValue(1)
    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 1):
        get_child_object(self, [u'Source PDO 1']).unhide()

    else:
        get_child_object(self, [u'Source PDO 1']).hide()

    get_child_object(self, [u'Source PDO 1']).maxpower1 = get_child_object(self, ['Source PDO 1', 'Voltage']).valueToInt()*get_child_object(self, ['Source PDO 1', 'Maximum Current']).valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 2']), SourcePDO2VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 2']), SourcePDO2PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 2']), SourcePDO2SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 2']), SourcePDO2MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 2):
        get_child_object(self, [u'Source PDO 2']).unhide()

    else:
        get_child_object(self, [u'Source PDO 2']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 3']), SourcePDO3VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 3']), SourcePDO3PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 3']), SourcePDO3SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 3']), SourcePDO3MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 3):
        get_child_object(self, [u'Source PDO 3']).unhide()

    else:
        get_child_object(self, [u'Source PDO 3']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 4']), SourcePDO4VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 4']), SourcePDO4PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 4']), SourcePDO4SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 4']), SourcePDO4MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 4):
        get_child_object(self, [u'Source PDO 4']).unhide()

    else:
        get_child_object(self, [u'Source PDO 4']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 5']), SourcePDO5VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 5']), SourcePDO5PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 5']), SourcePDO5SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 5']), SourcePDO5MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 5):
        get_child_object(self, [u'Source PDO 5']).unhide()

    else:
        get_child_object(self, [u'Source PDO 5']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 6']), SourcePDO6VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 6']), SourcePDO6PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 6']), SourcePDO6SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 6']), SourcePDO6MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 6):
        get_child_object(self, [u'Source PDO 6']).unhide()

    else:
        get_child_object(self, [u'Source PDO 6']).hide()

    if get_child_object_with_refname(self, [u'Source PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 7']).maxpower = get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 7']), SourcePDO7VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'Source PDO 7']), SourcePDO7PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'Source PDO 7']).maxpower = get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'Source PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumCurrentTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MinimumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumVoltageTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7PPSPowerLimitedTXSourceCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"), get_child_object(self,[u'Source PDO 7']), SourcePDO7SPRProgrammablePowerSupplyTXSourceCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'Source PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'Source PDO 7']), SourcePDO7MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'PPS Power Limited'], "PPS Power Limited-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'SPR Programmable Power Supply'], "SPR Programmable Power Supply-TX Source Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'Source PDO 7']).maxpower = get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'Source PDO 7', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'Number Valid PDOs']).valueToInt() >= 7):
        get_child_object(self, [u'Source PDO 7']).unhide()

    else:
        get_child_object(self, [u'Source PDO 7']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 1']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 1']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 1']), EPRSourcePDO1MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 1']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 1', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'TX Source Num Valid EPR PDOs']).valueToInt() >= 1):
        get_child_object(self, [u'EPR Source PDO 1']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 1']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 2']), EPRSourcePDO2MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 2']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 2', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'TX Source Num Valid EPR PDOs']).valueToInt() >= 2):
        get_child_object(self, [u'EPR Source PDO 2']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 2']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 3']), EPRSourcePDO3MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 3']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 3', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'TX Source Num Valid EPR PDOs']).valueToInt() >= 3):
        get_child_object(self, [u'EPR Source PDO 3']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 3']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 4']), EPRSourcePDO4MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 4']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 4', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'TX Source Num Valid EPR PDOs']).valueToInt() >= 4):
        get_child_object(self, [u'EPR Source PDO 4']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 4']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 5']), EPRSourcePDO5MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 5']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 5', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'TX Source Num Valid EPR PDOs']).valueToInt() >= 5):
        get_child_object(self, [u'EPR Source PDO 5']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 5']).hide()

    if get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumPowerTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MinimumVoltageTXSourceCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumVoltageTXSourceCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumCurrentTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6VoltageTXSourceCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Peak Current'], "Peak Current-TX Source Cap Fixed"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6PeakCurrentTXSourceCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))
        get_child_object(self, [u'EPR Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed").valueToInt() * get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed").valueToInt()

    if get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'PDP'], "PDP-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6PDPTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MinimumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumVoltageTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6AVSPeakCurrentTXSourceCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6EPRAdjustableVoltageSupplyTXSourceCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumCurrentTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MinimumVoltageTXSourceCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable"), get_child_object(self,[u'EPR Source PDO 6']), EPRSourcePDO6MaximumVoltageTXSourceCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Voltage'], "Voltage-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Peak Current'], "Peak Current-TX Source Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'PDP'], "PDP-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'AVS Peak Current'], "AVS Peak Current-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Source Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Power'], "Maximum Power-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Source Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Battery"))
        get_child_object(self, [u'EPR Source PDO 6']).maxpower = get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Source Cap Variable").valueToInt()* get_child_object_with_refname(self, [u'EPR Source PDO 6', u'Maximum Current'], "Maximum Current-TX Source Cap Variable").valueToInt()

    if (get_child_object(self, ['Number of Source PDOs', 'TX Source Num Valid EPR PDOs']).valueToInt() >= 6):
        get_child_object(self, [u'EPR Source PDO 6']).unhide()

    else:
        get_child_object(self, [u'EPR Source PDO 6']).hide()

    return self.childrenAsListDMGenerator()


class ctxsourcecaps_0x32_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Transmit Source Capabilities',
                                           'address': 0x32,
                                           'byte length': 63,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Transmit Source Capabilities',
                                                         'offset': 0,
                                                         'bit length': 504})

        NumberofSourcePDOs_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Number of Source PDOs',
                                                         'offset': 0,
                                                         'bit length': 6})
        self.dataModel.addChild(NumberofSourcePDOs_dm)

        numvalidpdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid PDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        NumberofSourcePDOs_dm.addChild(numvalidpdos)
        numvalidpdos.reference_name = "Number Valid PDOs"
        numvalidpdos.help = "Number of valid PDOs in this register. Each PDO is 4 bytes. (max of 7)"
        numvalidpdos.setMaxValue(7)
        numvalidpdos.setMinValue(0)
        numvalidpdos.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")
        numvalidpdos.addUpdateRegisterByName("self")

        txsourcenumvalideprpdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'TX Source Num Valid EPR PDOs',
                                                      'offset': 3,
                                                      'bit length': 3})
        NumberofSourcePDOs_dm.addChild(txsourcenumvalideprpdos)
        txsourcenumvalideprpdos.reference_name = "TX Source Num Valid EPR PDOs"
        txsourcenumvalideprpdos.setMaxValue(6)
        txsourcenumvalideprpdos.setMinValue(0)
        txsourcenumvalideprpdos.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")
        txsourcenumvalideprpdos.addUpdateRegisterByName("self")

        SourcePDO1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 1',
                                                         'offset': 8,
                                                         'bit length': 56})
        self.dataModel.addChild(SourcePDO1_dm)

        powerpathforpdo1 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 1',
                    'offset': 0,
                    'bit length': 2})
        powerpathforpdo1.setReportList(['PP1 Source this PDO', 'PP2 Source this PDO', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        SourcePDO1_dm.addChild(powerpathforpdo1)
        powerpathforpdo1.reference_name = "Power Path for PDO 1"
        powerpathforpdo1.help = "Configures which PP to use for PDO1."
        powerpathforpdo1.setMaxValue(3)
        powerpathforpdo1.registerAsCheckedField(power_path_for_pdo_1_0x32_fo_8_check_function, [["Global System Configuration", "PP1 Config"]])

        txsourcepdo1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 16,
                                                      'bit length': 10})
        txsourcepdo1.dictScaleUnits = {'A': 0.01}
        txsourcepdo1.defaultUnit = 'A'
        SourcePDO1_dm.addChild(txsourcepdo1)
        txsourcepdo1.reference_name = "Maximum Current"
        txsourcepdo1.help = "First Source Capabilities PDO contents."
        txsourcepdo1.setMaxValue(1023)
        txsourcepdo1.setMinValue(0)
        txsourcepdo1.addUpdateRegisterByName("self")

        txsourcepdo1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 26,
                                                      'bit length': 10})
        txsourcepdo1.dictScaleUnits = {'V': 0.05}
        txsourcepdo1.defaultUnit = 'V'
        SourcePDO1_dm.addChild(txsourcepdo1)
        txsourcepdo1.reference_name = "Voltage"
        txsourcepdo1.help = "First Source Capabilities PDO contents."
        txsourcepdo1.setMaxValue(1023)
        txsourcepdo1.setMinValue(0)
        txsourcepdo1.addUpdateRegisterByName("self")

        txsourcepdo1 = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 36,
                    'bit length': 2})
        txsourcepdo1.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO1_dm.addChild(txsourcepdo1)
        txsourcepdo1.reference_name = "Peak Current"
        txsourcepdo1.help = "First Source Capabilities PDO contents."
        txsourcepdo1.setMaxValue(3)

        txsourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Unchunked Extended Message Support',
                'offset': 40,
                'bit length': 1})
        SourcePDO1_dm.addChild(txsourcepdo1)
        txsourcepdo1.reference_name = "Unchunked Extended Message Support"
        txsourcepdo1.help = "First Source Capabilities PDO contents."

        txsourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Dual Data Role',
                'offset': 41,
                'bit length': 1})
        SourcePDO1_dm.addChild(txsourcepdo1)
        txsourcepdo1.reference_name = "Dual Data Role"
        txsourcepdo1.help = "First Source Capabilities PDO contents."
        txsourcepdo1.hide()

        txsourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Communication Capable',
                'offset': 42,
                'bit length': 1})
        SourcePDO1_dm.addChild(txsourcepdo1)
        txsourcepdo1.reference_name = "USB Communication Capable"
        txsourcepdo1.help = "First Source Capabilities PDO contents."

        txsourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Unconstrained Power',
                'offset': 43,
                'bit length': 1})
        SourcePDO1_dm.addChild(txsourcepdo1)
        txsourcepdo1.reference_name = "Unconstrained Power"
        txsourcepdo1.help = "First Source Capabilities PDO contents."
        txsourcepdo1.hide()

        txsourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Suspend Supported',
                'offset': 44,
                'bit length': 1})
        SourcePDO1_dm.addChild(txsourcepdo1)
        txsourcepdo1.reference_name = "USB Suspend Supported"
        txsourcepdo1.help = "First Source Capabilities PDO contents."

        txsourcepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Dual-Role Power',
                'offset': 45,
                'bit length': 1})
        SourcePDO1_dm.addChild(txsourcepdo1)
        txsourcepdo1.reference_name = "Dual-Role Power"
        txsourcepdo1.help = "First Source Capabilities PDO contents."
        txsourcepdo1.hide()

        txsourcepdo1 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 46,
                    'bit length': 2})
        txsourcepdo1.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        
        txsourcepdo1.reference_name = "Supply Type"
        txsourcepdo1.help = "First Source Capabilities PDO contents."
        txsourcepdo1.setMaxValue(3)
        txsourcepdo1ForceVal = register_class.cForceSetDMTerminator(self,
                                                     {'name': 'Supply Type',
                                                      'offset': 46,
                                                      'bit length': 2,
                                                      'force value': int(0),
                                                      'force display': 'Fixed',
                                                      'display widget' : txsourcepdo1})
        txsourcepdo1ForceVal.reference_name = "Supply Type"
        SourcePDO1_dm.addChild(txsourcepdo1ForceVal)

        SourcePDO1_dm.maxpower1 = 0
        SourcePDO1_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        SourcePDO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 2',
                                                         'offset': 10,
                                                         'bit length': 88})
        self.dataModel.addChild(SourcePDO2_dm)

        powerpathforpdo2 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 2',
                    'offset': 0,
                    'bit length': 2})
        powerpathforpdo2.setReportList(['PP1 Source this PDO', 'PP2 Source this PDO', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        SourcePDO2_dm.addChild(powerpathforpdo2)
        powerpathforpdo2.reference_name = "Power Path for PDO 2"
        powerpathforpdo2.help = "Configures which PP to use for PDO2."
        powerpathforpdo2.setMaxValue(3)
        powerpathforpdo2.registerAsCheckedField(power_path_for_pdo_2_0x32_fo_10_check_function, [["Global System Configuration", "PP1 Config"], ["Global System Configuration", "PP3 Config"]])

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 46,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 56,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 66,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO2_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 46,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO2_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 56,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 66,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 46,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 56,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 66,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 46,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 54,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 63,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 73,
                'bit length': 1})
        SourcePDO2_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 74,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO2_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        txsourcepdo2 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 76,
                    'bit length': 2})
        txsourcepdo2.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO2_dm.addChild(txsourcepdo2)
        txsourcepdo2.reference_name = "Supply Type"
        txsourcepdo2.help = "Second Source Capabilities PDO contents."
        txsourcepdo2.setMaxValue(3)
        txsourcepdo2.addUpdateRegisterByName("self")

        SourcePDO2_dm.maxpower = 0
        SourcePDO2_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        SourcePDO3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 3',
                                                         'offset': 12,
                                                         'bit length': 120})
        self.dataModel.addChild(SourcePDO3_dm)

        powerpathforpdo3 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 3',
                    'offset': 0,
                    'bit length': 2})
        powerpathforpdo3.setReportList(['PP1 Source this PDO', 'PP2 Source this PDO', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        SourcePDO3_dm.addChild(powerpathforpdo3)
        powerpathforpdo3.reference_name = "Power Path for PDO 3"
        powerpathforpdo3.help = "Configures which PP to use for PDO3. Same format as PowerPathForPDO2."
        powerpathforpdo3.setMaxValue(3)
        powerpathforpdo3.registerAsCheckedField(power_path_for_pdo_3_0x32_fo_12_check_function, [["Global System Configuration", "PP1 Config"], ["Global System Configuration", "PP3 Config"]])

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 76,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 86,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 96,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO3_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 76,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO3_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 86,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 96,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 76,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 86,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 96,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 76,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 84,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 93,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 103,
                'bit length': 1})
        SourcePDO3_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 104,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO3_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        txsourcepdo3 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 106,
                    'bit length': 2})
        txsourcepdo3.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO3_dm.addChild(txsourcepdo3)
        txsourcepdo3.reference_name = "Supply Type"
        txsourcepdo3.help = "Third Source Capabilities PDO contents."
        txsourcepdo3.setMaxValue(3)
        txsourcepdo3.addUpdateRegisterByName("self")

        SourcePDO3_dm.maxpower = 0
        SourcePDO3_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        SourcePDO4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 4',
                                                         'offset': 14,
                                                         'bit length': 152})
        self.dataModel.addChild(SourcePDO4_dm)

        powerpathforpdo4 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 4',
                    'offset': 0,
                    'bit length': 2})
        powerpathforpdo4.setReportList(['PP1 Source this PDO', 'PP2 Source this PDO', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        SourcePDO4_dm.addChild(powerpathforpdo4)
        powerpathforpdo4.reference_name = "Power Path for PDO 4"
        powerpathforpdo4.help = "Configures which PP to use for PDO4. Same format as PowerPathForPDO2."
        powerpathforpdo4.setMaxValue(3)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 106,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 116,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 126,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO4_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 106,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO4_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 116,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 126,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 106,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 116,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 126,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 106,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 114,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 123,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 133,
                'bit length': 1})
        SourcePDO4_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 134,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO4_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        txsourcepdo4 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 136,
                    'bit length': 2})
        txsourcepdo4.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO4_dm.addChild(txsourcepdo4)
        txsourcepdo4.reference_name = "Supply Type"
        txsourcepdo4.help = "Fourth Source Capabilities PDO contents."
        txsourcepdo4.setMaxValue(3)
        txsourcepdo4.addUpdateRegisterByName("self")

        SourcePDO4_dm.maxpower = 0
        SourcePDO4_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        SourcePDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 5',
                                                         'offset': 16,
                                                         'bit length': 184})
        self.dataModel.addChild(SourcePDO5_dm)

        powerpathforpdo5 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 5',
                    'offset': 0,
                    'bit length': 2})
        powerpathforpdo5.setReportList(['PP1 Source this PDO', 'PP2 Source this PDO', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        SourcePDO5_dm.addChild(powerpathforpdo5)
        powerpathforpdo5.reference_name = "Power Path for PDO 5"
        powerpathforpdo5.help = "Configures which PP to use for PDO5. Same format as PowerPathForPDO2."
        powerpathforpdo5.setMaxValue(3)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 136,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 146,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 156,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO5_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 136,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO5_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 146,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 156,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 136,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 146,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 156,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 136,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 144,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 153,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 163,
                'bit length': 1})
        SourcePDO5_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 164,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO5_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        txsourcepdo5 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 166,
                    'bit length': 2})
        txsourcepdo5.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO5_dm.addChild(txsourcepdo5)
        txsourcepdo5.reference_name = "Supply Type"
        txsourcepdo5.help = "Fifth Source Capabilities PDO contents."
        txsourcepdo5.setMaxValue(3)
        txsourcepdo5.addUpdateRegisterByName("self")

        SourcePDO5_dm.maxpower = 0
        SourcePDO5_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        SourcePDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 6',
                                                         'offset': 18,
                                                         'bit length': 216})
        self.dataModel.addChild(SourcePDO6_dm)

        powerpathforpdo6 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 6',
                    'offset': 0,
                    'bit length': 2})
        powerpathforpdo6.setReportList(['PP1 Source this PDO', 'PP2 Source this PDO', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        SourcePDO6_dm.addChild(powerpathforpdo6)
        powerpathforpdo6.reference_name = "Power Path for PDO 6"
        powerpathforpdo6.help = "Configures which PP to use for PDO6. Same format as PowerPathForPDO2."
        powerpathforpdo6.setMaxValue(3)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 166,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 176,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 186,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO6_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 166,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO6_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 176,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 186,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 166,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 176,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 186,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 166,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 174,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 183,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 193,
                'bit length': 1})
        SourcePDO6_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 194,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO6_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        txsourcepdo6 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 196,
                    'bit length': 2})
        txsourcepdo6.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO6_dm.addChild(txsourcepdo6)
        txsourcepdo6.reference_name = "Supply Type"
        txsourcepdo6.help = "Sixth Source Capabilities PDO contents."
        txsourcepdo6.setMaxValue(3)
        txsourcepdo6.addUpdateRegisterByName("self")

        SourcePDO6_dm.maxpower = 0
        SourcePDO6_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        SourcePDO7_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source PDO 7',
                                                         'offset': 20,
                                                         'bit length': 248})
        self.dataModel.addChild(SourcePDO7_dm)

        powerpathforpdo7 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 7',
                    'offset': 0,
                    'bit length': 2})
        powerpathforpdo7.setReportList(['PP1 Source this PDO', 'PP2 Source this PDO', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        SourcePDO7_dm.addChild(powerpathforpdo7)
        powerpathforpdo7.reference_name = "Power Path for PDO 7"
        powerpathforpdo7.help = "Configures which PP to use for PDO7. Same format as PowerPathForPDO2."
        powerpathforpdo7.setMaxValue(3)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 196,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO7_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 206,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 216,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SourcePDO7_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 196,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        SourcePDO7_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 206,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 216,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 196,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO7_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 206,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 216,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 196,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SourcePDO7_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 204,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 213,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SourcePDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        PPSPowerLimited = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Power Limited',
                'offset': 223,
                'bit length': 1})
        SourcePDO7_dm.addChild(PPSPowerLimited)
        PPSPowerLimited.reference_name = "PPS Power Limited-TX Source Cap PPS"

        SPRProgrammablePowerSupply = register_class.cListDMTerminator(self,
                {'name': 'SPR Programmable Power Supply',
                    'offset': 224,
                    'bit length': 2})
        SPRProgrammablePowerSupply.setReportList(['SPR Programmable Power Supply'])
        SourcePDO7_dm.addChild(SPRProgrammablePowerSupply)
        SPRProgrammablePowerSupply.reference_name = "SPR Programmable Power Supply-TX Source Cap PPS"
        SPRProgrammablePowerSupply.setMaxValue(0)

        txsourcepdo7 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 226,
                    'bit length': 2})
        txsourcepdo7.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        SourcePDO7_dm.addChild(txsourcepdo7)
        txsourcepdo7.reference_name = "Supply Type"
        txsourcepdo7.help = "Seventh Source Capabilities PDO contents."
        txsourcepdo7.setMaxValue(3)
        txsourcepdo7.addUpdateRegisterByName("self")

        SourcePDO7_dm.maxpower = 0
        SourcePDO7_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        EPRSourcePDO1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 1',
                                                         'offset': 248,
                                                         'bit length': 442})
        self.dataModel.addChild(EPRSourcePDO1_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO1_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO1_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO1_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO1_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO1_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO1_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO1_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsourcepdo8 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsourcepdo8.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO1_dm.addChild(txsourcepdo8)
        txsourcepdo8.reference_name = "Supply Type"
        txsourcepdo8.help = "EPR First Sink Capabilities PDO received"
        txsourcepdo8.setMaxValue(3)
        txsourcepdo8.addUpdateRegisterByName("self")

        powerpathforpdo8 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 8',
                    'offset': 192,
                    'bit length': 2})
        powerpathforpdo8.setReportList(['Reserved1', 'Reserved2', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        EPRSourcePDO1_dm.addChild(powerpathforpdo8)
        powerpathforpdo8.reference_name = "Power Path for PDO 8"
        powerpathforpdo8.help = "Configures which PP to use for PDO8."
        powerpathforpdo8.setMaxValue(3)

        EPRSourcePDO1_dm.maxpower = 0
        EPRSourcePDO1_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        EPRSourcePDO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 2',
                                                         'offset': 280,
                                                         'bit length': 444})
        self.dataModel.addChild(EPRSourcePDO2_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO2_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO2_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO2_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO2_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO2_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsourcepdo9 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsourcepdo9.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO2_dm.addChild(txsourcepdo9)
        txsourcepdo9.reference_name = "Supply Type"
        txsourcepdo9.help = "EPR Second Sink Capabilities PDO received"
        txsourcepdo9.setMaxValue(3)
        txsourcepdo9.addUpdateRegisterByName("self")

        powerpathforpdo9 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 9',
                    'offset': 162,
                    'bit length': 2})
        powerpathforpdo9.setReportList(['Reserved1', 'Reserved2', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        EPRSourcePDO2_dm.addChild(powerpathforpdo9)
        powerpathforpdo9.reference_name = "Power Path for PDO 9"
        powerpathforpdo9.help = "Configures which PP to use for PDO9."
        powerpathforpdo9.setMaxValue(3)

        EPRSourcePDO2_dm.maxpower = 0
        EPRSourcePDO2_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        EPRSourcePDO3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 3',
                                                         'offset': 312,
                                                         'bit length': 446})
        self.dataModel.addChild(EPRSourcePDO3_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO3_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO3_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO3_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO3_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO3_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsourcepdo10 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsourcepdo10.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO3_dm.addChild(txsourcepdo10)
        txsourcepdo10.reference_name = "Supply Type"
        txsourcepdo10.help = "EPR Third Sink Capabilities PDO received"
        txsourcepdo10.setMaxValue(3)
        txsourcepdo10.addUpdateRegisterByName("self")

        powerpathforpdo10 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 10',
                    'offset': 132,
                    'bit length': 2})
        powerpathforpdo10.setReportList(['Reserved1', 'Reserved2', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        EPRSourcePDO3_dm.addChild(powerpathforpdo10)
        powerpathforpdo10.reference_name = "Power Path for PDO 10"
        powerpathforpdo10.help = "Configures which PP to use for PDO10."
        powerpathforpdo10.setMaxValue(3)

        EPRSourcePDO3_dm.maxpower = 0
        EPRSourcePDO3_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        EPRSourcePDO4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 4',
                                                         'offset': 344,
                                                         'bit length': 448})
        self.dataModel.addChild(EPRSourcePDO4_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO4_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO4_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO4_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO4_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO4_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsourcepdo11 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsourcepdo11.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO4_dm.addChild(txsourcepdo11)
        txsourcepdo11.reference_name = "Supply Type"
        txsourcepdo11.help = "EPR Fourth Sink Capabilities PDO received"
        txsourcepdo11.setMaxValue(3)
        txsourcepdo11.addUpdateRegisterByName("self")

        powerpathforpdo11 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 11',
                    'offset': 102,
                    'bit length': 2})
        powerpathforpdo11.setReportList(['Reserved1', 'Reserved2', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        EPRSourcePDO4_dm.addChild(powerpathforpdo11)
        powerpathforpdo11.reference_name = "Power Path for PDO 11"
        powerpathforpdo11.help = "Configures which PP to use for PDO11."
        powerpathforpdo11.setMaxValue(3)

        EPRSourcePDO4_dm.maxpower = 0
        EPRSourcePDO4_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        EPRSourcePDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 5',
                                                         'offset': 376,
                                                         'bit length': 450})
        self.dataModel.addChild(EPRSourcePDO5_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO5_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO5_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO5_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO5_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO5_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsourcepdo12 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsourcepdo12.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO5_dm.addChild(txsourcepdo12)
        txsourcepdo12.reference_name = "Supply Type"
        txsourcepdo12.help = "EPR Fifth Sink Capabilities PDO received"
        txsourcepdo12.setMaxValue(3)
        txsourcepdo12.addUpdateRegisterByName("self")

        powerpathforpdo12 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 12',
                    'offset': 72,
                    'bit length': 2})
        powerpathforpdo12.setReportList(['Reserved1', 'Reserved2', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        EPRSourcePDO5_dm.addChild(powerpathforpdo12)
        powerpathforpdo12.reference_name = "Power Path for PDO 12"
        powerpathforpdo12.help = "Configures which PP to use for PDO12."
        powerpathforpdo12.setMaxValue(3)

        EPRSourcePDO5_dm.maxpower = 0
        EPRSourcePDO5_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        EPRSourcePDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Source PDO 6',
                                                         'offset': 408,
                                                         'bit length': 452})
        self.dataModel.addChild(EPRSourcePDO6_dm)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Fixed"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Source Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)
        Voltage.addUpdateRegisterByName("self")

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO6_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Source Cap Fixed"
        PeakCurrent.setMaxValue(3)

        MaximumPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumPower.dictScaleUnits = {'W': 0.25}
        MaximumPower.defaultUnit = 'W'
        EPRSourcePDO6_dm.addChild(MaximumPower)
        MaximumPower.reference_name = "Maximum Power-TX Source Cap Battery"
        MaximumPower.setMaxValue(1023)
        MaximumPower.setMinValue(0)
        MaximumPower.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        MaximumCurrent.dictScaleUnits = {'A': 0.01}
        MaximumCurrent.defaultUnit = 'A'
        EPRSourcePDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Source Cap Variable"
        MaximumCurrent.setMaxValue(1023)
        MaximumCurrent.setMinValue(0)
        MaximumCurrent.addUpdateRegisterByName("self")

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)
        MaximumVoltage.addUpdateRegisterByName("self")

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSourcePDO6_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Source Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Source Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSourcePDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Source Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        AVSPeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'AVS Peak Current',
                    'offset': 26,
                    'bit length': 2})
        AVSPeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSourcePDO6_dm.addChild(AVSPeakCurrent)
        AVSPeakCurrent.reference_name = "AVS Peak Current-TX Source Cap AVS"
        AVSPeakCurrent.setMaxValue(3)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSourcePDO6_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Source Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsourcepdo13 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsourcepdo13.setReportList(['Fixed', 'Battery', 'Variable', 'Source AVS'])
        EPRSourcePDO6_dm.addChild(txsourcepdo13)
        txsourcepdo13.reference_name = "Supply Type"
        txsourcepdo13.help = "EPR Sixth Sink Capabilities PDO received"
        txsourcepdo13.setMaxValue(3)
        txsourcepdo13.addUpdateRegisterByName("self")

        powerpathforpdo13 = register_class.cListDMTerminator(self,
                {'name': 'Power Path for PDO 13',
                    'offset': 42,
                    'bit length': 2})
        powerpathforpdo13.setReportList(['Reserved1', 'Reserved2', 'PP3 Source this PDO', 'PP4 Source this PDO'])
        EPRSourcePDO6_dm.addChild(powerpathforpdo13)
        powerpathforpdo13.reference_name = "Power Path for PDO 13"
        powerpathforpdo13.help = "Configures which PP to use for PDO13."
        powerpathforpdo13.setMaxValue(3)

        EPRSourcePDO6_dm.maxpower = 0
        EPRSourcePDO6_dm.addUpdateRegisterByName("Tx Source Capabilities Extended Data Block")

        VirtualSwitchEnable_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Virtual Switch Enable',
                                                         'offset': 472,
                                                         'bit length': 485})
        self.dataModel.addChild(VirtualSwitchEnable_dm)

        pdovirtualswitchenablepdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO1',
                'offset': 0,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo1)
        pdovirtualswitchenablepdo1.reference_name = "Virtual Switch Enable for PDO1"
        pdovirtualswitchenablepdo1.help = "Enable external power path control via GPIO event for PDO1"

        pdovirtualswitchenablepdo2 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO2',
                'offset': 1,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo2)
        pdovirtualswitchenablepdo2.reference_name = "Virtual Switch Enable for PDO2"
        pdovirtualswitchenablepdo2.help = "Enable external power path control via GPIO event for PDO2"

        pdovirtualswitchenablepdo3 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO3',
                'offset': 2,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo3)
        pdovirtualswitchenablepdo3.reference_name = "Virtual Switch Enable for PDO3"
        pdovirtualswitchenablepdo3.help = "Enable external power path control via GPIO event for PDO3"

        pdovirtualswitchenablepdo4 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO4',
                'offset': 3,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo4)
        pdovirtualswitchenablepdo4.reference_name = "Virtual Switch Enable for PDO4"
        pdovirtualswitchenablepdo4.help = "Enable external power path control via GPIO event for PDO4"

        pdovirtualswitchenablepdo5 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO5',
                'offset': 4,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo5)
        pdovirtualswitchenablepdo5.reference_name = "Virtual Switch Enable for PDO5"
        pdovirtualswitchenablepdo5.help = "Enable external power path control via GPIO event for PDO5"

        pdovirtualswitchenablepdo6 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO6',
                'offset': 5,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo6)
        pdovirtualswitchenablepdo6.reference_name = "Virtual Switch Enable for PDO6"
        pdovirtualswitchenablepdo6.help = "Enable external power path control via GPIO event for PDO6"

        pdovirtualswitchenablepdo7 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO7',
                'offset': 6,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo7)
        pdovirtualswitchenablepdo7.reference_name = "Virtual Switch Enable for PDO7"
        pdovirtualswitchenablepdo7.help = "Enable external power path control via GPIO event for PDO7"

        pdovirtualswitchenablepdo8 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO8',
                'offset': 7,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo8)
        pdovirtualswitchenablepdo8.reference_name = "Virtual Switch Enable for PDO8"
        pdovirtualswitchenablepdo8.help = "Enable external power path control via GPIO event for PDO8"

        pdovirtualswitchenablepdo9 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO9',
                'offset': 8,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo9)
        pdovirtualswitchenablepdo9.reference_name = "Virtual Switch Enable for PDO9"
        pdovirtualswitchenablepdo9.help = "Enable external power path control via GPIO event for PDO9"

        pdovirtualswitchenablepdo10 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO10',
                'offset': 9,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo10)
        pdovirtualswitchenablepdo10.reference_name = "Virtual Switch Enable for PDO10"
        pdovirtualswitchenablepdo10.help = "Enable external power path control via GPIO event for PDO10"

        pdovirtualswitchenablepdo11 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO11',
                'offset': 10,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo11)
        pdovirtualswitchenablepdo11.reference_name = "Virtual Switch Enable for PDO11"
        pdovirtualswitchenablepdo11.help = "Enable external power path control via GPIO event for PDO11"

        pdovirtualswitchenablepdo12 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO12',
                'offset': 11,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo12)
        pdovirtualswitchenablepdo12.reference_name = "Virtual Switch Enable for PDO12"
        pdovirtualswitchenablepdo12.help = "Enable external power path control via GPIO event for PDO12"

        pdovirtualswitchenablepdo13 = register_class.cBooleanDMTerminator(self,
                {'name': 'Virtual Switch Enable for PDO13',
                'offset': 12,
                'bit length': 1})
        VirtualSwitchEnable_dm.addChild(pdovirtualswitchenablepdo13)
        pdovirtualswitchenablepdo13.reference_name = "Virtual Switch Enable for PDO13"
        pdovirtualswitchenablepdo13.help = "Enable external power path control via GPIO event for PDO13"

        self.dataModel.parent = self
        self.dataModel.setDataModelGenerator(txsourcecaps_dm_generator)

        update_function = get_updater_function("txsourcecaps_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

def txsinkcaps_dm_generator(self):

    SinkPDO2OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO2OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO2OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO2OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    SinkPDO2OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    SinkPDO2OperatingCurrentTXSinkCapFixed.setMinValue(0)
    SinkPDO2VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO2VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO2VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO2VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    SinkPDO2VoltageTXSinkCapFixed.setMaxValue(1023)
    SinkPDO2VoltageTXSinkCapFixed.setMinValue(0)
    SinkPDO2PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO2PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO2PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    SinkPDO2PeakCurrentTXSinkCapFixed.setMaxValue(3)
    SinkPDO2OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO2OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO2OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO2OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO2OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO2OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO2MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO2MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO2MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO2MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO2MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO2MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO2MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO2MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO2MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO2MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO2MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO2MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO2OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO2OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO2OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO2OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO2OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO2OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO2MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO2MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO2MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO2MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO2MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO2MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO2MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO2MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO2MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO2MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO2MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO2MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO2MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO2MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO2MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO2MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO2MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO2MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO2MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO2MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO2MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO2MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO2MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO2MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO2MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO2MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO2MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO2MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO2MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO2MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO3OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO3OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO3OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO3OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    SinkPDO3OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    SinkPDO3OperatingCurrentTXSinkCapFixed.setMinValue(0)
    SinkPDO3VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO3VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO3VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO3VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    SinkPDO3VoltageTXSinkCapFixed.setMaxValue(1023)
    SinkPDO3VoltageTXSinkCapFixed.setMinValue(0)
    SinkPDO3PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO3PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO3PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    SinkPDO3PeakCurrentTXSinkCapFixed.setMaxValue(3)
    SinkPDO3OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO3OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO3OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO3OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO3OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO3OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO3MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO3MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO3MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO3MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO3MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO3MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO3MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO3MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO3MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO3MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO3MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO3MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO3OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO3OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO3OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO3OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO3OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO3OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO3MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO3MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO3MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO3MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO3MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO3MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO3MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO3MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO3MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO3MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO3MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO3MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO3MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO3MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO3MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO3MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO3MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO3MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO3MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO3MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO3MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO3MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO3MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO3MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO3MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO3MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO3MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO3MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO3MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO3MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO4OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO4OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO4OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO4OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    SinkPDO4OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    SinkPDO4OperatingCurrentTXSinkCapFixed.setMinValue(0)
    SinkPDO4VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO4VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO4VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO4VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    SinkPDO4VoltageTXSinkCapFixed.setMaxValue(1023)
    SinkPDO4VoltageTXSinkCapFixed.setMinValue(0)
    SinkPDO4PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO4PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO4PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    SinkPDO4PeakCurrentTXSinkCapFixed.setMaxValue(3)
    SinkPDO4OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO4OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO4OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO4OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO4OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO4OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO4MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO4MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO4MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO4MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO4MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO4MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO4MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO4MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO4MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO4MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO4MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO4MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO4OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO4OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO4OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO4OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO4OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO4OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO4MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO4MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO4MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO4MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO4MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO4MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO4MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO4MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO4MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO4MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO4MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO4MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO4MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO4MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO4MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO4MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO4MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO4MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO4MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO4MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO4MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO4MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO4MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO4MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO4MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO4MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO4MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO4MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO4MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO4MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO5OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO5OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO5OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO5OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    SinkPDO5OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    SinkPDO5OperatingCurrentTXSinkCapFixed.setMinValue(0)
    SinkPDO5VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO5VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO5VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO5VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    SinkPDO5VoltageTXSinkCapFixed.setMaxValue(1023)
    SinkPDO5VoltageTXSinkCapFixed.setMinValue(0)
    SinkPDO5PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO5PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO5PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    SinkPDO5PeakCurrentTXSinkCapFixed.setMaxValue(3)
    SinkPDO5OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO5OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO5OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO5OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO5OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO5OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO5MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO5MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO5MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO5MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO5MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO5MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO5MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO5MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO5MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO5MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO5MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO5MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO5OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO5OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO5OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO5OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO5OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO5OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO5MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO5MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO5MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO5MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO5MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO5MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO5MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO5MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO5MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO5MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO5MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO5MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO5MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO5MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO5MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO5MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO5MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO5MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO5MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO5MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO5MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO5MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO5MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO5MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO5MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO5MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO5MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO5MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO5MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO5MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO6OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO6OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO6OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO6OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    SinkPDO6OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    SinkPDO6OperatingCurrentTXSinkCapFixed.setMinValue(0)
    SinkPDO6VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO6VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO6VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO6VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    SinkPDO6VoltageTXSinkCapFixed.setMaxValue(1023)
    SinkPDO6VoltageTXSinkCapFixed.setMinValue(0)
    SinkPDO6PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO6PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO6PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    SinkPDO6PeakCurrentTXSinkCapFixed.setMaxValue(3)
    SinkPDO6OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO6OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO6OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO6OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO6OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO6OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO6MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO6MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO6MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO6MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO6MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO6MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO6MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO6MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO6MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO6MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO6MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO6MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO6OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO6OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO6OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO6OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO6OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO6OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO6MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO6MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO6MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO6MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO6MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO6MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO6MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO6MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO6MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO6MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO6MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO6MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO6MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO6MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO6MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO6MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO6MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO6MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO6MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO6MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO6MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO6MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO6MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO6MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO6MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO6MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO6MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO6MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO6MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO6MaximumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO7OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO7OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    SinkPDO7OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    SinkPDO7OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    SinkPDO7OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    SinkPDO7OperatingCurrentTXSinkCapFixed.setMinValue(0)
    SinkPDO7VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO7VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    SinkPDO7VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    SinkPDO7VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    SinkPDO7VoltageTXSinkCapFixed.setMaxValue(1023)
    SinkPDO7VoltageTXSinkCapFixed.setMinValue(0)
    SinkPDO7PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    SinkPDO7PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    SinkPDO7PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    SinkPDO7PeakCurrentTXSinkCapFixed.setMaxValue(3)
    SinkPDO7OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO7OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    SinkPDO7OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    SinkPDO7OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    SinkPDO7OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    SinkPDO7OperatingPowerTXSinkCapBattery.setMinValue(0)
    SinkPDO7MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO7MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO7MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO7MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    SinkPDO7MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO7MinimumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO7MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO7MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    SinkPDO7MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    SinkPDO7MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    SinkPDO7MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    SinkPDO7MaximumVoltageTXSinkCapBattery.setMinValue(0)
    SinkPDO7OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    SinkPDO7OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    SinkPDO7OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    SinkPDO7OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    SinkPDO7OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    SinkPDO7OperatingCurrentTXSinkCapVariable.setMinValue(0)
    SinkPDO7MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    SinkPDO7MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO7MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO7MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    SinkPDO7MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO7MinimumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO7MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    SinkPDO7MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    SinkPDO7MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    SinkPDO7MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    SinkPDO7MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    SinkPDO7MaximumVoltageTXSinkCapVariable.setMinValue(0)
    SinkPDO7MaximumCurrentTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Current',
                                                  'offset': 0,
                                                  'bit length': 7})
    SinkPDO7MaximumCurrentTXSinkCapPPS.dictScaleUnits = {'A': 0.05}
    SinkPDO7MaximumCurrentTXSinkCapPPS.defaultUnit = 'A'
    
    SinkPDO7MaximumCurrentTXSinkCapPPS.reference_name = "Maximum Current-TX Sink Cap PPS"
    SinkPDO7MaximumCurrentTXSinkCapPPS.setMaxValue(127)
    SinkPDO7MaximumCurrentTXSinkCapPPS.setMinValue(0)
    SinkPDO7MinimumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    SinkPDO7MinimumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO7MinimumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO7MinimumVoltageTXSinkCapPPS.reference_name = "Minimum Voltage-TX Sink Cap PPS"
    SinkPDO7MinimumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO7MinimumVoltageTXSinkCapPPS.setMinValue(0)
    SinkPDO7MaximumVoltageTXSinkCapPPS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 8})
    SinkPDO7MaximumVoltageTXSinkCapPPS.dictScaleUnits = {'V': 0.1}
    SinkPDO7MaximumVoltageTXSinkCapPPS.defaultUnit = 'V'
    
    SinkPDO7MaximumVoltageTXSinkCapPPS.reference_name = "Maximum Voltage-TX Sink Cap PPS"
    SinkPDO7MaximumVoltageTXSinkCapPPS.setMaxValue(255)
    SinkPDO7MaximumVoltageTXSinkCapPPS.setMinValue(0)
    EPRSinkPDO1OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO1OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO1OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO1OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    EPRSinkPDO1OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO1OperatingCurrentTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO1VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO1VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO1VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    EPRSinkPDO1VoltageTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO1VoltageTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO1PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO1PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO1PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    EPRSinkPDO1PeakCurrentTXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO1OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO1OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO1MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO1MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO1OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO1MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO1MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO1PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO1PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO1PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO1PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO1PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO1PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO1MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO1MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO2OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO2OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO2OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO2OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    EPRSinkPDO2OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO2OperatingCurrentTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO2VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO2VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO2VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    EPRSinkPDO2VoltageTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO2VoltageTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO2PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO2PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO2PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    EPRSinkPDO2PeakCurrentTXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO2OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO2OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO2MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO2MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO2OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO2MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO2MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO2PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO2PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO2PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO2PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO2PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO2PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO2MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO2MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO3OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO3OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO3OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO3OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    EPRSinkPDO3OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO3OperatingCurrentTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO3VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO3VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO3VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    EPRSinkPDO3VoltageTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO3VoltageTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO3PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO3PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO3PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    EPRSinkPDO3PeakCurrentTXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO3OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO3OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO3MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO3MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO3OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO3MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO3MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO3PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO3PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO3PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO3PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO3PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO3PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO3MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO3MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO4OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO4OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO4OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO4OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    EPRSinkPDO4OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO4OperatingCurrentTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO4VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO4VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO4VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    EPRSinkPDO4VoltageTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO4VoltageTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO4PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO4PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO4PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    EPRSinkPDO4PeakCurrentTXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO4OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO4OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO4MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO4MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO4OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO4MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO4MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO4PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO4PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO4PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO4PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO4PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO4PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO4MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO4MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO5OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO5OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO5OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO5OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    EPRSinkPDO5OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO5OperatingCurrentTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO5VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO5VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO5VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    EPRSinkPDO5VoltageTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO5VoltageTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO5PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO5PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO5PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    EPRSinkPDO5PeakCurrentTXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO5OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO5OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO5MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO5MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO5OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO5MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO5MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO5PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO5PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO5PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO5PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO5PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO5PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO5MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO5MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    EPRSinkPDO6OperatingCurrentTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO6OperatingCurrentTXSinkCapFixed.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO6OperatingCurrentTXSinkCapFixed.defaultUnit = 'A'
    
    EPRSinkPDO6OperatingCurrentTXSinkCapFixed.reference_name = "Operating Current-TX Sink Cap Fixed"
    EPRSinkPDO6OperatingCurrentTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO6OperatingCurrentTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO6VoltageTXSinkCapFixed = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO6VoltageTXSinkCapFixed.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6VoltageTXSinkCapFixed.defaultUnit = 'V'
    
    EPRSinkPDO6VoltageTXSinkCapFixed.reference_name = "Voltage-TX Sink Cap Fixed"
    EPRSinkPDO6VoltageTXSinkCapFixed.setMaxValue(1023)
    EPRSinkPDO6VoltageTXSinkCapFixed.setMinValue(0)
    EPRSinkPDO6PeakCurrentTXSinkCapFixed = register_class.cListDMTerminator(self.parent,
            {'name': 'Peak Current',
                'offset': 20,
                'bit length': 2})
    EPRSinkPDO6PeakCurrentTXSinkCapFixed.setReportList(['100%', '130%', '150%', '200%'])
    
    EPRSinkPDO6PeakCurrentTXSinkCapFixed.reference_name = "Peak Current-TX Sink Cap Fixed"
    EPRSinkPDO6PeakCurrentTXSinkCapFixed.setMaxValue(3)
    EPRSinkPDO6OperatingPowerTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Power',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.dictScaleUnits = {'W': 0.25}
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.defaultUnit = 'W'
    
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.reference_name = "Operating Power-TX Sink Cap Battery"
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO6OperatingPowerTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.reference_name = "Minimum Voltage-TX Sink Cap Battery"
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO6MinimumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.defaultUnit = 'V'
    
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.reference_name = "Maximum Voltage-TX Sink Cap Battery"
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.setMaxValue(1023)
    EPRSinkPDO6MaximumVoltageTXSinkCapBattery.setMinValue(0)
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Operating Current',
                                                  'offset': 0,
                                                  'bit length': 10})
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.dictScaleUnits = {'A': 0.01}
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.defaultUnit = 'A'
    
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.reference_name = "Operating Current-TX Sink Cap Variable"
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO6OperatingCurrentTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 10,
                                                  'bit length': 10})
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.reference_name = "Minimum Voltage-TX Sink Cap Variable"
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO6MinimumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 20,
                                                  'bit length': 10})
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.dictScaleUnits = {'V': 0.05}
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.defaultUnit = 'V'
    
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.reference_name = "Maximum Voltage-TX Sink Cap Variable"
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.setMaxValue(1023)
    EPRSinkPDO6MaximumVoltageTXSinkCapVariable.setMinValue(0)
    EPRSinkPDO6PDPTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'PDP',
                                                  'offset': 0,
                                                  'bit length': 8})
    EPRSinkPDO6PDPTXSinkCapAVS.dictScaleUnits = {'W': 1.0}
    EPRSinkPDO6PDPTXSinkCapAVS.defaultUnit = 'W'
    
    EPRSinkPDO6PDPTXSinkCapAVS.reference_name = "PDP-TX Sink Cap AVS"
    EPRSinkPDO6PDPTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO6PDPTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Minimum Voltage',
                                                  'offset': 8,
                                                  'bit length': 8})
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.reference_name = "Minimum Voltage-TX Sink Cap AVS"
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.setMaxValue(255)
    EPRSinkPDO6MinimumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'Maximum Voltage',
                                                  'offset': 17,
                                                  'bit length': 9})
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.dictScaleUnits = {'V': 0.1}
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.defaultUnit = 'V'
    
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.reference_name = "Maximum Voltage-TX Sink Cap AVS"
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.setMaxValue(511)
    EPRSinkPDO6MaximumVoltageTXSinkCapAVS.setMinValue(0)
    EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS = register_class.cListDMTerminator(self.parent,
            {'name': 'EPR Adjustable Voltage Supply',
                'offset': 28,
                'bit length': 2})
    EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
    
    EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
    EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS.setMaxValue(1)
    if get_child_object_with_refname(self, [u'Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 2']), SinkPDO2MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 2):
        get_child_object(self, [u'Sink PDO 2']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 2']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 3']), SinkPDO3MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 3):
        get_child_object(self, [u'Sink PDO 3']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 3']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 4']), SinkPDO4MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 4):
        get_child_object(self, [u'Sink PDO 4']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 4']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 5']), SinkPDO5MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 5):
        get_child_object(self, [u'Sink PDO 5']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 5']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 6']), SinkPDO6MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 6):
        get_child_object(self, [u'Sink PDO 6']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 6']).hide()

    if get_child_object_with_refname(self, [u'Sink PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MaximumCurrentTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MinimumVoltageTXSinkCapPPS)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MaximumVoltageTXSinkCapPPS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'Sink PDO 7', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'Sink PDO 7']), SinkPDO7MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Current'], "Maximum Current-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap PPS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'Sink PDO 7', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'Number Valid PDOs']).valueToInt() >= 7):
        get_child_object(self, [u'Sink PDO 7']).unhide()

    else:
        get_child_object(self, [u'Sink PDO 7']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 1']), EPRSinkPDO1MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 1', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'TX Sink Num Valid EPR PDOs']).valueToInt() >= 1):
        get_child_object(self, [u'EPR Sink PDO 1']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 1']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 2']), EPRSinkPDO2MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 2', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'TX Sink Num Valid EPR PDOs']).valueToInt() >= 2):
        get_child_object(self, [u'EPR Sink PDO 2']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 2']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 3']), EPRSinkPDO3MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 3', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'TX Sink Num Valid EPR PDOs']).valueToInt() >= 3):
        get_child_object(self, [u'EPR Sink PDO 3']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 3']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 4']), EPRSinkPDO4MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 4', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'TX Sink Num Valid EPR PDOs']).valueToInt() >= 4):
        get_child_object(self, [u'EPR Sink PDO 4']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 4']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 5']), EPRSinkPDO5MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 5', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'TX Sink Num Valid EPR PDOs']).valueToInt() >= 5):
        get_child_object(self, [u'EPR Sink PDO 5']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 5']).hide()

    if get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 1:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6OperatingPowerTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MinimumVoltageTXSinkCapBattery)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MaximumVoltageTXSinkCapBattery)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6OperatingCurrentTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Voltage'], "Voltage-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6VoltageTXSinkCapFixed)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6PeakCurrentTXSinkCapFixed)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'PDP'], "PDP-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6PDPTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MinimumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MaximumVoltageTXSinkCapAVS)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6EPRAdjustableVoltageSupplyTXSinkCapAVS)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"))

    if get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Supply Type'], "Supply Type").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6OperatingCurrentTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MinimumVoltageTXSinkCapVariable)
        add_field_if_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Variable"), get_child_object(self,[u'EPR Sink PDO 6']), EPRSinkPDO6MaximumVoltageTXSinkCapVariable)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Current'], "Operating Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Voltage'], "Voltage-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Peak Current'], "Peak Current-TX Sink Cap Fixed"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'PDP'], "PDP-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'EPR Adjustable Voltage Supply'], "EPR Adjustable Voltage Supply-TX Sink Cap AVS"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Operating Power'], "Operating Power-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Minimum Voltage'], "Minimum Voltage-TX Sink Cap Battery"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'EPR Sink PDO 6', u'Maximum Voltage'], "Maximum Voltage-TX Sink Cap Battery"))

    if (get_child_object(self, ['Number of Sink PDOs', 'TX Sink Num Valid EPR PDOs']).valueToInt() >= 6):
        get_child_object(self, [u'EPR Sink PDO 6']).unhide()

    else:
        get_child_object(self, [u'EPR Sink PDO 6']).hide()

    return self.childrenAsListDMGenerator()


class ctxsinkcaps_0x33_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Transmit Sink Capabilities',
                                           'address': 0x33,
                                           'byte length': 53,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Transmit Sink Capabilities',
                                                         'offset': 0,
                                                         'bit length': 424})

        NumberofSinkPDOs_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Number of Sink PDOs',
                                                         'offset': 0,
                                                         'bit length': 6})
        self.dataModel.addChild(NumberofSinkPDOs_dm)

        numvalidpdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid PDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        NumberofSinkPDOs_dm.addChild(numvalidpdos)
        numvalidpdos.reference_name = "Number Valid PDOs"
        numvalidpdos.setMaxValue(7)
        numvalidpdos.setMinValue(0)
        numvalidpdos.addUpdateRegisterByName("self")

        txsinknumvalideprpdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'TX Sink Num Valid EPR PDOs',
                                                      'offset': 3,
                                                      'bit length': 3})
        NumberofSinkPDOs_dm.addChild(txsinknumvalideprpdos)
        txsinknumvalideprpdos.reference_name = "TX Sink Num Valid EPR PDOs"
        txsinknumvalideprpdos.setMaxValue(6)
        txsinknumvalideprpdos.setMinValue(0)
        txsinknumvalideprpdos.addUpdateRegisterByName("self")

        SinkPDO1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 1',
                                                         'offset': 8,
                                                         'bit length': 40})
        self.dataModel.addChild(SinkPDO1_dm)

        txsinkpdo1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        txsinkpdo1.dictScaleUnits = {'A': 0.01}
        txsinkpdo1.defaultUnit = 'A'
        SinkPDO1_dm.addChild(txsinkpdo1)
        txsinkpdo1.reference_name = "Operating Current"
        txsinkpdo1.help = "First Sink Capabilities PDO contents."
        txsinkpdo1.setMaxValue(1023)
        txsinkpdo1.setMinValue(0)

        txsinkpdo1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        txsinkpdo1.dictScaleUnits = {'V': 0.05}
        txsinkpdo1.defaultUnit = 'V'
        
        txsinkpdo1.reference_name = "Voltage"
        txsinkpdo1.help = "First Sink Capabilities PDO contents."
        txsinkpdo1.setMaxValue(1023)
        txsinkpdo1.setMinValue(0)
        txsinkpdo1ForceVal = register_class.cForceSetDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10,
                                                      'force value': int(100),
                                                      'force display': '5 V',
                                                      'display widget' : txsinkpdo1})
        txsinkpdo1ForceVal.reference_name = "Voltage"
        SinkPDO1_dm.addChild(txsinkpdo1ForceVal)

        txsinkpdo1 = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        txsinkpdo1.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO1_dm.addChild(txsinkpdo1)
        txsinkpdo1.reference_name = "Peak Current"
        txsinkpdo1.help = "First Sink Capabilities PDO contents."
        txsinkpdo1.setMaxValue(3)

        txsinkpdo1 = register_class.cListDMTerminator(self,
                {'name': 'Fast Role Swap required USB Type-C Current',
                    'offset': 23,
                    'bit length': 2})
        txsinkpdo1.setReportList(['FRS Not Supported', 'Default USB Power', '5V,1.5A', '5V,3A'])
        SinkPDO1_dm.addChild(txsinkpdo1)
        txsinkpdo1.reference_name = "Fast Role Swap required USB Type-C Current"
        txsinkpdo1.help = "First Sink Capabilities PDO contents."
        txsinkpdo1.setMaxValue(3)

        txsinkpdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Higher Capability',
                'offset': 28,
                'bit length': 1})
        SinkPDO1_dm.addChild(txsinkpdo1)
        txsinkpdo1.reference_name = "Higher Capability"
        txsinkpdo1.help = "First Sink Capabilities PDO contents."

        txsinkpdo1 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo1.setReportList(['Fixed', 'Battery', 'Variable'])
        
        txsinkpdo1.reference_name = "Supply Type"
        txsinkpdo1.help = "First Sink Capabilities PDO contents."
        txsinkpdo1.setMaxValue(2)
        txsinkpdo1ForceVal = register_class.cForceSetDMTerminator(self,
                                                     {'name': 'Supply Type',
                                                      'offset': 30,
                                                      'bit length': 2,
                                                      'force value': int(0),
                                                      'force display': 'Fixed',
                                                      'display widget' : txsinkpdo1})
        txsinkpdo1ForceVal.reference_name = "Supply Type"
        SinkPDO1_dm.addChild(txsinkpdo1ForceVal)

        SinkPDO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 2',
                                                         'offset': 40,
                                                         'bit length': 72})
        self.dataModel.addChild(SinkPDO2_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO2_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO2_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO2_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO2_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO2_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        txsinkpdo2 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo2.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO2_dm.addChild(txsinkpdo2)
        txsinkpdo2.reference_name = "Supply Type"
        txsinkpdo2.help = "Second Sink Capabilities PDO contents."
        txsinkpdo2.setMaxValue(3)
        txsinkpdo2.addUpdateRegisterByName("self")

        SinkPDO3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 3',
                                                         'offset': 72,
                                                         'bit length': 104})
        self.dataModel.addChild(SinkPDO3_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO3_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO3_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO3_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO3_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO3_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        txsinkpdo3 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo3.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO3_dm.addChild(txsinkpdo3)
        txsinkpdo3.reference_name = "Supply Type"
        txsinkpdo3.help = "Third Sink Capabilities PDO contents."
        txsinkpdo3.setMaxValue(3)
        txsinkpdo3.addUpdateRegisterByName("self")

        SinkPDO4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 4',
                                                         'offset': 104,
                                                         'bit length': 136})
        self.dataModel.addChild(SinkPDO4_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO4_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO4_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO4_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO4_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO4_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        txsinkpdo4 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo4.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO4_dm.addChild(txsinkpdo4)
        txsinkpdo4.reference_name = "Supply Type"
        txsinkpdo4.help = "Fourth Sink Capabilities PDO contents."
        txsinkpdo4.setMaxValue(3)
        txsinkpdo4.addUpdateRegisterByName("self")

        SinkPDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 5',
                                                         'offset': 136,
                                                         'bit length': 168})
        self.dataModel.addChild(SinkPDO5_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO5_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO5_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO5_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO5_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO5_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        txsinkpdo5 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo5.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO5_dm.addChild(txsinkpdo5)
        txsinkpdo5.reference_name = "Supply Type"
        txsinkpdo5.help = "Fifth Sink Capabilities PDO contents."
        txsinkpdo5.setMaxValue(3)
        txsinkpdo5.addUpdateRegisterByName("self")

        SinkPDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 6',
                                                         'offset': 168,
                                                         'bit length': 200})
        self.dataModel.addChild(SinkPDO6_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO6_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO6_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO6_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO6_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO6_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        txsinkpdo6 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo6.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO6_dm.addChild(txsinkpdo6)
        txsinkpdo6.reference_name = "Supply Type"
        txsinkpdo6.help = "Sixth Sink Capabilities PDO contents."
        txsinkpdo6.setMaxValue(3)
        txsinkpdo6.addUpdateRegisterByName("self")

        SinkPDO7_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PDO 7',
                                                         'offset': 200,
                                                         'bit length': 232})
        self.dataModel.addChild(SinkPDO7_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO7_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        SinkPDO7_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        SinkPDO7_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        SinkPDO7_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        MaximumCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 7})
        MaximumCurrent.dictScaleUnits = {'A': 0.05}
        MaximumCurrent.defaultUnit = 'A'
        SinkPDO7_dm.addChild(MaximumCurrent)
        MaximumCurrent.reference_name = "Maximum Current-TX Sink Cap PPS"
        MaximumCurrent.setMaxValue(127)
        MaximumCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap PPS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 8})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        SinkPDO7_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap PPS"
        MaximumVoltage.setMaxValue(255)
        MaximumVoltage.setMinValue(0)

        txsinkpdo7 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo7.setReportList(['Fixed', 'Battery', 'Variable', 'Sink PPS'])
        SinkPDO7_dm.addChild(txsinkpdo7)
        txsinkpdo7.reference_name = "Supply Type"
        txsinkpdo7.help = "Seventh Sink Capabilities PDO contents."
        txsinkpdo7.setMaxValue(3)
        txsinkpdo7.addUpdateRegisterByName("self")

        EPRSinkPDO1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 1',
                                                         'offset': 232,
                                                         'bit length': 264})
        self.dataModel.addChild(EPRSinkPDO1_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO1_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO1_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO1_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO1_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO1_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO1_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO1_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsinkpdo8 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo8.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO1_dm.addChild(txsinkpdo8)
        txsinkpdo8.reference_name = "Supply Type"
        txsinkpdo8.help = "EPR First Sink Capabilities PDO received"
        txsinkpdo8.setMaxValue(3)
        txsinkpdo8.addUpdateRegisterByName("self")

        EPRSinkPDO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 2',
                                                         'offset': 264,
                                                         'bit length': 296})
        self.dataModel.addChild(EPRSinkPDO2_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO2_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO2_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO2_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO2_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO2_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO2_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO2_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsinkpdo9 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo9.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO2_dm.addChild(txsinkpdo9)
        txsinkpdo9.reference_name = "Supply Type"
        txsinkpdo9.help = "EPR Second Sink Capabilities PDO received"
        txsinkpdo9.setMaxValue(3)
        txsinkpdo9.addUpdateRegisterByName("self")

        EPRSinkPDO3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 3',
                                                         'offset': 296,
                                                         'bit length': 328})
        self.dataModel.addChild(EPRSinkPDO3_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO3_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO3_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO3_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO3_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO3_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO3_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO3_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsinkpdo10 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo10.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO3_dm.addChild(txsinkpdo10)
        txsinkpdo10.reference_name = "Supply Type"
        txsinkpdo10.help = "EPR Third Sink Capabilities PDO received"
        txsinkpdo10.setMaxValue(3)
        txsinkpdo10.addUpdateRegisterByName("self")

        EPRSinkPDO4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 4',
                                                         'offset': 328,
                                                         'bit length': 360})
        self.dataModel.addChild(EPRSinkPDO4_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO4_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO4_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO4_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO4_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO4_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO4_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO4_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsinkpdo11 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo11.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO4_dm.addChild(txsinkpdo11)
        txsinkpdo11.reference_name = "Supply Type"
        txsinkpdo11.help = "EPR Fourth Sink Capabilities PDO received"
        txsinkpdo11.setMaxValue(3)
        txsinkpdo11.addUpdateRegisterByName("self")

        EPRSinkPDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 5',
                                                         'offset': 360,
                                                         'bit length': 392})
        self.dataModel.addChild(EPRSinkPDO5_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO5_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO5_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO5_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO5_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO5_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO5_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO5_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsinkpdo12 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo12.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO5_dm.addChild(txsinkpdo12)
        txsinkpdo12.reference_name = "Supply Type"
        txsinkpdo12.help = "EPR Fifth Sink Capabilities PDO received"
        txsinkpdo12.setMaxValue(3)
        txsinkpdo12.addUpdateRegisterByName("self")

        EPRSinkPDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink PDO 6',
                                                         'offset': 392,
                                                         'bit length': 424})
        self.dataModel.addChild(EPRSinkPDO6_dm)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO6_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Fixed"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        Voltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        Voltage.dictScaleUnits = {'V': 0.05}
        Voltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(Voltage)
        Voltage.reference_name = "Voltage-TX Sink Cap Fixed"
        Voltage.setMaxValue(1023)
        Voltage.setMinValue(0)

        PeakCurrent = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        PeakCurrent.setReportList(['100%', '130%', '150%', '200%'])
        EPRSinkPDO6_dm.addChild(PeakCurrent)
        PeakCurrent.reference_name = "Peak Current-TX Sink Cap Fixed"
        PeakCurrent.setMaxValue(3)

        OperatingPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Power',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingPower.dictScaleUnits = {'W': 0.25}
        OperatingPower.defaultUnit = 'W'
        EPRSinkPDO6_dm.addChild(OperatingPower)
        OperatingPower.reference_name = "Operating Power-TX Sink Cap Battery"
        OperatingPower.setMaxValue(1023)
        OperatingPower.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Battery"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Battery"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        OperatingCurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        OperatingCurrent.dictScaleUnits = {'A': 0.01}
        OperatingCurrent.defaultUnit = 'A'
        EPRSinkPDO6_dm.addChild(OperatingCurrent)
        OperatingCurrent.reference_name = "Operating Current-TX Sink Cap Variable"
        OperatingCurrent.setMaxValue(1023)
        OperatingCurrent.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        MinimumVoltage.dictScaleUnits = {'V': 0.05}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap Variable"
        MinimumVoltage.setMaxValue(1023)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        MaximumVoltage.dictScaleUnits = {'V': 0.05}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap Variable"
        MaximumVoltage.setMaxValue(1023)
        MaximumVoltage.setMinValue(0)

        PDP = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PDP',
                                                      'offset': 0,
                                                      'bit length': 8})
        PDP.dictScaleUnits = {'W': 1.0}
        PDP.defaultUnit = 'W'
        EPRSinkPDO6_dm.addChild(PDP)
        PDP.reference_name = "PDP-TX Sink Cap AVS"
        PDP.setMaxValue(255)
        PDP.setMinValue(0)

        MinimumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Minimum Voltage',
                                                      'offset': 8,
                                                      'bit length': 8})
        MinimumVoltage.dictScaleUnits = {'V': 0.1}
        MinimumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MinimumVoltage)
        MinimumVoltage.reference_name = "Minimum Voltage-TX Sink Cap AVS"
        MinimumVoltage.setMaxValue(255)
        MinimumVoltage.setMinValue(0)

        MaximumVoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Voltage',
                                                      'offset': 17,
                                                      'bit length': 9})
        MaximumVoltage.dictScaleUnits = {'V': 0.1}
        MaximumVoltage.defaultUnit = 'V'
        EPRSinkPDO6_dm.addChild(MaximumVoltage)
        MaximumVoltage.reference_name = "Maximum Voltage-TX Sink Cap AVS"
        MaximumVoltage.setMaxValue(511)
        MaximumVoltage.setMinValue(0)

        EPRAdjustableVoltageSupply = register_class.cListDMTerminator(self,
                {'name': 'EPR Adjustable Voltage Supply',
                    'offset': 28,
                    'bit length': 2})
        EPRAdjustableVoltageSupply.setReportList(['Reserved', 'EPR Adjustable Voltage Supply'])
        EPRSinkPDO6_dm.addChild(EPRAdjustableVoltageSupply)
        EPRAdjustableVoltageSupply.reference_name = "EPR Adjustable Voltage Supply-TX Sink Cap AVS"
        EPRAdjustableVoltageSupply.setMaxValue(1)

        txsinkpdo13 = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        txsinkpdo13.setReportList(['Fixed', 'Battery', 'Variable', 'Sink AVS'])
        EPRSinkPDO6_dm.addChild(txsinkpdo13)
        txsinkpdo13.reference_name = "Supply Type"
        txsinkpdo13.help = "EPR Sixth Sink Capabilities PDO received"
        txsinkpdo13.setMaxValue(3)
        txsinkpdo13.addUpdateRegisterByName("self")

        self.dataModel.parent = self
        self.dataModel.setDataModelGenerator(txsinkcaps_dm_generator)

        update_function = get_updater_function("txsinkcaps_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cactivecontractpdo_0x34_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Active PDO Contract',
                                           'address': 0x34,
                                           'byte length': 6,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Active PDO Contract',
                                                         'offset': 0,
                                                         'bit length': 48})

        ActiveContractPDO_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Active Contract PDO',
                                                         'offset': 0,
                                                         'bit length': 32})
        self.dataModel.addChild(ActiveContractPDO_dm)

        activepdo = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Maximum Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        activepdo.dictScaleUnits = {'A': 0.01}
        activepdo.defaultUnit = 'A'
        ActiveContractPDO_dm.addChild(activepdo)
        activepdo.reference_name = "Maximum Current"
        activepdo.help = "Power data object. This field contains the contents of the PDO Requested by PD Controller as Sink and Accepted by Source, once it is Accepted by Source."
        activepdo.setMaxValue(1023)
        activepdo.setMinValue(0)

        activepdo = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage',
                                                      'offset': 10,
                                                      'bit length': 10})
        activepdo.dictScaleUnits = {'V': 0.05}
        activepdo.defaultUnit = 'V'
        ActiveContractPDO_dm.addChild(activepdo)
        activepdo.reference_name = "Voltage"
        activepdo.help = "Power data object. This field contains the contents of the PDO Requested by PD Controller as Sink and Accepted by Source, once it is Accepted by Source."
        activepdo.setMaxValue(1023)
        activepdo.setMinValue(0)

        activepdo = register_class.cListDMTerminator(self,
                {'name': 'Peak Current',
                    'offset': 20,
                    'bit length': 2})
        activepdo.setReportList(['100%', '130%', '150%', '200%'])
        ActiveContractPDO_dm.addChild(activepdo)
        activepdo.reference_name = "Peak Current"
        activepdo.help = "Power data object. This field contains the contents of the PDO Requested by PD Controller as Sink and Accepted by Source, once it is Accepted by Source."
        activepdo.setMaxValue(3)

        activepdo = register_class.cListDMTerminator(self,
                {'name': 'Supply Type',
                    'offset': 30,
                    'bit length': 2})
        activepdo.setReportList(['Fixed', 'Battery', 'Variable', 'Source PPS'])
        
        activepdo.reference_name = "Supply Type"
        activepdo.help = "Power data object. This field contains the contents of the PDO Requested by PD Controller as Sink and Accepted by Source, once it is Accepted by Source."
        activepdo.setMaxValue(3)
        activepdoForceVal = register_class.cForceSetDMTerminator(self,
                                                     {'name': 'Supply Type',
                                                      'offset': 30,
                                                      'bit length': 2,
                                                      'force value': int(0),
                                                      'force display': 'Fixed',
                                                      'display widget' : activepdo})
        activepdoForceVal.reference_name = "Supply Type"
        ActiveContractPDO_dm.addChild(activepdoForceVal)

        FirstPDOControlBits_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'First PDO Control Bits',
                                                         'offset': 32,
                                                         'bit length': 42})
        self.dataModel.addChild(FirstPDOControlBits_dm)

        firstpdocontrolbits = register_class.cHexDMTerminator(self,
                {'name': 'First PDO Control Bits',
                'offset': 0,
                'bit length': 10})
        FirstPDOControlBits_dm.addChild(firstpdocontrolbits)
        firstpdocontrolbits.reference_name = "First PDO Control Bits"
        firstpdocontrolbits.help = "Contains bits 29:20 of the first PDO. It does not matter which PDO was selected, this field is always drawn from the first PDO."

        update_function = get_updater_function("activecontractpdo_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cactivecontractrdo_0x35_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Active RDO Contract',
                                           'address': 0x35,
                                           'byte length': 12,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Active RDO Contract',
                                                         'offset': 0,
                                                         'bit length': 96})
        maxminoperatingx = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Max Min Operation Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        maxminoperatingx.dictScaleUnits = {'A': 0.01}
        maxminoperatingx.defaultUnit = 'A'
        self.dataModel.addChild(maxminoperatingx)
        maxminoperatingx.reference_name = "Max Min Operation Current"
        maxminoperatingx.help = "As defined by USB PD."
        maxminoperatingx.setMaxValue(1000)
        maxminoperatingx.setMinValue(0)
        operatingx = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Operating Current',
                                                      'offset': 10,
                                                      'bit length': 10})
        operatingx.dictScaleUnits = {'A': 0.01}
        operatingx.defaultUnit = 'A'
        self.dataModel.addChild(operatingx)
        operatingx.reference_name = "Operating Current"
        operatingx.help = "As defined by USB PD."
        operatingx.setMaxValue(1000)
        operatingx.setMinValue(0)
        eprmodecapable = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode Capable',
                'offset': 22,
                'bit length': 1})
        self.dataModel.addChild(eprmodecapable)
        eprmodecapable.reference_name = "EPR Mode Capable"
        eprmodecapable.help = "As defined by USB PD."
        unchunkedsupported = register_class.cBooleanDMTerminator(self,
                {'name': 'Unchunked Supported',
                'offset': 23,
                'bit length': 1})
        self.dataModel.addChild(unchunkedsupported)
        unchunkedsupported.reference_name = "Unchunked Supported"
        unchunkedsupported.help = "As defined by USB PD."
        nousbsuspend = register_class.cBooleanDMTerminator(self,
                {'name': 'No USB Suspend',
                'offset': 24,
                'bit length': 1})
        self.dataModel.addChild(nousbsuspend)
        nousbsuspend.reference_name = "No USB Suspend"
        nousbsuspend.help = "As defined by USB PD."
        usbcommcapable = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Communication Capable',
                'offset': 25,
                'bit length': 1})
        self.dataModel.addChild(usbcommcapable)
        usbcommcapable.reference_name = "USB Communication Capable"
        usbcommcapable.help = "As defined by USB PD."
        capabilitymismatch = register_class.cBooleanDMTerminator(self,
                {'name': 'Capabality Missmatch',
                'offset': 26,
                'bit length': 1})
        self.dataModel.addChild(capabilitymismatch)
        capabilitymismatch.reference_name = "Capabality Missmatch"
        capabilitymismatch.help = "As defined by USB PD."
        givebackflag = register_class.cBooleanDMTerminator(self,
                {'name': 'Give Back Flag',
                'offset': 27,
                'bit length': 1})
        self.dataModel.addChild(givebackflag)
        givebackflag.reference_name = "Give Back Flag"
        givebackflag.help = "As defined by USB PD."
        objectposition = register_class.cHexDMTerminator(self,
                {'name': 'Object Position',
                'offset': 28,
                'bit length': 4})
        self.dataModel.addChild(objectposition)
        objectposition.reference_name = "Object Position"
        objectposition.help = "As defined by USB PD."
        sourceeprmodedo = register_class.cHexDMTerminator(self,
                {'name': 'Source EPR Mode DO',
                'offset': 32,
                'bit length': 32})
        self.dataModel.addChild(sourceeprmodedo)
        sourceeprmodedo.reference_name = "Source EPR Mode DO"
        sinkeprmodedo = register_class.cHexDMTerminator(self,
                {'name': 'Sink EPR Mode DO',
                'offset': 64,
                'bit length': 32})
        self.dataModel.addChild(sinkeprmodedo)
        sinkeprmodedo.reference_name = "Sink EPR Mode DO"

        update_function = get_updater_function("activecontractrdo_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cautonegotiatesink_0x37_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Autonegotiate Sink',
                                           'address': 0x37,
                                           'byte length': 24,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Autonegotiate Sink',
                                                         'offset': 0,
                                                         'bit length': 192})

        AutonegotiateControl_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Autonegotiate Control',
                                                         'offset': 0,
                                                         'bit length': 62})
        self.dataModel.addChild(AutonegotiateControl_dm)

        anrdopriority = register_class.cBooleanDMTerminator(self,
                {'name': 'Auto Neg RDO Priority',
                'offset': 0,
                'bit length': 1})
        AutonegotiateControl_dm.addChild(anrdopriority)
        anrdopriority.reference_name = "Auto Neg RDO Priority"
        anrdopriority.help = "Configuration for tie-breaker in PDO selection. The PD controller will find the set of PDOs that fulfill the voltage requirements. From that set of PDOs it will pick the one with higher power. If two acceptable PDOs have the same power, Fixed Supply Type is preferred, and then Variable Supply has second preference. If two PDOs have the same power and the same type, then this bit determines which PDO is selected."

        nousbsusp = register_class.cBooleanDMTerminator(self,
                {'name': 'No USB Suspend',
                'offset': 1,
                'bit length': 1})
        AutonegotiateControl_dm.addChild(nousbsusp)
        nousbsusp.reference_name = "No USB Suspend"
        nousbsusp.help = "Value used for the NoUSBSusp Flag in the RDO. This is as defined by USB PD."

        autocomputesinkminpower = register_class.cListDMTerminator(self,
                {'name': 'Auto Compute Sink Min Power',
                    'offset': 2,
                    'bit length': 1})
        autocomputesinkminpower.setReportList(['The host is required to write the ANSinkMinRequiredPower field of this register', 'The PD controller will compute the ANSinkMinRequiredPower field'])
        AutonegotiateControl_dm.addChild(autocomputesinkminpower)
        autocomputesinkminpower.reference_name = "Auto Compute Sink Min Power"
        autocomputesinkminpower.help = "Minimum power sink requires. The minimum sink power is the largest power reported in any valid PDO in the TX_SINK_CAPS (0x33). The power for a particular PDO from the TX_SINK_CAPS follows for each supply type: #ul##li#Battery Supply: OperatingPower#/li##li#Variable Supply: MaxVoltage*OperatingCurrent #/li##li#Fixed Supply: Voltage*OperatingCurrent.#/li# #/ul#However, if the TX_SINK_CAPS register includes Battery supply type PDO(s), then ANSinkMinRequiredPower = maximum OperatingPower in a Battery supply type PDO."
        autocomputesinkminpower.setMaxValue(1)

        nocapabilitymismatch = register_class.cListDMTerminator(self,
                {'name': 'No Capabality Mismatch',
                    'offset': 3,
                    'bit length': 1})
        nocapabilitymismatch.setReportList(['The capability mismatch bit will be asserted to indicate to the attached source that more power is desired', 'The capability mismatch bit will not be asserted'])
        AutonegotiateControl_dm.addChild(nocapabilitymismatch)
        nocapabilitymismatch.reference_name = "No Capabality Mismatch"
        nocapabilitymismatch.help = "Configuration for capability mismatch in RDO. There are two conditions that will trigger a capability mismatch: #ul##li#If the attached source does not offer a PDO whose power is greater or equal to the ANSinkCapMismatchPower field in this register.#/li##li#PPS is enabled in this register and the attached source did not offer a PPS PDO that matches the requirements in TX_SINK_CAPS.#/li##/ul#If either condition is true, then the PD controller will assert the capability mismatch bit in its request unless this bit is asserted."
        nocapabilitymismatch.setMaxValue(1)

        autocomputesinkminvoltage = register_class.cListDMTerminator(self,
                {'name': 'Auto Compute Sink Min Voltage',
                    'offset': 4,
                    'bit length': 1})
        autocomputesinkminvoltage.setReportList(['The PD controller will not automatically compute ANMinVoltage', 'The PD controller automatically sets ANMinVoltage field to 4.75V'])
        AutonegotiateControl_dm.addChild(autocomputesinkminvoltage)
        autocomputesinkminvoltage.reference_name = "Auto Compute Sink Min Voltage"
        autocomputesinkminvoltage.help = "Configuration for minimum voltage. The PD controller can automatically compute ANMinVoltage, or allow the host to specify it."
        autocomputesinkminvoltage.setMaxValue(1)

        autocomputesinkmaxvoltage = register_class.cListDMTerminator(self,
                {'name': 'Auto Compute Sink Max Voltage',
                    'offset': 5,
                    'bit length': 1})
        autocomputesinkmaxvoltage.setReportList(['The PD controller will not automatically compute ANMaxVoltage', 'The PD controller automatically sets ANMaxVoltage'])
        AutonegotiateControl_dm.addChild(autocomputesinkmaxvoltage)
        autocomputesinkmaxvoltage.reference_name = "Auto Compute Sink Max Voltage"
        autocomputesinkmaxvoltage.help = "Configuration for maximum voltage. The PD controller can automatically compute ANMaxVoltage, or allow the host to specify it."
        autocomputesinkmaxvoltage.setMaxValue(1)

        autodisablesinkuponcapmismatch = register_class.cBooleanDMTerminator(self,
                {'name': 'Auto Disable Sink Upon Capability Mismatch',
                'offset': 6,
                'bit length': 1})
        AutonegotiateControl_dm.addChild(autodisablesinkuponcapmismatch)
        autodisablesinkuponcapmismatch.reference_name = "Auto Disable Sink Upon Capability Mismatch"
        autodisablesinkuponcapmismatch.help = "Sink path and capability mismatch settings. If this bit is asserted, then any time the implicit or explicit power contract would cause the Capability Mismatch bit to be set the PD controller will disable the sinking path. The SRDY 4CC task can override and enable the sink path. However, if the contract changes after the the SRDY has completed, the PD controller will disable the sink path if the contract causes a capability mismatch. This bit should only be asserted if the NoCapabilityMismatch bit is set to 0."

        autodisableinputforsinkstandby = register_class.cBooleanDMTerminator(self,
                {'name': 'Auto Disable Input for Sink Standby',
                'offset': 7,
                'bit length': 1})
        AutonegotiateControl_dm.addChild(autodisableinputforsinkstandby)
        autodisableinputforsinkstandby.reference_name = "Auto Disable Input for Sink Standby"
        autodisableinputforsinkstandby.help = "Disable the sinking path during contract negotiation, and enable it back after receiving PS-RDY from SRC"

        autodisableinputforsinkstandbyindbm = register_class.cBooleanDMTerminator(self,
                {'name': 'Auto Disable Input for Sink Standby in DBM',
                'offset': 8,
                'bit length': 1})
        AutonegotiateControl_dm.addChild(autodisableinputforsinkstandbyindbm)
        autodisableinputforsinkstandbyindbm.reference_name = "Auto Disable Input for Sink Standby in DBM"
        autodisableinputforsinkstandbyindbm.help = "Disable the sinking path during contract negotiation, and enable it back after receiving PS-RDY from SRC when in DBM"

        ansinkcapmismatchpower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Auto Neg Capabilities Mismatch Power',
                                                      'offset': 52,
                                                      'bit length': 10})
        ansinkcapmismatchpower.dictScaleUnits = {'W': 0.25}
        ansinkcapmismatchpower.defaultUnit = 'W'
        AutonegotiateControl_dm.addChild(ansinkcapmismatchpower)
        ansinkcapmismatchpower.reference_name = "Auto Neg Capabilities Mismatch Power"
        ansinkcapmismatchpower.help = "Capabilities Mismatch Power Threshold. If the selected PDO offers less power than what is specified in this register, then the PD controller will assert the Capability Mismatch bit in its Request message unless NoCapabilityMismatch is set to 1. (250mW per LSB)"
        ansinkcapmismatchpower.setMaxValue(1023)
        ansinkcapmismatchpower.setMinValue(0)

        AutonegotiateMaxMinValues_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Autonegotiate Max/Min Values',
                                                         'offset': 12,
                                                         'bit length': 52})
        self.dataModel.addChild(AutonegotiateMaxMinValues_dm)

        anmaxcurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Auto Neg Max Current',
                                                      'offset': 0,
                                                      'bit length': 10})
        anmaxcurrent.dictScaleUnits = {'A': 0.01}
        anmaxcurrent.defaultUnit = 'A'
        AutonegotiateMaxMinValues_dm.addChild(anmaxcurrent)
        anmaxcurrent.reference_name = "Auto Neg Max Current"
        anmaxcurrent.help = "Maximum current to request. The PD controller will not request more current than indicated by this field. The host should ensure that the max current for all PDOs in the TX_SINK_CAPS register do not exceed this value. (10mA per LSB)."
        anmaxcurrent.setMaxValue(1000)
        anmaxcurrent.setMinValue(0)

        ansinkminrequiredpower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Auto Neg Sink Min Required Power',
                                                      'offset': 10,
                                                      'bit length': 10})
        ansinkminrequiredpower.dictScaleUnits = {'W': 0.25}
        ansinkminrequiredpower.defaultUnit = 'W'
        AutonegotiateMaxMinValues_dm.addChild(ansinkminrequiredpower)
        ansinkminrequiredpower.reference_name = "Auto Neg Sink Min Required Power"
        ansinkminrequiredpower.help = "Minimum operating power required by the Sink. The PD Controller will always attempt to receive this power level from the Source. (250mW per LSB) #p#See description in AutoComputeSinkMinPower field#/p#"
        ansinkminrequiredpower.setMaxValue(1023)
        ansinkminrequiredpower.setMinValue(0)

        anmaxvoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Auto Neg Max Voltage',
                                                      'offset': 20,
                                                      'bit length': 10})
        anmaxvoltage.dictScaleUnits = {'V': 0.05}
        anmaxvoltage.defaultUnit = 'V'
        AutonegotiateMaxMinValues_dm.addChild(anmaxvoltage)
        anmaxvoltage.reference_name = "Auto Neg Max Voltage"
        anmaxvoltage.help = "Maximum voltage to request. During PD power contract negotiation, the PD controller will only select voltages that are less than or equal to the value specified in this field. Not used unless AutoComputeSinkMinVoltage=0. (50mV per LSB)"
        anmaxvoltage.setMaxValue(1023)
        anmaxvoltage.setMinValue(0)

        anminvoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Auto Neg Min Voltage',
                                                      'offset': 30,
                                                      'bit length': 10})
        anminvoltage.dictScaleUnits = {'V': 0.05}
        anminvoltage.defaultUnit = 'V'
        AutonegotiateMaxMinValues_dm.addChild(anminvoltage)
        anminvoltage.reference_name = "Auto Neg Min Voltage"
        anminvoltage.help = "MInimum voltage to request. During PD power contract negotiation, the PD controller will only select voltages that are greater than or equal to the value specified in this field. Not used unless AutoComputeSinkMinVoltage=0. (50mV per LSB)"
        anminvoltage.setMaxValue(1023)
        anminvoltage.setMinValue(0)

        SinkPPSControls_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink PPS Controls',
                                                         'offset': 64,
                                                         'bit length': 116})
        self.dataModel.addChild(SinkPPSControls_dm)

        ppsenablesinkmode = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Enable Sink Mode',
                'offset': 0,
                'bit length': 1})
        SinkPPSControls_dm.addChild(ppsenablesinkmode)
        ppsenablesinkmode.reference_name = "PPS Enable Sink Mode"
        ppsenablesinkmode.help = "Enable Sink PPS mode. If this bit is asserted, then the PD controller will attempt to negotiate a PPS sink contract. PPS contracts are prioritized over any other supply type."

        ppsrequestinterval = register_class.cListDMTerminator(self,
                {'name': 'PPS Request Interval',
                    'offset': 1,
                    'bit length': 2})
        ppsrequestinterval.setReportList(['8 seconds', '4 seconds', '2 seconds', '1 second'])
        SinkPPSControls_dm.addChild(ppsrequestinterval)
        ppsrequestinterval.reference_name = "PPS Request Interval"
        ppsrequestinterval.help = "Sink PPS request interval. This field sets the frequency at which the PD controller will send a new request to the source even if the host has not made any change in the request."
        ppsrequestinterval.setMaxValue(3)

        ppssourceoperatingmode = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Source Operating Mode',
                'offset': 3,
                'bit length': 1})
        SinkPPSControls_dm.addChild(ppssourceoperatingmode)
        ppssourceoperatingmode.reference_name = "PPS Source Operating Mode"
        ppssourceoperatingmode.help = "Selection for CV or CC mode. If this bit is set to 1, then the PD controller assumes the system is in constant voltage mode and sets the VBUS disconnect threshold accordingly. If this bit is set to 0, then the PD controller will assume the system is in current limit mode and it will lower the VBUS disconnect threshold accordingly."

        ppsrequirefullvoltagerange = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Required Full Voltage Range',
                'offset': 4,
                'bit length': 1})
        SinkPPSControls_dm.addChild(ppsrequirefullvoltagerange)
        ppsrequirefullvoltagerange.reference_name = "PPS Required Full Voltage Range"
        ppsrequirefullvoltagerange.help = "Select only a source with full voltage range. If this bit is asserted, a PPS supply type is not selected unless the APDO.MinVoltage #le# TX_SINK_CAPS.MinPpsVoltage, APDO.MaxVoltage #ge# TX_SINK_CAPS.MaxPpsVoltage, and APDO.MaxCurrent #ge# TX_SINK_CAPS.MaxPpsCurrent. This bit has no effect unless PPSEnableSinkMode is asserted."

        ppsdisablesinkuponnonapdocontract = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Disable Sink Upon Non APDO Contract',
                'offset': 5,
                'bit length': 1})
        SinkPPSControls_dm.addChild(ppsdisablesinkuponnonapdocontract)
        ppsdisablesinkuponnonapdocontract.reference_name = "PPS Disable Sink Upon Non APDO Contract"
        ppsdisablesinkuponnonapdocontract.help = "Sink path handling during supply type transition. If this bit is asserted and the selected supply type is NOT a PPS APDO, then the sink path is disabled before sending the Request message.  The host should only assert this bit after a PPS contract has been negotiated. This bit has no effect unless PPSEnableSinkMode is asserted."

        ppsoperatingcurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PPS Operating Current',
                                                      'offset': 32,
                                                      'bit length': 7})
        ppsoperatingcurrent.dictScaleUnits = {'A': 0.05}
        ppsoperatingcurrent.defaultUnit = 'A'
        SinkPPSControls_dm.addChild(ppsoperatingcurrent)
        ppsoperatingcurrent.reference_name = "PPS Operating Current"
        ppsoperatingcurrent.help = "Operation current in Sink PPS mode. This is the desired operating current in 50 mA units. This is inserted as-is into the Request USB PD message."
        ppsoperatingcurrent.setMaxValue(127)
        ppsoperatingcurrent.setMinValue(0)

        ppsoutputvoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'PPS Output Voltage',
                                                      'offset': 41,
                                                      'bit length': 11})
        ppsoutputvoltage.dictScaleUnits = {'V': 0.02}
        ppsoutputvoltage.defaultUnit = 'V'
        SinkPPSControls_dm.addChild(ppsoutputvoltage)
        ppsoutputvoltage.reference_name = "PPS Output Voltage"
        ppsoutputvoltage.help = "This is the desired output voltage in 20mV units. This is inserted as-is into the Request USB PD message. Note that some PD controllers are unable to turn on the gate-drivers if VBUS less than 3.8V, check the VBUS UVLO value in the data-sheet."
        ppsoutputvoltage.setMaxValue(2047)
        ppsoutputvoltage.setMinValue(0)

        EPRSinkAVSControls_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Sink AVS Controls',
                                                         'offset': 128,
                                                         'bit length': 181})
        self.dataModel.addChild(EPRSinkAVSControls_dm)

        epravsenablesinkmode = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR AVS Enable Sink Mode',
                'offset': 0,
                'bit length': 1})
        EPRSinkAVSControls_dm.addChild(epravsenablesinkmode)
        epravsenablesinkmode.reference_name = "EPR AVS Enable Sink Mode"
        epravsenablesinkmode.help = "Enable Sink EPR AVS mode. If this bit is asserted, then the PD controller will attempt to negotiate a EPR AVS sink contract."

        epravsoperatingcurrent = register_class.cHexDMTerminator(self,
                {'name': 'EPR AVS Operating Current',
                'offset': 32,
                'bit length': 7})
        EPRSinkAVSControls_dm.addChild(epravsoperatingcurrent)
        epravsoperatingcurrent.reference_name = "EPR AVS Operating Current"
        epravsoperatingcurrent.help = "Operation current in Sink PPS mode. This is the desired operating current in 50 mA units. This is inserted as-is into the Request USB PD message."

        epravsoutputvoltage = register_class.cHexDMTerminator(self,
                {'name': 'EPR AVS Output Voltage',
                'offset': 41,
                'bit length': 12})
        EPRSinkAVSControls_dm.addChild(epravsoutputvoltage)
        epravsoutputvoltage.reference_name = "EPR AVS Output Voltage"
        epravsoutputvoltage.help = "This is the desired output voltage in 20mV units. This is inserted as-is into the Request USB PD message. Note that some PD controllers are unable to turn on the gate-drivers if VBUS less than 3.8V, check the VBUS UVLO value in the data-sheet."

        update_function = get_updater_function("autonegotiatesink_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class csrptospminfo_0x3d_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'SRP to SPM Information',
                                           'address': 0x3d,
                                           'byte length': 24,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'SRP to SPM Information',
                                                         'offset': 0,
                                                         'bit length': 192})

        SRPtoSPMInformation_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'SRP to SPM Information',
                                                         'offset': 0,
                                                         'bit length': 192})
        self.dataModel.addChild(SRPtoSPMInformation_dm)

        srcportusedtotalvbuspwr1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source Port Used Total VBUS Power1',
                                                      'offset': 0,
                                                      'bit length': 16})
        srcportusedtotalvbuspwr1.dictScaleUnits = {' W': 0.25}
        srcportusedtotalvbuspwr1.defaultUnit = ' W'
        SRPtoSPMInformation_dm.addChild(srcportusedtotalvbuspwr1)
        srcportusedtotalvbuspwr1.reference_name = "Source Port Used Total VBUS Power1"
        srcportusedtotalvbuspwr1.help = "Set and cleared by SourcePort.  Updated by Source port when a contract is entered per the negotiated power with port partner(250mW per LSB)."
        srcportusedtotalvbuspwr1.setMaxValue(65535)
        srcportusedtotalvbuspwr1.setMinValue(0)

        srcportreqtotalvbuspwr1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source Port Request Total VBUS Power1',
                                                      'offset': 16,
                                                      'bit length': 16})
        srcportreqtotalvbuspwr1.dictScaleUnits = {' W': 0.25}
        srcportreqtotalvbuspwr1.defaultUnit = ' W'
        SRPtoSPMInformation_dm.addChild(srcportreqtotalvbuspwr1)
        srcportreqtotalvbuspwr1.reference_name = "Source Port Request Total VBUS Power1"
        srcportreqtotalvbuspwr1.help = "Set and cleared by Sourceport.  Valid only when PowerMismatchValid bit = 1.  The field is the max power required by Sink and is udpated from the received SinkCap during mismatch(250mW per LSB)."
        srcportreqtotalvbuspwr1.setMaxValue(65535)
        srcportreqtotalvbuspwr1.setMinValue(0)

        powermismatchvalid1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Mismatch Valid',
                'offset': 32,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(powermismatchvalid1)
        powermismatchvalid1.reference_name = "Power Mismatch Valid"
        powermismatchvalid1.help = "Source port sets the value when CapMismatch is seen or VBUS power reduction has occurred without SPM control."

        bistsharedcapentrydorcvd1 = register_class.cBooleanDMTerminator(self,
                {'name': 'BIST Shared Cap DO Received1',
                'offset': 33,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(bistsharedcapentrydorcvd1)
        bistsharedcapentrydorcvd1.reference_name = "BIST Shared Cap DO Received1"
        bistsharedcapentrydorcvd1.help = "BISTSharedCapEntryDORcvd.  BIST Shared Capacity Test Mode Entry Data Object received.  Clear upon receiving Shared Capacity Exit Data Object.  SPM controller clears this field across all ports in SPM controller shared power group including its own.  Only the Exit DO received to the port in Shared Capacity Test Mode is processed.  Exit mode received on other ports not in Shared Capacity Test mode is ignored."

        isportdisabled1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Is Port Disabled1',
                'offset': 34,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(isportdisabled1)
        isportdisabled1.reference_name = "Is Port Disabled1"
        isportdisabled1.help = "Port Disabled if asserted."

        needfairpowershare1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Need Fair Power Share1',
                'offset': 35,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(needfairpowershare1)
        needfairpowershare1.reference_name = "Need Fair Power Share1"
        needfairpowershare1.help = "Need fair power share indicator."

        thermalstatus1 = register_class.cHexDMTerminator(self,
                {'name': 'Thermal Status1',
                'offset': 40,
                'bit length': 8})
        SRPtoSPMInformation_dm.addChild(thermalstatus1)
        thermalstatus1.reference_name = "Thermal Status1"
        thermalstatus1.help = "ADC Ch reading of NTC pin."

        srcportusedtotalvbuspwr2 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source Port Used Total VBUS Power2',
                                                      'offset': 48,
                                                      'bit length': 16})
        srcportusedtotalvbuspwr2.dictScaleUnits = {' W': 0.25}
        srcportusedtotalvbuspwr2.defaultUnit = ' W'
        SRPtoSPMInformation_dm.addChild(srcportusedtotalvbuspwr2)
        srcportusedtotalvbuspwr2.reference_name = "Source Port Used Total VBUS Power2"
        srcportusedtotalvbuspwr2.help = "Set and cleared by SourcePort.  Updated by Source port when a contract is entered per the negotiated power with port partner(250mW per LSB)."
        srcportusedtotalvbuspwr2.setMaxValue(65535)
        srcportusedtotalvbuspwr2.setMinValue(0)

        srcportreqtotalvbuspwr2 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source Port Request Total VBUS Power2',
                                                      'offset': 64,
                                                      'bit length': 16})
        srcportreqtotalvbuspwr2.dictScaleUnits = {' W': 0.25}
        srcportreqtotalvbuspwr2.defaultUnit = ' W'
        SRPtoSPMInformation_dm.addChild(srcportreqtotalvbuspwr2)
        srcportreqtotalvbuspwr2.reference_name = "Source Port Request Total VBUS Power2"
        srcportreqtotalvbuspwr2.help = "Set and cleared by Sourceport.  Valid only when PowerMismatchValid bit = 1.  The field is the max power required by Sink and is udpated from the received SinkCap during mismatch(250mW per LSB)."
        srcportreqtotalvbuspwr2.setMaxValue(65535)
        srcportreqtotalvbuspwr2.setMinValue(0)

        powermismatchvalid2 = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Mismatch Valid2',
                'offset': 80,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(powermismatchvalid2)
        powermismatchvalid2.reference_name = "Power Mismatch Valid2"
        powermismatchvalid2.help = "Source port sets the value when CapMismatch is seen or VBUS power reduction has occurred without SPM control."

        bistsharedcapentrydorcvd2 = register_class.cBooleanDMTerminator(self,
                {'name': 'BIST Shared Cap DO Received2',
                'offset': 81,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(bistsharedcapentrydorcvd2)
        bistsharedcapentrydorcvd2.reference_name = "BIST Shared Cap DO Received2"
        bistsharedcapentrydorcvd2.help = "BISTSharedCapEntryDORcvd.  BIST Shared Capacity Test Mode Entry Data Object received.  Clear upon receiving Shared Capacity Exit Data Object.  SPM controller clears this field across all ports in SPM controller shared power group including its own.  Only the Exit DO received to the port in Shared Capacity Test Mode is processed.  Exit mode received on other ports not in Shared Capacity Test mode is ignored."

        isportdisabled2 = register_class.cBooleanDMTerminator(self,
                {'name': 'Is Port Disabled2',
                'offset': 82,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(isportdisabled2)
        isportdisabled2.reference_name = "Is Port Disabled2"
        isportdisabled2.help = "Port Disabled if asserted."

        needfairpowershare2 = register_class.cBooleanDMTerminator(self,
                {'name': 'Need Fair Power Share2',
                'offset': 83,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(needfairpowershare2)
        needfairpowershare2.reference_name = "Need Fair Power Share2"
        needfairpowershare2.help = "Need fair power share indicator."

        thermalstatus2 = register_class.cHexDMTerminator(self,
                {'name': 'Thermal Status2',
                'offset': 88,
                'bit length': 8})
        SRPtoSPMInformation_dm.addChild(thermalstatus2)
        thermalstatus2.reference_name = "Thermal Status2"
        thermalstatus2.help = "ADC Ch reading of NTC pin."

        srcportusedtotalvbuspwr3 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source Port Used Total VBUS Power3',
                                                      'offset': 96,
                                                      'bit length': 16})
        srcportusedtotalvbuspwr3.dictScaleUnits = {' W': 0.25}
        srcportusedtotalvbuspwr3.defaultUnit = ' W'
        SRPtoSPMInformation_dm.addChild(srcportusedtotalvbuspwr3)
        srcportusedtotalvbuspwr3.reference_name = "Source Port Used Total VBUS Power3"
        srcportusedtotalvbuspwr3.help = "Set and cleared by SourcePort.  Updated by Source port when a contract is entered per the negotiated power with port partner(250mW per LSB)."
        srcportusedtotalvbuspwr3.setMaxValue(65535)
        srcportusedtotalvbuspwr3.setMinValue(0)

        srcportreqtotalvbuspwr3 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source Port Request Total VBUS Power3',
                                                      'offset': 112,
                                                      'bit length': 16})
        srcportreqtotalvbuspwr3.dictScaleUnits = {' W': 0.25}
        srcportreqtotalvbuspwr3.defaultUnit = ' W'
        SRPtoSPMInformation_dm.addChild(srcportreqtotalvbuspwr3)
        srcportreqtotalvbuspwr3.reference_name = "Source Port Request Total VBUS Power3"
        srcportreqtotalvbuspwr3.help = "Set and cleared by Sourceport.  Valid only when PowerMismatchValid bit = 1.  The field is the max power required by Sink and is udpated from the received SinkCap during mismatch(250mW per LSB)."
        srcportreqtotalvbuspwr3.setMaxValue(65535)
        srcportreqtotalvbuspwr3.setMinValue(0)

        powermismatchvalid3 = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Mismatch Valid3',
                'offset': 128,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(powermismatchvalid3)
        powermismatchvalid3.reference_name = "Power Mismatch Valid3"
        powermismatchvalid3.help = "Source port sets the value when CapMismatch is seen or VBUS power reduction has occurred without SPM control."

        bistsharedcapentrydorcvd3 = register_class.cBooleanDMTerminator(self,
                {'name': 'BIST Shared Cap DO Received3',
                'offset': 129,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(bistsharedcapentrydorcvd3)
        bistsharedcapentrydorcvd3.reference_name = "BIST Shared Cap DO Received3"
        bistsharedcapentrydorcvd3.help = "BISTSharedCapEntryDORcvd.  BIST Shared Capacity Test Mode Entry Data Object received.  Clear upon receiving Shared Capacity Exit Data Object.  SPM controller clears this field across all ports in SPM controller shared power group including its own.  Only the Exit DO received to the port in Shared Capacity Test Mode is processed.  Exit mode received on other ports not in Shared Capacity Test mode is ignored."

        isportdisabled3 = register_class.cBooleanDMTerminator(self,
                {'name': 'Is Port Disabled3',
                'offset': 130,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(isportdisabled3)
        isportdisabled3.reference_name = "Is Port Disabled3"
        isportdisabled3.help = "Port Disabled if asserted."

        needfairpowershare3 = register_class.cBooleanDMTerminator(self,
                {'name': 'Need Fair Power Share3',
                'offset': 131,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(needfairpowershare3)
        needfairpowershare3.reference_name = "Need Fair Power Share3"
        needfairpowershare3.help = "Need fair power share indicator."

        thermalstatus3 = register_class.cHexDMTerminator(self,
                {'name': 'Thermal Status3',
                'offset': 136,
                'bit length': 8})
        SRPtoSPMInformation_dm.addChild(thermalstatus3)
        thermalstatus3.reference_name = "Thermal Status3"
        thermalstatus3.help = "ADC Ch reading of NTC pin."

        srcportusedtotalvbuspwr4 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source Port Used Total VBUS Power4',
                                                      'offset': 144,
                                                      'bit length': 16})
        srcportusedtotalvbuspwr4.dictScaleUnits = {' W': 0.25}
        srcportusedtotalvbuspwr4.defaultUnit = ' W'
        SRPtoSPMInformation_dm.addChild(srcportusedtotalvbuspwr4)
        srcportusedtotalvbuspwr4.reference_name = "Source Port Used Total VBUS Power4"
        srcportusedtotalvbuspwr4.help = "Set and cleared by SourcePort.  Updated by Source port when a contract is entered per the negotiated power with port partner(250mW per LSB)."
        srcportusedtotalvbuspwr4.setMaxValue(65535)
        srcportusedtotalvbuspwr4.setMinValue(0)

        srcportreqtotalvbuspwr4 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source Port Request Total VBUS Power4',
                                                      'offset': 160,
                                                      'bit length': 16})
        srcportreqtotalvbuspwr4.dictScaleUnits = {' W': 0.25}
        srcportreqtotalvbuspwr4.defaultUnit = ' W'
        SRPtoSPMInformation_dm.addChild(srcportreqtotalvbuspwr4)
        srcportreqtotalvbuspwr4.reference_name = "Source Port Request Total VBUS Power4"
        srcportreqtotalvbuspwr4.help = "Set and cleared by Sourceport.  Valid only when PowerMismatchValid bit = 1.  The field is the max power required by Sink and is udpated from the received SinkCap during mismatch(250mW per LSB)."
        srcportreqtotalvbuspwr4.setMaxValue(65535)
        srcportreqtotalvbuspwr4.setMinValue(0)

        powermismatchvalid4 = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Mismatch Valid4',
                'offset': 176,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(powermismatchvalid4)
        powermismatchvalid4.reference_name = "Power Mismatch Valid4"
        powermismatchvalid4.help = "Source port sets the value when CapMismatch is seen or VBUS power reduction has occurred without SPM control."

        bistsharedcapentrydorcvd4 = register_class.cBooleanDMTerminator(self,
                {'name': 'BIST Shared Cap DO Received4',
                'offset': 177,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(bistsharedcapentrydorcvd4)
        bistsharedcapentrydorcvd4.reference_name = "BIST Shared Cap DO Received4"
        bistsharedcapentrydorcvd4.help = "BISTSharedCapEntryDORcvd.  BIST Shared Capacity Test Mode Entry Data Object received.  Clear upon receiving Shared Capacity Exit Data Object.  SPM controller clears this field across all ports in SPM controller shared power group including its own.  Only the Exit DO received to the port in Shared Capacity Test Mode is processed.  Exit mode received on other ports not in Shared Capacity Test mode is ignored."

        isportdisabled4 = register_class.cBooleanDMTerminator(self,
                {'name': 'Is Port Disabled4',
                'offset': 178,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(isportdisabled4)
        isportdisabled4.reference_name = "Is Port Disabled4"
        isportdisabled4.help = "Port Disabled if asserted."

        needfairpowershare4 = register_class.cBooleanDMTerminator(self,
                {'name': 'Need Fair Power Share4',
                'offset': 179,
                'bit length': 1})
        SRPtoSPMInformation_dm.addChild(needfairpowershare4)
        needfairpowershare4.reference_name = "Need Fair Power Share4"
        needfairpowershare4.help = "Need fair power share indicator."

        thermalstatus4 = register_class.cHexDMTerminator(self,
                {'name': 'Thermal Status4',
                'offset': 184,
                'bit length': 8})
        SRPtoSPMInformation_dm.addChild(thermalstatus4)
        thermalstatus4.reference_name = "Thermal Status4"
        thermalstatus4.help = "ADC Ch reading of NTC pin."

        update_function = get_updater_function("srptospminfo_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cpowerstatus_0x3f_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Power Status',
                                           'address': 0x3f,
                                           'byte length': 2,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Power Status',
                                                         'offset': 0,
                                                         'bit length': 16})
        powerconnection = register_class.cListDMTerminator(self,
                {'name': 'Power Connection',
                    'offset': 0,
                    'bit length': 1})
        powerconnection.setReportList(['No connection', 'Connection present'])
        self.dataModel.addChild(powerconnection)
        powerconnection.reference_name = "Power Connection"
        powerconnection.help = "Asserted if there is a connection. This bit is asserted when PlugPresent is TRUE and ConnState is greater than 5h. So it is redundant with information from register 0x1A. It is replicated in this register for convenience. In the future this redundant bit may be removed."
        powerconnection.setMaxValue(1)
        sourcesink = register_class.cListDMTerminator(self,
                {'name': 'SourceSink',
                    'offset': 1,
                    'bit length': 1})
        sourcesink.setReportList(['PD Controller as source', 'PD Controller as sink'])
        self.dataModel.addChild(sourcesink)
        sourcesink.reference_name = "SourceSink"
        sourcesink.help = "Source / Sink indicator. This bit is equivalent to PresentPDRole in register 0x40. It is replicated in this register for convenience. In the future, this redundant bit may be removed."
        sourcesink.setMaxValue(1)
        typeccurrent = register_class.cListDMTerminator(self,
                {'name': 'TypeC Current',
                    'offset': 2,
                    'bit length': 2})
        typeccurrent.setReportList(['USB Default Current', '1.5 A', '3.0 A', 'PD contract negotiated'])
        self.dataModel.addChild(typeccurrent)
        typeccurrent.reference_name = "TypeC Current"
        typeccurrent.help = "This field is redundant with PD_STATUS.CCPullUp in register 0x40 when SourceSink is 1b. This field is redundant with PORT_CONTROL.TypeCCurrent in register 0x29 when SourceSink is 0b. In the future, this redundant field may be removed.  This field is intended for Type-C Sink operation.  If the port is connected as source, the field is updated upon initial connection only."
        typeccurrent.setMaxValue(3)
        chargerdetectstatus = register_class.cListDMTerminator(self,
                {'name': 'Charger Detect Status',
                    'offset': 4,
                    'bit length': 4})
        chargerdetectstatus.setReportList(['Charger detection disabled or not run', 'Charger detection in progress', 'Charger detection complete none detected', 'Charger detection complete SDP detected', 'Charger detection complete BC 1.2 CDP detected', 'Charger detection complete BC 1.2 DCP detected', 'Charger detection complete Divider1 DCP detected', 'Charger detection complete Divider2 DCP detected', 'Charger detection complete Divider3 DCP detected', 'Charger detection complete 1.2V DCP detected'])
        self.dataModel.addChild(chargerdetectstatus)
        chargerdetectstatus.reference_name = "Charger Detect Status"
        chargerdetectstatus.setMaxValue(9)
        chargeradvertisestatus = register_class.cListDMTerminator(self,
                {'name': 'Charger Advertise Status',
                    'offset': 8,
                    'bit length': 2})
        chargeradvertisestatus.setReportList(['Charger advertise disabled or not run', 'Charger advertisement in process', 'Charger advertisement complete', 'Reserved'])
        self.dataModel.addChild(chargeradvertisestatus)
        chargeradvertisestatus.reference_name = "Charger Advertise Status"
        chargeradvertisestatus.help = "Charger Advertise Status"
        chargeradvertisestatus.setMaxValue(3)

        update_function = get_updater_function("powerstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cpdstatus_0x40_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'PD Status',
                                           'address': 0x40,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'PD Status',
                                                         'offset': 0,
                                                         'bit length': 32})
        ccpullup = register_class.cListDMTerminator(self,
                {'name': 'CC Pullup',
                    'offset': 2,
                    'bit length': 2})
        ccpullup.setReportList(['Not in CC pull-down mode / no CC pull-up detected', 'USB Default current', '1.5 A', '3.0 A'])
        self.dataModel.addChild(ccpullup)
        ccpullup.reference_name = "CC Pullup"
        ccpullup.help = "CC Pull-up value. The pull-up value detected by PD Controller when in CC Pull-down mode."
        ccpullup.setMaxValue(3)
        porttype = register_class.cListDMTerminator(self,
                {'name': 'Port Type',
                    'offset': 4,
                    'bit length': 2})
        porttype.setReportList(['Sink/Source', 'Sink', 'Source', 'Source/Sink'])
        self.dataModel.addChild(porttype)
        porttype.reference_name = "Port Type"
        porttype.help = "Present Type-C power role. The PD Controller is acting under this Type-C power role."
        porttype.setMaxValue(3)
        presentpdrole = register_class.cListDMTerminator(self,
                {'name': 'Present PD Role',
                    'offset': 6,
                    'bit length': 1})
        presentpdrole.setReportList(['Sink', 'Source'])
        self.dataModel.addChild(presentpdrole)
        presentpdrole.reference_name = "Present PD Role"
        presentpdrole.help = "Present PD power role. The PD Controller is acting under this PD power role."
        presentpdrole.setMaxValue(1)
        softresetdetails = register_class.cDictDMTerminator(self,
                                                     {'name': 'Soft Reset Details',
                                                      'offset': 8,
                                                      'bit length': 5})
        softresetdetails.setReportDict(OrderedDict([(0, 'Reset value no soft reset'), (1, 'Soft reset received from Port Partner'), (4, 'The received source capabilities message was invalid'), (5, 'Message retries were exhausted'), (6, 'Received an accept message unexpectedly'), (7, 'Received a control message unexpectedly'), (8, 'Received a GetSinkCap message unexpectedly'), (9, 'Received a GetSourceCap message unexpectedly'), (10, 'Received a GotoMin message unexpectedly'), (11, 'Received a PS_RDY message unexpectedly'), (12, 'Received a Ping message unexpectedly'), (13, 'Received a Reject message unexpectedly'), (14, 'Received a Request message unexpectedly'), (15, 'Received a Sink Capabilities message unexpectedly'), (16, 'Received a Source Capabilities message unexpectedly'), (17, 'Received a Swap message unexpectedly'), (18, 'Received a Wait Capabilities message unexpectedly'), (19, 'Received an unknown control message'), (20, 'Received an unknown data message'), (21, "To initialize SOP' controller in plug"), (22, "To initialize SOP'' controller in plug"), (23, 'Received an Extended message unexpectedly'), (24, 'Received an unknown Extended message'), (25, 'Received a data message unexpectedly'), (26, 'Received a Not Supported message unexpectedly'), (27, 'Received a Get_Status message unexpectedly')]))
        self.dataModel.addChild(softresetdetails)
        softresetdetails.reference_name = "Soft Reset Details"
        softresetdetails.help = "Reason for Soft Reset"
        softresetdetails.setMaxValue(27)
        hardresetdetails = register_class.cListDMTerminator(self,
                {'name': 'Hard Reset Details',
                    'offset': 16,
                    'bit length': 6})
        hardresetdetails.setReportList(['Reset value no hard reset', 'Required by the policy engine (signaling sent by far end)', 'Requested by host', 'Invalid DR_Swap request during Active Mode', 'Required by policy engine: DischargeFailed.', 'Required by policy engine: NoResponseTimeOut.', 'Required by policy engine: SendSoftReset.', 'Required by policy engine: Sink_SelectCapability.', 'Required by policy engine: Sink_TransitionSink.', 'Required by policy engine: Sink_WaitForCapabilities.', 'Required by policy engine: SoftReset.', 'Required by policy engine: SourceOnTimeout.', 'Required by policy engine: Source_CapabilityResponse.', 'Required by policy engine: Source_SendCapabilities.', 'Required by policy engine: SourcingFault.', 'Required by policy engine: UnableToSource.', 'Required by policy engine: FRS failure', 'Required by policy engine: Unexpected message', 'Required by policy engine: Failure to to complete the VCONN recovery sequence within 200ms after PP5V rising edge'])
        self.dataModel.addChild(hardresetdetails)
        hardresetdetails.reference_name = "Hard Reset Details"
        hardresetdetails.help = "Reason for Hard Reset"
        hardresetdetails.setMaxValue(18)
        errorrecoverydetails = register_class.cDictDMTerminator(self,
                                                     {'name': 'Error Recovery Details',
                                                      'offset': 22,
                                                      'bit length': 6})
        errorrecoverydetails.setReportDict(OrderedDict([(0, 'reset value: no error recovery'), (1, 'System: over-temperature shut-down'), (2, 'System: PP5V went low unexpectedly'), (3, 'System: fault input GPIO was asserted'), (4, 'System: Over-voltage detected on the Px_VBUS pin'), (5, 'Reserved'), (6, 'System: ILIM on PP_5V'), (7, 'System: ILIM on PP_CABLE'), (8, 'System: OVP on CC detected'), (9, 'Back to Normal System Power State'), (16, 'Protocol error: invalid DR_Swap'), (17, 'no Good_CRC during a PR_Swap sequence.'), (18, 'no Good_CRC during a FR_Swap sequence.'), (21, 'NoResponse timer timed out'), (22, 'PSSourceOffTimer timed out during PR_Swap'), (23, 'PSSourceOnTimer timed out during PR_Swap'), (24, 'PSSourceOnTimer timed out during FR_Swap'), (25, 'The Type-C source failed to change during FR_Swap'), (26, 'SenderResponseTimer timed out during FR_Swap'), (27, 'PSSourceOffTimer timed out during FR_Swap'), (28, 'Policy Engine: Error reaching the Attached'), (32, 'HI: PortConfig'), (33, 'HI: Error with DATA_CONTROL'), (34, 'HI: Swapping error during dead-battery'), (35, 'Host updated the GLOBAL_SYSTEM_CONFIG'), (36, "HI: Host issued the 4CC 'GAID' command"), (37, "HI: Host issued the 4CC 'Gaid' command"), (38, "HI: Host issued the 4CC 'DISC' command"), (39, "Host issued a reset using the 'UCSI'"), (48, 'Type-C: an error occurred in the Attached'), (49, 'Type-C: VCONN failed to discharge')]))
        self.dataModel.addChild(errorrecoverydetails)
        errorrecoverydetails.reference_name = "Error Recovery Details"
        errorrecoverydetails.help = "Reason for Error Recovery"
        errorrecoverydetails.setMaxValue(49)
        dataresetdetails = register_class.cListDMTerminator(self,
                {'name': 'Data Reset Details',
                    'offset': 28,
                    'bit length': 3})
        dataresetdetails.setReportList(['Reset value: no data reset', 'Data Reset message received from port partner', "Requested by host: 'DRST'", 'Requested by host: DATA_CONTROL', 'Exit USB4 following DR_Swap', 'Reserved1', 'Reserved2', 'Reserved3'])
        self.dataModel.addChild(dataresetdetails)
        dataresetdetails.reference_name = "Data Reset Details"
        dataresetdetails.help = "Reason for Data Reset."
        dataresetdetails.setMaxValue(7)

        update_function = get_updater_function("pdstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cpd3status_0x41_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'PD3 Status',
                                           'address': 0x41,
                                           'byte length': 8,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'PD3 Status',
                                                         'offset': 0,
                                                         'bit length': 64})

        PD3Status_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'PD3 Status',
                                                         'offset': 0,
                                                         'bit length': 1})
        self.dataModel.addChild(PD3Status_dm)

        fwuprsprcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Firmware Update Response Message Received',
                'offset': 0,
                'bit length': 1})
        PD3Status_dm.addChild(fwuprsprcvd)
        fwuprsprcvd.reference_name = "Firmware Update Response Message Received"
        fwuprsprcvd.help = "Firmware Update Response Message received"

        SecurityStatus_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Security Status',
                                                         'offset': 2,
                                                         'bit length': 23})
        self.dataModel.addChild(SecurityStatus_dm)

        secrsprcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Security Response Received',
                'offset': 0,
                'bit length': 1})
        SecurityStatus_dm.addChild(secrsprcvd)
        secrsprcvd.reference_name = "Security Response Received"
        secrsprcvd.help = "Security Response message received. This bit is asserted when a Security Response USB PD messages is received. The PD controller clears this bit when a MBRd 4CC command is issued or when another extended message is received."
        secrsprcvd.hide()

        secreqrcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Security Request Received',
                'offset': 2,
                'bit length': 1})
        SecurityStatus_dm.addChild(secreqrcvd)
        secreqrcvd.reference_name = "Security Request Received"
        secreqrcvd.help = "Security Request message received. This bit is asserted when a Security Request messages is received. The PD controller clears this bit when a MBRd 4CC command is issued or when another extended message is received."
        secreqrcvd.hide()

        fwupreqrcvd = register_class.cBooleanDMTerminator(self,
                {'name': 'Firmware Update Request Message received',
                'offset': 3,
                'bit length': 1})
        SecurityStatus_dm.addChild(fwupreqrcvd)
        fwupreqrcvd.reference_name = "Firmware Update Request Message received"
        fwupreqrcvd.help = "Firmware Update Request Message received"

        eprmodeon = register_class.cBooleanDMTerminator(self,
                {'name': 'EPR Mode On',
                'offset': 5,
                'bit length': 1})
        SecurityStatus_dm.addChild(eprmodeon)
        eprmodeon.reference_name = "EPR Mode On"

        secrspdropped = register_class.cBooleanDMTerminator(self,
                {'name': 'Security Response Dropped',
                'offset': 8,
                'bit length': 1})
        SecurityStatus_dm.addChild(secrspdropped)
        secrspdropped.reference_name = "Security Response Dropped"
        secrspdropped.help = "Security Response message dropped. #p#A Security_Response message was received while the receive buffer was locked. The host may need to resend the request.#/p##p#This bit is cleared when there is a rising edge on PD3_STATUS.SecRspRcvd.#/p#"
        secrspdropped.hide()

        fwuprspdropped = register_class.cBooleanDMTerminator(self,
                {'name': 'Firmware Update Response Message dropped',
                'offset': 9,
                'bit length': 1})
        SecurityStatus_dm.addChild(fwuprspdropped)
        fwuprspdropped.reference_name = "Firmware Update Response Message dropped"

        secreqdropped = register_class.cBooleanDMTerminator(self,
                {'name': 'Security Request Dropped',
                'offset': 10,
                'bit length': 1})
        SecurityStatus_dm.addChild(secreqdropped)
        secreqdropped.reference_name = "Security Request Dropped"
        secreqdropped.help = "Security Request message dropped. #p#A Security_Request message was received while the receive buffer was locked. The host may need to send an UNSPECIFIED error type message per the USB Authentication specification. The PD controller did not send any response to the received message that was dropped.#/p##p#This bit is cleared when there is a rising edge on PD3_STATUS.SecReqRcvd. #/p#"
        secreqdropped.hide()

        fwupreqdropped = register_class.cBooleanDMTerminator(self,
                {'name': 'Firmware Update Request Message dropped',
                'offset': 11,
                'bit length': 1})
        SecurityStatus_dm.addChild(fwupreqdropped)
        fwupreqdropped.reference_name = "Firmware Update Request Message dropped"
        fwupreqdropped.help = "Firmware Update Request Message dropped"

        portnegotiatedsvdmverminor = register_class.cListDMTerminator(self,
                {'name': 'Port Negotiated VDM Version Minor',
                    'offset': 17,
                    'bit length': 2})
        portnegotiatedsvdmverminor.setReportList(['Version 2.0', 'Version 2.1', 'Reserved1', 'Reserved2'])
        SecurityStatus_dm.addChild(portnegotiatedsvdmverminor)
        portnegotiatedsvdmverminor.reference_name = "Port Negotiated VDM Version Minor"
        portnegotiatedsvdmverminor.help = "SVDM specification minor version (SOP). As negotiated with Port Partner."
        portnegotiatedsvdmverminor.setMaxValue(3)

        plugnegotiatedsvdmverminor = register_class.cListDMTerminator(self,
                {'name': 'Plug Negotiated VDM Version Minor',
                    'offset': 19,
                    'bit length': 2})
        plugnegotiatedsvdmverminor.setReportList(['Version 2.0', 'Version 2.1', 'Reserved1', 'Reserved2'])
        SecurityStatus_dm.addChild(plugnegotiatedsvdmverminor)
        plugnegotiatedsvdmverminor.reference_name = "Plug Negotiated VDM Version Minor"
        plugnegotiatedsvdmverminor.help = "SVDM specification minor version (SOP). As negotiated with Cable Plug."
        plugnegotiatedsvdmverminor.setMaxValue(3)

        PD30Status_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'PD3.0 Status',
                                                         'offset': 23,
                                                         'bit length': 32})
        self.dataModel.addChild(PD30Status_dm)

        portnegotiatedsvdmver = register_class.cListDMTerminator(self,
                {'name': 'Port Negotiated VDM Version',
                    'offset': 0,
                    'bit length': 2})
        portnegotiatedsvdmver.setReportList(['Version 1', 'Version 2', 'Version 3', 'Reserved'])
        PD30Status_dm.addChild(portnegotiatedsvdmver)
        portnegotiatedsvdmver.reference_name = "Port Negotiated VDM Version"
        portnegotiatedsvdmver.help = "SVDM specification version (SOP). As negotiated with Port Partner."
        portnegotiatedsvdmver.setMaxValue(3)

        plugnegotiatedsvdmver = register_class.cListDMTerminator(self,
                {'name': 'Plug Negotiated VDM Version',
                    'offset': 2,
                    'bit length': 2})
        plugnegotiatedsvdmver.setReportList(['Version 1', 'Version 2', 'Version 3', 'Reserved'])
        PD30Status_dm.addChild(plugnegotiatedsvdmver)
        plugnegotiatedsvdmver.reference_name = "Plug Negotiated VDM Version"
        plugnegotiatedsvdmver.help = "SVDM specification version (SOP). As negotiated with Cable Plug."
        plugnegotiatedsvdmver.setMaxValue(3)

        portnegotiatedspecrev = register_class.cListDMTerminator(self,
                {'name': 'Port Negotiated Spec Revision',
                    'offset': 4,
                    'bit length': 2})
        portnegotiatedspecrev.setReportList(['Revision 1', 'Revision 2', 'Revision 3', 'Reserved'])
        PD30Status_dm.addChild(portnegotiatedspecrev)
        portnegotiatedspecrev.reference_name = "Port Negotiated Spec Revision"
        portnegotiatedspecrev.help = "USB PD specification revision (SOP). As negotiated with Port Partner."
        portnegotiatedspecrev.setMaxValue(3)

        plugnegotiatedspecrev = register_class.cListDMTerminator(self,
                {'name': 'Plug Negotiated Spec Revision',
                    'offset': 6,
                    'bit length': 2})
        plugnegotiatedspecrev.setReportList(['Revision 1', 'Revision 2', 'Revision 3', 'Reserved'])
        PD30Status_dm.addChild(plugnegotiatedspecrev)
        plugnegotiatedspecrev.reference_name = "Plug Negotiated Spec Revision"
        plugnegotiatedspecrev.help = "USB PD specification revision (SOP). As negotiated with Cable Plug."
        plugnegotiatedspecrev.setMaxValue(3)

        useunchunkedmessages = register_class.cBooleanDMTerminator(self,
                {'name': 'Use Unchunked Messages',
                'offset': 8,
                'bit length': 1})
        PD30Status_dm.addChild(useunchunkedmessages)
        useunchunkedmessages.reference_name = "Use Unchunked Messages"
        useunchunkedmessages.help = "Unchunking support (SOP). Indicates if Port Partner supports unchunked messages."

        PortPartnerRevision_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Port Partner Revision',
                                                         'offset': 32,
                                                         'bit length': 48})
        self.dataModel.addChild(PortPartnerRevision_dm)

        versionminor = register_class.cHexDMTerminator(self,
                {'name': 'Version Minor',
                'offset': 0,
                'bit length': 4})
        PortPartnerRevision_dm.addChild(versionminor)
        versionminor.reference_name = "Version Minor"
        versionminor.help = "Version Minor"

        versionmajor = register_class.cHexDMTerminator(self,
                {'name': 'Version Major',
                'offset': 4,
                'bit length': 4})
        PortPartnerRevision_dm.addChild(versionmajor)
        versionmajor.reference_name = "Version Major"
        versionmajor.help = "Version Major"

        revisionminor = register_class.cHexDMTerminator(self,
                {'name': 'Revision Minor',
                'offset': 8,
                'bit length': 4})
        PortPartnerRevision_dm.addChild(revisionminor)
        revisionminor.reference_name = "Revision Minor"
        revisionminor.help = "Revision Minor"

        revisionmajor = register_class.cHexDMTerminator(self,
                {'name': 'Revision Major',
                'offset': 12,
                'bit length': 4})
        PortPartnerRevision_dm.addChild(revisionmajor)
        revisionmajor.reference_name = "Revision Major"
        revisionmajor.help = "Revision Major"

        PlugPartnerRevision_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Plug Partner Revision',
                                                         'offset': 48,
                                                         'bit length': 64})
        self.dataModel.addChild(PlugPartnerRevision_dm)

        versionminor = register_class.cHexDMTerminator(self,
                {'name': 'Version Minor',
                'offset': 0,
                'bit length': 4})
        PlugPartnerRevision_dm.addChild(versionminor)
        versionminor.reference_name = "Version Minor"
        versionminor.help = "Version Minor"

        versionmajor = register_class.cHexDMTerminator(self,
                {'name': 'Version Major',
                'offset': 4,
                'bit length': 4})
        PlugPartnerRevision_dm.addChild(versionmajor)
        versionmajor.reference_name = "Version Major"
        versionmajor.help = "Version Major"

        revisionminor = register_class.cHexDMTerminator(self,
                {'name': 'Revision Minor',
                'offset': 8,
                'bit length': 4})
        PlugPartnerRevision_dm.addChild(revisionminor)
        revisionminor.reference_name = "Revision Minor"
        revisionminor.help = "Revision Minor"

        revisionmajor = register_class.cHexDMTerminator(self,
                {'name': 'Revision Major',
                'offset': 12,
                'bit length': 4})
        PlugPartnerRevision_dm.addChild(revisionmajor)
        revisionmajor.reference_name = "Revision Major"
        revisionmajor.help = "Revision Major"

        update_function = get_updater_function("pd3status_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cpd3config_0x42_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'PD3 Configuration',
                                           'address': 0x42,
                                           'byte length': 4,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'PD3 Configuration',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()
        portmaxspecrev = register_class.cDictDMTerminator(self,
                                                     {'name': 'Port Max Spec Revision',
                                                      'offset': 0,
                                                      'bit length': 2})
        portmaxspecrev.setReportDict(OrderedDict([(1, 'Revision 2 (USB PD 2.0)'), (2, 'Revision 3 (USB PD 3.0)')]))
        self.dataModel.addChild(portmaxspecrev)
        portmaxspecrev.reference_name = "Port Max Spec Revision"
        portmaxspecrev.help = "Port Partners highest USB PD spec revision."
        portmaxspecrev.setMaxValue(2)
        plugmaxspecrev = register_class.cDictDMTerminator(self,
                                                     {'name': 'Plug Max Spec Revision',
                                                      'offset': 2,
                                                      'bit length': 2})
        plugmaxspecrev.setReportDict(OrderedDict([(1, 'Revision 2 (USB PD 2.0)'), (2, 'Revision 3 (USB PD 3.0)')]))
        self.dataModel.addChild(plugmaxspecrev)
        plugmaxspecrev.reference_name = "Plug Max Spec Revision"
        plugmaxspecrev.help = "Cable Plugs highest USB PD spec revision."
        plugmaxspecrev.setMaxValue(2)
        unchunkedsupported = register_class.cBooleanDMTerminator(self,
                {'name': 'Unchunked Supported',
                'offset': 4,
                'bit length': 1})
        self.dataModel.addChild(unchunkedsupported)
        unchunkedsupported.reference_name = "Unchunked Supported"
        unchunkedsupported.help = "Enable unchunked support. If this bit is asserted the PD controller will support unchunked messaging (up to 260 bytes). The host is responsible to consume the unchunked message before the PD controller will be able to receive another long unchunked message."
        supportsoucecapextmsg = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Source Extended Message',
                'offset': 8,
                'bit length': 1})
        self.dataModel.addChild(supportsoucecapextmsg)
        supportsoucecapextmsg.reference_name = "Support Source Extended Message"
        supportsoucecapextmsg.help = "Enable Source Capabilities Extended. If this bit is asserted the PD controller will respond to a Get_Source_Capabilities_Extended USB PD message with the contents of the TX_SCEDB register (0x77)."
        supportstatusmsg = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Status Message',
                'offset': 9,
                'bit length': 1})
        self.dataModel.addChild(supportstatusmsg)
        supportstatusmsg.reference_name = "Support Status Message"
        supportstatusmsg.help = "Enable Status message. If this bit is asserted the PD controller will respond to a Get_Status USB PD message with the contents of the TX_SDB register (0x79)."
        supportbatterycapmsg = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Battery Capabilities Message',
                'offset': 10,
                'bit length': 1})
        self.dataModel.addChild(supportbatterycapmsg)
        supportbatterycapmsg.reference_name = "Support Battery Capabilities Message"
        supportbatterycapmsg.help = "Support Battery Capability message. If this bit is asserted the PD controller will respond to a Get_Battery_Capabilities USB PD message with the contents of the TX_BCDB register (0x7D)."
        supportbatterystatusmsg = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Battery Status Message',
                'offset': 11,
                'bit length': 1})
        self.dataModel.addChild(supportbatterystatusmsg)
        supportbatterystatusmsg.reference_name = "Support Battery Status Message"
        supportbatterystatusmsg.help = "Support Battery Status message. If this bit is asserted the PD controller will respond to a Get_Battery_Status USB PD message with the contents of the TX_BSDO register (0x7B)."
        supportmanufactureinfomsg = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Manufacture Info Message',
                'offset': 12,
                'bit length': 1})
        self.dataModel.addChild(supportmanufactureinfomsg)
        supportmanufactureinfomsg.reference_name = "Support Manufacture Info Message"
        supportmanufactureinfomsg.help = "Support Manufacturing Info message. If this bit is asserted the PD controller will respond to a Get_Manufacturer_Info USB PD message with the contents of the TX_MIDB_SOP register (0x73)."
        supportsecuritymsg = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Security Message',
                'offset': 13,
                'bit length': 1})
        self.dataModel.addChild(supportsecuritymsg)
        supportsecuritymsg.reference_name = "Support Security Message"
        supportsecuritymsg.help = "Support Security Request message. If this bit is asserted the PD controller will alert the host when a Security_Request USB PD message is received. The payload of the Security message is accessible using the MBrd Task. The host may use the SRrq and SRrs Tasks to respond."
        supportsecuritymsg.hide()
        supportfirmwareupgrademsg = register_class.cBooleanDMTerminator(self,
                {'name': 'Supported Firmware Upgrade Message',
                'offset': 14,
                'bit length': 1})
        self.dataModel.addChild(supportfirmwareupgrademsg)
        supportfirmwareupgrademsg.reference_name = "Supported Firmware Upgrade Message"
        supportfirmwareupgrademsg.help = "Enable firmware upgrade message"
        supportcountrycodeinfo = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Country Code Info',
                'offset': 16,
                'bit length': 1})
        self.dataModel.addChild(supportcountrycodeinfo)
        supportcountrycodeinfo.reference_name = "Support Country Code Info"
        supportcountrycodeinfo.help = "Support Country Code and information messages. If this bit is asserted the PD controller will use the data stored during application configuration to respond to a Get_Country_Code and Get_Country_Info message. See also BINARYDATA_INDICES register (0x62)."
        supportsinkcapextended = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Sink Cap Extended',
                'offset': 17,
                'bit length': 1})
        self.dataModel.addChild(supportsinkcapextended)
        supportsinkcapextended.reference_name = "Support Sink Cap Extended"
        supportsinkcapextended.help = "Support Sink Capabilities Extended message. If this bit is asserted the PD controller will respond to a Get_Sink_Capabilities_Extended message USB PD message with the contents of the TX_SKEDB register (0x7E)."
        supportsourceinfo = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Get Source Info',
                'offset': 18,
                'bit length': 1})
        self.dataModel.addChild(supportsourceinfo)
        supportsourceinfo.reference_name = "Support Get Source Info"
        supportsourceinfo.help = "Supports Get Source Info"
        supportrevision = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Get Revision',
                'offset': 19,
                'bit length': 1})
        self.dataModel.addChild(supportrevision)
        supportrevision.reference_name = "Support Get Revision"
        supportrevision.help = "Supports Get Revision"
        supportppsstatusmsg = register_class.cBooleanDMTerminator(self,
                {'name': 'Support PPS Status',
                'offset': 20,
                'bit length': 1})
        self.dataModel.addChild(supportppsstatusmsg)
        supportppsstatusmsg.reference_name = "Support PPS Status"
        supportvendordefinedextended = register_class.cBooleanDMTerminator(self,
                {'name': 'Support Vendor Defined Extended',
                'offset': 21,
                'bit length': 1})
        self.dataModel.addChild(supportvendordefinedextended)
        supportvendordefinedextended.reference_name = "Support Vendor Defined Extended"
        overridesvdmver2p1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Override SVDM Version 2.1',
                'offset': 24,
                'bit length': 1})
        self.dataModel.addChild(overridesvdmver2p1)
        overridesvdmver2p1.reference_name = "Override SVDM Version 2.1"
        overridesvdmver2p1.help = "PD Controller defaults to SVDM v2.1 unless this bit is set or PD v2 is used"

        update_function = get_updater_function("pd3config_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdelayconfig_0x43_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Delay Config',
                                           'address': 0x43,
                                           'byte length': 28,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Delay Config',
                                                         'offset': 0,
                                                         'bit length': 224})

        self.setAsShared()

        MuxDelay_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Mux Delay',
                                                         'offset': 0,
                                                         'bit length': 40})
        self.dataModel.addChild(MuxDelay_dm)

        muxdelaydfp = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Mux Delay DFP',
                                                      'offset': 0,
                                                      'bit length': 8})
        muxdelaydfp.dictScaleUnits = {'msec': 0.5}
        muxdelaydfp.defaultUnit = 'msec'
        MuxDelay_dm.addChild(muxdelaydfp)
        muxdelaydfp.reference_name = "Mux Delay DFP"
        muxdelaydfp.help = "Mux delay for DFP. Configurable delay from entering safe state to sending mode enter command (500 us per LSB)"
        muxdelaydfp.setMaxValue(255)
        muxdelaydfp.setMinValue(0)

        muxdelayufp = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Mux Delay UFP',
                                                      'offset': 8,
                                                      'bit length': 8})
        muxdelayufp.dictScaleUnits = {'msec': 0.5}
        muxdelayufp.defaultUnit = 'msec'
        MuxDelay_dm.addChild(muxdelayufp)
        muxdelayufp.reference_name = "Mux Delay UFP"
        muxdelayufp.help = "Mux delay for UFP. Configurable delay from entering mode to ACK response (500us per LSB)."
        muxdelayufp.setMaxValue(255)
        muxdelayufp.setMinValue(0)

        muxdelaydrs = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Mux Delay DRS',
                                                      'offset': 16,
                                                      'bit length': 8})
        muxdelaydrs.dictScaleUnits = {'msec': 0.5}
        muxdelaydrs.defaultUnit = 'msec'
        MuxDelay_dm.addChild(muxdelaydrs)
        muxdelaydrs.reference_name = "Mux Delay DRS"
        muxdelaydrs.help = "Mux delay for DR_Swap. Configurable delay after changing mux data role (500us per LSB)."
        muxdelaydrs.setMaxValue(255)
        muxdelaydrs.setMinValue(0)

        muxdelayufpconfig = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Mux Delay UFP Config',
                                                      'offset': 32,
                                                      'bit length': 8})
        muxdelayufpconfig.dictScaleUnits = {'msec': 0.5}
        muxdelayufpconfig.defaultUnit = 'msec'
        MuxDelay_dm.addChild(muxdelayufpconfig)
        muxdelayufpconfig.reference_name = "Mux Delay UFP Config"
        muxdelayufpconfig.help = "Mux delay for UFP configuration. Configurable delay from entering configuration to ACK response (500us per LSB)."
        muxdelayufpconfig.setMaxValue(255)
        muxdelayufpconfig.setMinValue(0)

        HPDDelay_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'HPD Delay',
                                                         'offset': 24,
                                                         'bit length': 32})
        self.dataModel.addChild(HPDDelay_dm)

        hpddelay = register_class.cScalingDMTerminator(self,
                                                     {'name': 'HPD Delay',
                                                      'offset': 0,
                                                      'bit length': 8})
        hpddelay.dictScaleUnits = {'msec': 0.5}
        hpddelay.defaultUnit = 'msec'
        HPDDelay_dm.addChild(hpddelay)
        hpddelay.reference_name = "HPD Delay"
        hpddelay.help = "Mux delay for HPD change. Configurable delay after changing HPD state (500us per LSB)."
        hpddelay.setMaxValue(255)
        hpddelay.setMinValue(0)

        ConnectionDelay_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Connection Delay',
                                                         'offset': 40,
                                                         'bit length': 48})
        self.dataModel.addChild(ConnectionDelay_dm)

        connectiondelay = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Connection Delay',
                                                      'offset': 0,
                                                      'bit length': 8})
        connectiondelay.dictScaleUnits = {'msec': 0.5}
        connectiondelay.defaultUnit = 'msec'
        ConnectionDelay_dm.addChild(connectiondelay)
        connectiondelay.reference_name = "Connection Delay"
        connectiondelay.help = "Connection delay. Configurable delay from initial connection configuration to start of PD negotiation (500us per LSB)."
        connectiondelay.setMaxValue(255)
        connectiondelay.setMinValue(0)

        RetimerDelay_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Retimer Delay',
                                                         'offset': 48,
                                                         'bit length': 64})
        self.dataModel.addChild(RetimerDelay_dm)

        retimerforcepwrdelayrise = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Retimer Force PWR Delay Rise',
                                                      'offset': 0,
                                                      'bit length': 8})
        retimerforcepwrdelayrise.dictScaleUnits = {'msec': 0.25}
        retimerforcepwrdelayrise.defaultUnit = 'msec'
        RetimerDelay_dm.addChild(retimerforcepwrdelayrise)
        retimerforcepwrdelayrise.reference_name = "Retimer Force PWR Delay Rise"
        retimerforcepwrdelayrise.help = "Retimer force power delay (rising). Configurable delay between Retimer_Force_PWR_Event GPIO rising and Retimer_Reset_N GPIO rising (250us per LSB)."
        retimerforcepwrdelayrise.setMaxValue(255)
        retimerforcepwrdelayrise.setMinValue(0)

        retimerforcepwrdelayfall = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Retimer Force PWR Delay Fall',
                                                      'offset': 8,
                                                      'bit length': 8})
        retimerforcepwrdelayfall.dictScaleUnits = {'msec': 10.0}
        retimerforcepwrdelayfall.defaultUnit = 'msec'
        RetimerDelay_dm.addChild(retimerforcepwrdelayfall)
        retimerforcepwrdelayfall.reference_name = "Retimer Force PWR Delay Fall"
        retimerforcepwrdelayfall.help = "Retimer force power delay (falling). Configurable delay between Retimer_Reset_N GPIO falling and Retimer_Force_PWR_Event GPIO falling. If this field is set to 0x00, then the falling time will be the same as RetimerForcePwrDelayRise. (10ms per LSB)"
        retimerforcepwrdelayfall.setMaxValue(255)
        retimerforcepwrdelayfall.setMinValue(0)

        DelaysforMRESETandRESETZ_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Delays for MRESET and RESETZ',
                                                         'offset': 64,
                                                         'bit length': 76})
        self.dataModel.addChild(DelaysforMRESETandRESETZ_dm)

        mresetdelayrise = register_class.cScalingDMTerminator(self,
                                                     {'name': 'MReset Delay Raise',
                                                      'offset': 0,
                                                      'bit length': 4})
        mresetdelayrise.dictScaleUnits = {'msec': 50.0}
        mresetdelayrise.defaultUnit = 'msec'
        DelaysforMRESETandRESETZ_dm.addChild(mresetdelayrise)
        mresetdelayrise.reference_name = "MReset Delay Raise"
        mresetdelayrise.help = "Delay for MRESET (rising). Configurable delay for the MRESET and RESETZ GPIO Events (50ms per LSB)."
        mresetdelayrise.setMaxValue(15)
        mresetdelayrise.setMinValue(0)

        mresetdelayfall = register_class.cScalingDMTerminator(self,
                                                     {'name': 'MReset Delay Fall',
                                                      'offset': 4,
                                                      'bit length': 4})
        mresetdelayfall.dictScaleUnits = {'msec': 50.0}
        mresetdelayfall.defaultUnit = 'msec'
        DelaysforMRESETandRESETZ_dm.addChild(mresetdelayfall)
        mresetdelayfall.reference_name = "MReset Delay Fall"
        mresetdelayfall.help = "Delay for MRESET (falling). Configurable delay for the MRESET and RESETZ GPIO Events (50ms per LSB)."
        mresetdelayfall.setMaxValue(15)
        mresetdelayfall.setMinValue(0)

        resetzbootdelay = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Resetz Boot Delay',
                                                      'offset': 8,
                                                      'bit length': 4})
        resetzbootdelay.dictScaleUnits = {'msec': 50.0}
        resetzbootdelay.defaultUnit = 'msec'
        DelaysforMRESETandRESETZ_dm.addChild(resetzbootdelay)
        resetzbootdelay.reference_name = "Resetz Boot Delay"
        resetzbootdelay.help = "RESETZ boot delay. The RESETZ GPIO Event will be asserted for this long when the PD controller enters into APP  mode (50ms per LSB)."
        resetzbootdelay.setMaxValue(15)
        resetzbootdelay.setMinValue(0)

        TimerDelay_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Timer Delay',
                                                         'offset': 80,
                                                         'bit length': 176})
        self.dataModel.addChild(TimerDelay_dm)

        tdisconnectdelay = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Disconnect Delay',
                                                      'offset': 0,
                                                      'bit length': 8})
        tdisconnectdelay.dictScaleUnits = {'sec': 0.01}
        tdisconnectdelay.defaultUnit = 'sec'
        TimerDelay_dm.addChild(tdisconnectdelay)
        tdisconnectdelay.reference_name = "Disconnect Delay"
        tdisconnectdelay.help = "Disconnect delay. After a disconnect event, the PD controller will delay for the amount of time specified in this register before asserting Retimer_Reset_N_Event_Portx to reset the retimer. (10ms per LSB)"
        tdisconnectdelay.setMaxValue(255)
        tdisconnectdelay.setMinValue(0)

        tdatastatusnotificationdelay = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Data Status Notification Delay',
                                                      'offset': 8,
                                                      'bit length': 8})
        tdatastatusnotificationdelay.dictScaleUnits = {'usec': 500.0}
        tdatastatusnotificationdelay.defaultUnit = 'usec'
        TimerDelay_dm.addChild(tdatastatusnotificationdelay)
        tdatastatusnotificationdelay.reference_name = "Data Status Notification Delay"
        tdatastatusnotificationdelay.help = "The PD controller will ensure that INT_EVENTx.DataStatusUpdate will not get asserted again unless a minimum time has elapsed since the last time it was asserted.  This register specifies that minimum time (500us per LSB)."
        tdatastatusnotificationdelay.setMaxValue(255)
        tdatastatusnotificationdelay.setMinValue(0)

        tvdmattentionspacing = register_class.cScalingDMTerminator(self,
                                                     {'name': 'tVDM Attention Spacing',
                                                      'offset': 16,
                                                      'bit length': 8})
        tvdmattentionspacing.dictScaleUnits = {' S': 0.001}
        tvdmattentionspacing.defaultUnit = ' S'
        TimerDelay_dm.addChild(tvdmattentionspacing)
        tvdmattentionspacing.reference_name = "tVDM Attention Spacing"
        tvdmattentionspacing.help = "Specifies the minimum delay between Attention Messages. When set to 0, no minimum delay between Attention Messages and the feature is disabled (1ms per LSB)."
        tvdmattentionspacing.setMaxValue(255)
        tvdmattentionspacing.setMinValue(0)

        tcrossbarcomplete = register_class.cScalingDMTerminator(self,
                                                     {'name': 'tCrossbar Complete',
                                                      'offset': 80,
                                                      'bit length': 8})
        tcrossbarcomplete.dictScaleUnits = {' S': 0.01}
        tcrossbarcomplete.defaultUnit = ' S'
        TimerDelay_dm.addChild(tcrossbarcomplete)
        tcrossbarcomplete.reference_name = "tCrossbar Complete"
        tcrossbarcomplete.help = "Completion delay. Sets how long the delay will be between consecutive checks for command completion after writing to the crossbar mux. Writing a value of 0 or 1 both give a delay of 10ms. (10ms per LSB)"
        tcrossbarcomplete.setMaxValue(255)
        tcrossbarcomplete.setMinValue(0)

        thpddelay = register_class.cScalingDMTerminator(self,
                                                     {'name': 'tHPD Delay',
                                                      'offset': 88,
                                                      'bit length': 8})
        thpddelay.dictScaleUnits = {' S': 0.1}
        thpddelay.defaultUnit = ' S'
        TimerDelay_dm.addChild(thpddelay)
        thpddelay.reference_name = "tHPD Delay"
        thpddelay.help = "HPD delay. Configures the delay between receiving DP Config ACK from the UFP_U/DP Sink and asserting HPD GPIO as the DFP_U/DP Source. Writing a value of 0 or 1 both give a delay of 100ms. (100ms per LSB)"
        thpddelay.setMaxValue(255)
        thpddelay.setMinValue(0)

        update_function = get_updater_function("delayconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

def txidentity_dm_generator(self):





    UFPDiscoverIdentityResponseProductTypeVDO0USBHighestSpeedUFP1VDO = register_class.cListDMTerminator(self.parent,
            {'name': 'USB Highest Speed',
                'offset': 0,
                'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO0USBHighestSpeedUFP1VDO.setReportList(['USB2', 'USB3.2Gen1', 'USB3.2Gen2', 'USB4Gen3', 'USB4Gen4'])
    
    UFPDiscoverIdentityResponseProductTypeVDO0USBHighestSpeedUFP1VDO.reference_name = "USB Highest Speed-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0USBHighestSpeedUFP1VDO.setMaxValue(4)
    UFPDiscoverIdentityResponseProductTypeVDO0AlternateModeUFP1VDO = register_class.cMultiBooleanDMTerminator(self.parent,
                                                        {'name': 'Alternate Mode',
                                                         'offset': 3,
                                                         'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO0AlternateModeUFP1VDO.setFlagNameList(['Supports', 'Supports that reconfigures signal', 'Supports that do not reconfigure signal', 'A', 'B', 'C'])
    UFPDiscoverIdentityResponseProductTypeVDO0AlternateModeUFP1VDO.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
    UFPDiscoverIdentityResponseProductTypeVDO0AlternateModeUFP1VDO.setSpacing(6)
    
    UFPDiscoverIdentityResponseProductTypeVDO0AlternateModeUFP1VDO.reference_name = "Alternate Mode-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0VBUSRequiredUFP1VDO = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'VBUS Required',
            'offset': 6,
            'bit length': 1})
    
    UFPDiscoverIdentityResponseProductTypeVDO0VBUSRequiredUFP1VDO.reference_name = "VBUS Required-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0VCONNRequiredUFP1VDO = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'VCONN Required',
            'offset': 7,
            'bit length': 1})
    
    UFPDiscoverIdentityResponseProductTypeVDO0VCONNRequiredUFP1VDO.reference_name = "VCONN Required-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0VCONNPowerUFP1VDO = register_class.cListDMTerminator(self.parent,
            {'name': 'VCONN Power',
                'offset': 8,
                'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO0VCONNPowerUFP1VDO.setReportList(['1W', '1.5W', '2W', '3W', '4W', '5W', '6W'])
    
    UFPDiscoverIdentityResponseProductTypeVDO0VCONNPowerUFP1VDO.reference_name = "VCONN Power-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0VCONNPowerUFP1VDO.setMaxValue(6)
    UFPDiscoverIdentityResponseProductTypeVDO0UFPConnectorTypeLegacyUFP1VDO = register_class.cListDMTerminator(self.parent,
            {'name': 'UFP Connector Type (Legacy)',
                'offset': 22,
                'bit length': 2})
    UFPDiscoverIdentityResponseProductTypeVDO0UFPConnectorTypeLegacyUFP1VDO.setReportList(['Reserved'])
    
    UFPDiscoverIdentityResponseProductTypeVDO0UFPConnectorTypeLegacyUFP1VDO.reference_name = "UFP Connector Type (Legacy)-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0UFPConnectorTypeLegacyUFP1VDO.setMaxValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO0DeviceCapabilityUFP1VDO = register_class.cMultiBooleanDMTerminator(self.parent,
                                                        {'name': 'Device Capability',
                                                         'offset': 24,
                                                         'bit length': 4})
    UFPDiscoverIdentityResponseProductTypeVDO0DeviceCapabilityUFP1VDO.setFlagNameList(['USB2', 'USB2 BillBoard Only', 'USB3.2', 'USB4', 'A', 'B'])
    UFPDiscoverIdentityResponseProductTypeVDO0DeviceCapabilityUFP1VDO.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
    UFPDiscoverIdentityResponseProductTypeVDO0DeviceCapabilityUFP1VDO.setSpacing(6)
    
    UFPDiscoverIdentityResponseProductTypeVDO0DeviceCapabilityUFP1VDO.reference_name = "Device Capability-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0UFPVDOVersionUFP1VDO = register_class.cDictDMTerminator(self.parent,
                                                 {'name': 'UFP VDO Version',
                                                  'offset': 29,
                                                  'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO0UFPVDOVersionUFP1VDO.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'Reserved1'), (3, 'Version 1.3')]))
    
    UFPDiscoverIdentityResponseProductTypeVDO0UFPVDOVersionUFP1VDO.reference_name = "UFP VDO Version-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0UFPVDOVersionUFP1VDO.setMaxValue(3)
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MaxPowerUFP2VDO = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'USB3 Max Power',
                                                  'offset': 0,
                                                  'bit length': 7})
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MaxPowerUFP2VDO.dictScaleUnits = {'W': 1.0}
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MaxPowerUFP2VDO.defaultUnit = 'W'
    
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MaxPowerUFP2VDO.reference_name = "USB3 Max Power-UFP2 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MaxPowerUFP2VDO.hide()
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MaxPowerUFP2VDO.setMaxValue(127)
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MaxPowerUFP2VDO.setMinValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MinPowerUFP2VDO = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'USB3 Min Power',
                                                  'offset': 7,
                                                  'bit length': 7})
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MinPowerUFP2VDO.dictScaleUnits = {'W': 1.0}
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MinPowerUFP2VDO.defaultUnit = 'W'
    
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MinPowerUFP2VDO.reference_name = "USB3 Min Power-UFP2 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MinPowerUFP2VDO.hide()
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MinPowerUFP2VDO.setMaxValue(127)
    UFPDiscoverIdentityResponseProductTypeVDO0USB3MinPowerUFP2VDO.setMinValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MaxPowerUFP2VDO = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'USB4 Max Power',
                                                  'offset': 16,
                                                  'bit length': 7})
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MaxPowerUFP2VDO.dictScaleUnits = {'W': 1.0}
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MaxPowerUFP2VDO.defaultUnit = 'W'
    
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MaxPowerUFP2VDO.reference_name = "USB4 Max Power-UFP2 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MaxPowerUFP2VDO.hide()
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MaxPowerUFP2VDO.setMaxValue(127)
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MaxPowerUFP2VDO.setMinValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MinPowerUFP2VDO = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'USB4 Min Power',
                                                  'offset': 23,
                                                  'bit length': 7})
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MinPowerUFP2VDO.dictScaleUnits = {'W': 1.0}
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MinPowerUFP2VDO.defaultUnit = 'W'
    
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MinPowerUFP2VDO.reference_name = "USB4 Min Power-UFP2 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MinPowerUFP2VDO.hide()
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MinPowerUFP2VDO.setMaxValue(127)
    UFPDiscoverIdentityResponseProductTypeVDO0USB4MinPowerUFP2VDO.setMinValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO0PortNumberDFP1VDO = register_class.cHexDMTerminator(self.parent,
            {'name': 'Port Number',
            'offset': 0,
            'bit length': 5})
    
    UFPDiscoverIdentityResponseProductTypeVDO0PortNumberDFP1VDO.reference_name = "Port Number-DFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0DFPConnectorTypeLegacyDFP1VDO = register_class.cListDMTerminator(self.parent,
            {'name': 'DFP Connector Type (Legacy)',
                'offset': 22,
                'bit length': 2})
    UFPDiscoverIdentityResponseProductTypeVDO0DFPConnectorTypeLegacyDFP1VDO.setReportList(['Reserved'])
    
    UFPDiscoverIdentityResponseProductTypeVDO0DFPConnectorTypeLegacyDFP1VDO.reference_name = "DFP Connector Type (Legacy)-DFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0DFPConnectorTypeLegacyDFP1VDO.setMaxValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO0HostCapabilityDFP1VDO = register_class.cMultiBooleanDMTerminator(self.parent,
                                                        {'name': 'Host Capability',
                                                         'offset': 24,
                                                         'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO0HostCapabilityDFP1VDO.setFlagNameList(['USB2', 'USB3.2', 'USB4', 'A', 'B', 'C'])
    UFPDiscoverIdentityResponseProductTypeVDO0HostCapabilityDFP1VDO.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
    UFPDiscoverIdentityResponseProductTypeVDO0HostCapabilityDFP1VDO.setSpacing(6)
    
    UFPDiscoverIdentityResponseProductTypeVDO0HostCapabilityDFP1VDO.reference_name = "Host Capability-DFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0DFPVDOVersionDFP1VDO = register_class.cDictDMTerminator(self.parent,
                                                 {'name': 'DFP VDO Version',
                                                  'offset': 29,
                                                  'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO0DFPVDOVersionDFP1VDO.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'Version 1.2'), (3, 'Reserved1')]))
    
    UFPDiscoverIdentityResponseProductTypeVDO0DFPVDOVersionDFP1VDO.reference_name = "DFP VDO Version-DFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO0DFPVDOVersionDFP1VDO.setMaxValue(3)
    UFPDiscoverIdentityResponseProductTypeVDO0NonSpecDataNONSPECVDO1 = register_class.cHexDMTerminator(self.parent,
            {'name': 'Non-Spec Data',
            'offset': 0,
            'bit length': 31})
    
    UFPDiscoverIdentityResponseProductTypeVDO0NonSpecDataNONSPECVDO1.reference_name = "Non-Spec Data-NONSPEC VDO1"

    UFPDiscoverIdentityResponseProductTypeVDO2USBHighestSpeedUFP1VDO = register_class.cListDMTerminator(self.parent,
            {'name': 'USB Highest Speed',
                'offset': 0,
                'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO2USBHighestSpeedUFP1VDO.setReportList(['USB2', 'USB3.2Gen1', 'USB3.2Gen2', 'USB4Gen3', 'USB4Gen4'])
    
    UFPDiscoverIdentityResponseProductTypeVDO2USBHighestSpeedUFP1VDO.reference_name = "USB Highest Speed-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2USBHighestSpeedUFP1VDO.setMaxValue(4)
    UFPDiscoverIdentityResponseProductTypeVDO2AlternateModeUFP1VDO = register_class.cMultiBooleanDMTerminator(self.parent,
                                                        {'name': 'Alternate Mode',
                                                         'offset': 3,
                                                         'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO2AlternateModeUFP1VDO.setFlagNameList(['Supports', 'Supports that reconfigures signal', 'Supports that do not reconfigure signal', 'A', 'B', 'C'])
    UFPDiscoverIdentityResponseProductTypeVDO2AlternateModeUFP1VDO.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
    UFPDiscoverIdentityResponseProductTypeVDO2AlternateModeUFP1VDO.setSpacing(6)
    
    UFPDiscoverIdentityResponseProductTypeVDO2AlternateModeUFP1VDO.reference_name = "Alternate Mode-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2VBUSRequiredUFP1VDO = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'VBUS Required',
            'offset': 6,
            'bit length': 1})
    
    UFPDiscoverIdentityResponseProductTypeVDO2VBUSRequiredUFP1VDO.reference_name = "VBUS Required-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2VCONNRequiredUFP1VDO = register_class.cBooleanDMTerminator(self.parent,
            {'name': 'VCONN Required',
            'offset': 7,
            'bit length': 1})
    
    UFPDiscoverIdentityResponseProductTypeVDO2VCONNRequiredUFP1VDO.reference_name = "VCONN Required-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2VCONNPowerUFP1VDO = register_class.cListDMTerminator(self.parent,
            {'name': 'VCONN Power',
                'offset': 8,
                'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO2VCONNPowerUFP1VDO.setReportList(['1W', '1.5W', '2W', '3W', '4W', '5W', '6W'])
    
    UFPDiscoverIdentityResponseProductTypeVDO2VCONNPowerUFP1VDO.reference_name = "VCONN Power-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2VCONNPowerUFP1VDO.setMaxValue(6)
    UFPDiscoverIdentityResponseProductTypeVDO2UFPConnectorTypeLegacyUFP1VDO = register_class.cListDMTerminator(self.parent,
            {'name': 'UFP Connector Type (Legacy)',
                'offset': 22,
                'bit length': 2})
    UFPDiscoverIdentityResponseProductTypeVDO2UFPConnectorTypeLegacyUFP1VDO.setReportList(['Reserved'])
    
    UFPDiscoverIdentityResponseProductTypeVDO2UFPConnectorTypeLegacyUFP1VDO.reference_name = "UFP Connector Type (Legacy)-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2UFPConnectorTypeLegacyUFP1VDO.setMaxValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO2DeviceCapabilityUFP1VDO = register_class.cMultiBooleanDMTerminator(self.parent,
                                                        {'name': 'Device Capability',
                                                         'offset': 24,
                                                         'bit length': 4})
    UFPDiscoverIdentityResponseProductTypeVDO2DeviceCapabilityUFP1VDO.setFlagNameList(['USB2', 'USB2 BillBoard Only', 'USB3.2', 'USB4', 'A', 'B'])
    UFPDiscoverIdentityResponseProductTypeVDO2DeviceCapabilityUFP1VDO.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
    UFPDiscoverIdentityResponseProductTypeVDO2DeviceCapabilityUFP1VDO.setSpacing(6)
    
    UFPDiscoverIdentityResponseProductTypeVDO2DeviceCapabilityUFP1VDO.reference_name = "Device Capability-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2UFPVDOVersionUFP1VDO = register_class.cDictDMTerminator(self.parent,
                                                 {'name': 'UFP VDO Version',
                                                  'offset': 29,
                                                  'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO2UFPVDOVersionUFP1VDO.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'Reserved1'), (3, 'Version 1.3')]))
    
    UFPDiscoverIdentityResponseProductTypeVDO2UFPVDOVersionUFP1VDO.reference_name = "UFP VDO Version-UFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2UFPVDOVersionUFP1VDO.setMaxValue(3)
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MaxPowerUFP2VDO = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'USB3 Max Power',
                                                  'offset': 0,
                                                  'bit length': 7})
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MaxPowerUFP2VDO.dictScaleUnits = {'W': 1.0}
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MaxPowerUFP2VDO.defaultUnit = 'W'
    
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MaxPowerUFP2VDO.reference_name = "USB3 Max Power-UFP2 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MaxPowerUFP2VDO.hide()
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MaxPowerUFP2VDO.setMaxValue(127)
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MaxPowerUFP2VDO.setMinValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MinPowerUFP2VDO = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'USB3 Min Power',
                                                  'offset': 7,
                                                  'bit length': 7})
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MinPowerUFP2VDO.dictScaleUnits = {'W': 1.0}
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MinPowerUFP2VDO.defaultUnit = 'W'
    
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MinPowerUFP2VDO.reference_name = "USB3 Min Power-UFP2 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MinPowerUFP2VDO.hide()
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MinPowerUFP2VDO.setMaxValue(127)
    UFPDiscoverIdentityResponseProductTypeVDO2USB3MinPowerUFP2VDO.setMinValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MaxPowerUFP2VDO = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'USB4 Max Power',
                                                  'offset': 16,
                                                  'bit length': 7})
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MaxPowerUFP2VDO.dictScaleUnits = {'W': 1.0}
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MaxPowerUFP2VDO.defaultUnit = 'W'
    
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MaxPowerUFP2VDO.reference_name = "USB4 Max Power-UFP2 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MaxPowerUFP2VDO.hide()
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MaxPowerUFP2VDO.setMaxValue(127)
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MaxPowerUFP2VDO.setMinValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MinPowerUFP2VDO = register_class.cScalingDMTerminator(self.parent,
                                                 {'name': 'USB4 Min Power',
                                                  'offset': 23,
                                                  'bit length': 7})
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MinPowerUFP2VDO.dictScaleUnits = {'W': 1.0}
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MinPowerUFP2VDO.defaultUnit = 'W'
    
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MinPowerUFP2VDO.reference_name = "USB4 Min Power-UFP2 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MinPowerUFP2VDO.hide()
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MinPowerUFP2VDO.setMaxValue(127)
    UFPDiscoverIdentityResponseProductTypeVDO2USB4MinPowerUFP2VDO.setMinValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO2PortNumberDFP1VDO = register_class.cHexDMTerminator(self.parent,
            {'name': 'Port Number',
            'offset': 0,
            'bit length': 5})
    
    UFPDiscoverIdentityResponseProductTypeVDO2PortNumberDFP1VDO.reference_name = "Port Number-DFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2DFPConnectorTypeLegacyDFP1VDO = register_class.cListDMTerminator(self.parent,
            {'name': 'DFP Connector Type (Legacy)',
                'offset': 22,
                'bit length': 2})
    UFPDiscoverIdentityResponseProductTypeVDO2DFPConnectorTypeLegacyDFP1VDO.setReportList(['Reserved'])
    
    UFPDiscoverIdentityResponseProductTypeVDO2DFPConnectorTypeLegacyDFP1VDO.reference_name = "DFP Connector Type (Legacy)-DFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2DFPConnectorTypeLegacyDFP1VDO.setMaxValue(0)
    UFPDiscoverIdentityResponseProductTypeVDO2HostCapabilityDFP1VDO = register_class.cMultiBooleanDMTerminator(self.parent,
                                                        {'name': 'Host Capability',
                                                         'offset': 24,
                                                         'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO2HostCapabilityDFP1VDO.setFlagNameList(['USB2', 'USB3.2', 'USB4', 'A', 'B', 'C'])
    UFPDiscoverIdentityResponseProductTypeVDO2HostCapabilityDFP1VDO.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
    UFPDiscoverIdentityResponseProductTypeVDO2HostCapabilityDFP1VDO.setSpacing(6)
    
    UFPDiscoverIdentityResponseProductTypeVDO2HostCapabilityDFP1VDO.reference_name = "Host Capability-DFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2DFPVDOVersionDFP1VDO = register_class.cDictDMTerminator(self.parent,
                                                 {'name': 'DFP VDO Version',
                                                  'offset': 29,
                                                  'bit length': 3})
    UFPDiscoverIdentityResponseProductTypeVDO2DFPVDOVersionDFP1VDO.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'Version 1.2'), (3, 'Reserved1')]))
    
    UFPDiscoverIdentityResponseProductTypeVDO2DFPVDOVersionDFP1VDO.reference_name = "DFP VDO Version-DFP1 VDO"
    UFPDiscoverIdentityResponseProductTypeVDO2DFPVDOVersionDFP1VDO.setMaxValue(3)
    UFPDiscoverIdentityResponseProductTypeVDO2NonSpecDataNONSPECVDO1 = register_class.cHexDMTerminator(self.parent,
            {'name': 'Non-Spec Data',
            'offset': 0,
            'bit length': 31})
    
    UFPDiscoverIdentityResponseProductTypeVDO2NonSpecDataNONSPECVDO1.reference_name = "Non-Spec Data-NONSPEC VDO1"
    if (get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() >= 1 and get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() <= 6):
        get_child_object(self, [u'UFP Discover Identity Response']).unhide()

    else:
        get_child_object(self, [u'UFP Discover Identity Response']).hide()

    if (get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() >= 1 and get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() <= 6):
        get_child_object(self, [u'UFP Discover Identity Response', u'UFP IDO Header']).unhide()

    else:
        get_child_object(self, [u'UFP Discover Identity Response', u'UFP IDO Header']).hide()

    if (get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() >= 2 and get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() <= 6):
        get_child_object(self, [u'UFP Discover Identity Response', u'Certification Test ID']).unhide()

    else:
        get_child_object(self, [u'UFP Discover Identity Response', u'Certification Test ID']).hide()

    if (get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() >= 3 and get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() <= 6):
        get_child_object(self, [u'UFP Discover Identity Response', u'Product Vendor Defined Object']).unhide()

    else:
        get_child_object(self, [u'UFP Discover Identity Response', u'Product Vendor Defined Object']).hide()

    if get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Product Type VDO 0 SOP'], "Product Type VDO 0 SOP").valueToInt() == 1:
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB3 Max Power'], "USB3 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB3 Min Power'], "USB3 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB4 Max Power'], "USB4 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB4 Min Power'], "USB4 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB Highest Speed'], "USB Highest Speed-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Alternate Mode'], "Alternate Mode-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VBUS Required'], "VBUS Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VCONN Required'], "VCONN Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VCONN Power'], "VCONN Power-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'UFP Connector Type (Legacy)'], "UFP Connector Type (Legacy)-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Device Capability'], "Device Capability-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'UFP VDO Version'], "UFP VDO Version-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Non-Spec Data'], "Non-Spec Data-NONSPEC VDO1"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Port Number'], "Port Number-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'DFP Connector Type (Legacy)'], "DFP Connector Type (Legacy)-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Host Capability'], "Host Capability-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'DFP VDO Version'], "DFP VDO Version-DFP1 VDO"))

    if get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Product Type VDO 0 SOP'], "Product Type VDO 0 SOP").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB Highest Speed'], "USB Highest Speed-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0USBHighestSpeedUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Alternate Mode'], "Alternate Mode-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0AlternateModeUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VBUS Required'], "VBUS Required-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0VBUSRequiredUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VCONN Required'], "VCONN Required-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0VCONNRequiredUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VCONN Power'], "VCONN Power-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0VCONNPowerUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'UFP Connector Type (Legacy)'], "UFP Connector Type (Legacy)-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0UFPConnectorTypeLegacyUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Device Capability'], "Device Capability-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0DeviceCapabilityUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'UFP VDO Version'], "UFP VDO Version-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0UFPVDOVersionUFP1VDO)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB3 Max Power'], "USB3 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB3 Min Power'], "USB3 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB4 Max Power'], "USB4 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB4 Min Power'], "USB4 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Non-Spec Data'], "Non-Spec Data-NONSPEC VDO1"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Port Number'], "Port Number-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'DFP Connector Type (Legacy)'], "DFP Connector Type (Legacy)-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Host Capability'], "Host Capability-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'DFP VDO Version'], "DFP VDO Version-DFP1 VDO"))

    if get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Product Type VDO 0 SOP'], "Product Type VDO 0 SOP").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Non-Spec Data'], "Non-Spec Data-NONSPEC VDO1"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0NonSpecDataNONSPECVDO1)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB3 Min Power'], "USB3 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB4 Max Power'], "USB4 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB4 Min Power'], "USB4 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB Highest Speed'], "USB Highest Speed-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Alternate Mode'], "Alternate Mode-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VBUS Required'], "VBUS Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VCONN Required'], "VCONN Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VCONN Power'], "VCONN Power-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'UFP Connector Type (Legacy)'], "UFP Connector Type (Legacy)-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Device Capability'], "Device Capability-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'UFP VDO Version'], "UFP VDO Version-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB3 Max Power'], "USB3 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Port Number'], "Port Number-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'DFP Connector Type (Legacy)'], "DFP Connector Type (Legacy)-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Host Capability'], "Host Capability-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'DFP VDO Version'], "DFP VDO Version-DFP1 VDO"))

    if get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Product Type VDO 0 SOP'], "Product Type VDO 0 SOP").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Port Number'], "Port Number-DFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0PortNumberDFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'DFP Connector Type (Legacy)'], "DFP Connector Type (Legacy)-DFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0DFPConnectorTypeLegacyDFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Host Capability'], "Host Capability-DFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0HostCapabilityDFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'DFP VDO Version'], "DFP VDO Version-DFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 0']), UFPDiscoverIdentityResponseProductTypeVDO0DFPVDOVersionDFP1VDO)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB Highest Speed'], "USB Highest Speed-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Alternate Mode'], "Alternate Mode-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VBUS Required'], "VBUS Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VCONN Required'], "VCONN Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'VCONN Power'], "VCONN Power-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'UFP Connector Type (Legacy)'], "UFP Connector Type (Legacy)-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Device Capability'], "Device Capability-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'UFP VDO Version'], "UFP VDO Version-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'Non-Spec Data'], "Non-Spec Data-NONSPEC VDO1"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB3 Max Power'], "USB3 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB3 Min Power'], "USB3 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB4 Max Power'], "USB4 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 0', u'USB4 Min Power'], "USB4 Min Power-UFP2 VDO"))

    if (get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() >= 4 and get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() <= 6):
        get_child_object(self, [u'UFP Discover Identity Response', u'Product Type VDO 0']).unhide()

    else:
        get_child_object(self, [u'UFP Discover Identity Response', u'Product Type VDO 0']).hide()

    if get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Product Type VDO 2 SOP'], "Product Type VDO 2 SOP").valueToInt() == 1:
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB3 Max Power'], "USB3 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB3 Min Power'], "USB3 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB4 Max Power'], "USB4 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB4 Min Power'], "USB4 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB Highest Speed'], "USB Highest Speed-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Alternate Mode'], "Alternate Mode-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VBUS Required'], "VBUS Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VCONN Required'], "VCONN Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VCONN Power'], "VCONN Power-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'UFP Connector Type (Legacy)'], "UFP Connector Type (Legacy)-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Device Capability'], "Device Capability-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'UFP VDO Version'], "UFP VDO Version-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Non-Spec Data'], "Non-Spec Data-NONSPEC VDO1"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Port Number'], "Port Number-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'DFP Connector Type (Legacy)'], "DFP Connector Type (Legacy)-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Host Capability'], "Host Capability-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'DFP VDO Version'], "DFP VDO Version-DFP1 VDO"))

    if get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Product Type VDO 2 SOP'], "Product Type VDO 2 SOP").valueToInt() == 0:
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB Highest Speed'], "USB Highest Speed-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2USBHighestSpeedUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Alternate Mode'], "Alternate Mode-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2AlternateModeUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VBUS Required'], "VBUS Required-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2VBUSRequiredUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VCONN Required'], "VCONN Required-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2VCONNRequiredUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VCONN Power'], "VCONN Power-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2VCONNPowerUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'UFP Connector Type (Legacy)'], "UFP Connector Type (Legacy)-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2UFPConnectorTypeLegacyUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Device Capability'], "Device Capability-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2DeviceCapabilityUFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'UFP VDO Version'], "UFP VDO Version-UFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2UFPVDOVersionUFP1VDO)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB3 Max Power'], "USB3 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB3 Min Power'], "USB3 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB4 Max Power'], "USB4 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB4 Min Power'], "USB4 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Non-Spec Data'], "Non-Spec Data-NONSPEC VDO1"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Port Number'], "Port Number-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'DFP Connector Type (Legacy)'], "DFP Connector Type (Legacy)-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Host Capability'], "Host Capability-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'DFP VDO Version'], "DFP VDO Version-DFP1 VDO"))

    if get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Product Type VDO 2 SOP'], "Product Type VDO 2 SOP").valueToInt() == 3:
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Non-Spec Data'], "Non-Spec Data-NONSPEC VDO1"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2NonSpecDataNONSPECVDO1)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB3 Min Power'], "USB3 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB4 Max Power'], "USB4 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB4 Min Power'], "USB4 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB Highest Speed'], "USB Highest Speed-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Alternate Mode'], "Alternate Mode-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VBUS Required'], "VBUS Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VCONN Required'], "VCONN Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VCONN Power'], "VCONN Power-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'UFP Connector Type (Legacy)'], "UFP Connector Type (Legacy)-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Device Capability'], "Device Capability-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'UFP VDO Version'], "UFP VDO Version-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB3 Max Power'], "USB3 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Port Number'], "Port Number-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'DFP Connector Type (Legacy)'], "DFP Connector Type (Legacy)-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Host Capability'], "Host Capability-DFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'DFP VDO Version'], "DFP VDO Version-DFP1 VDO"))

    if get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Product Type VDO 2 SOP'], "Product Type VDO 2 SOP").valueToInt() == 2:
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Port Number'], "Port Number-DFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2PortNumberDFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'DFP Connector Type (Legacy)'], "DFP Connector Type (Legacy)-DFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2DFPConnectorTypeLegacyDFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Host Capability'], "Host Capability-DFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2HostCapabilityDFP1VDO)
        add_field_if_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'DFP VDO Version'], "DFP VDO Version-DFP1 VDO"), get_child_object(self,[u'UFP Discover Identity Response', u'Product Type VDO 2']), UFPDiscoverIdentityResponseProductTypeVDO2DFPVDOVersionDFP1VDO)
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB Highest Speed'], "USB Highest Speed-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Alternate Mode'], "Alternate Mode-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VBUS Required'], "VBUS Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VCONN Required'], "VCONN Required-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'VCONN Power'], "VCONN Power-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'UFP Connector Type (Legacy)'], "UFP Connector Type (Legacy)-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Device Capability'], "Device Capability-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'UFP VDO Version'], "UFP VDO Version-UFP1 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'Non-Spec Data'], "Non-Spec Data-NONSPEC VDO1"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB3 Max Power'], "USB3 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB3 Min Power'], "USB3 Min Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB4 Max Power'], "USB4 Max Power-UFP2 VDO"))
        remove_child_if_not_none(get_child_object_with_refname(self, [u'UFP Discover Identity Response', u'Product Type VDO 2', u'USB4 Min Power'], "USB4 Min Power-UFP2 VDO"))

    if (get_child_object(self, ['Number of Valid PDOs in Register', 'Number Valid VDOs']).valueToInt() == 6):
        get_child_object(self, [u'UFP Discover Identity Response', u'Product Type VDO 2']).unhide()

    else:
        get_child_object(self, [u'UFP Discover Identity Response', u'Product Type VDO 2']).hide()

    return self.childrenAsListDMGenerator()

def producttypevdo0sop_0x47_fo_104_derived_function(argsList):
    return_value = 3

    if (argsList[0].valueToInt() in [1, 2]):
        return_value = 0
    elif (argsList[1].valueToInt() >= 1 and argsList[1].valueToInt() <= 3):
        return_value = 2

    return long(return_value)

def producttypevdo2sop_0x47_fo_168_derived_function(argsList):
    return_value = 3

    if (argsList[0].valueToInt() in [0, 3]):
        return_value = 3
    elif (argsList[1].valueToInt() >= 1 and argsList[1].valueToInt() <= 3):
        return_value = 2

    return long(return_value)


class ctxidentity_0x47_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Tx Identity',
                                           'address': 0x47,
                                           'byte length': 49,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Tx Identity',
                                                         'offset': 0,
                                                         'bit length': 392})

        NumberofValidPDOsinRegister_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Number of Valid PDOs in Register',
                                                         'offset': 0,
                                                         'bit length': 3})
        self.dataModel.addChild(NumberofValidPDOsinRegister_dm)

        numvalidvdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid VDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        NumberofValidPDOsinRegister_dm.addChild(numvalidvdos)
        numvalidvdos.reference_name = "Number Valid VDOs"
        numvalidvdos.help = "Number of valid VDOs in this register. This field causes special behavior: #ul##li#When 0, the PD Controller will NAK USB PD Discover Identity message.#/li##li#When 1, the PD Controller will respond with BUSY message.#/li##li#When 2, the PD Controller will respond with Not_Supported (PD3) or no response (PD2).#/li##li#When 3, 4, 5, or 6 the PD Controller will respond with an ACK message.#/li##li#The value 7 is reserved.#/li##/ul##filter_filter1#This should apply to all VDM messages. #/ph# (Max of 6)"
        numvalidvdos.setMaxValue(6)
        numvalidvdos.setMinValue(0)
        numvalidvdos.addUpdateRegisterByName("self")

        UFPDiscoverIdentityResponse_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'UFP Discover Identity Response',
                                                         'offset': 8,
                                                         'bit length': 368})
        self.dataModel.addChild(UFPDiscoverIdentityResponse_dm)


        UFPIDOHeader_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'UFP IDO Header',
                                                         'offset': 0,
                                                         'bit length': 40})
        UFPDiscoverIdentityResponse_dm.addChild(UFPIDOHeader_dm)

        vendorid = register_class.cHexDMTerminator(self,
                {'name': 'Vendor ID',
                'offset': 0,
                'bit length': 16})
        UFPIDOHeader_dm.addChild(vendorid)
        vendorid.reference_name = "Vendor ID"
        vendorid.help = "This is as defined in the USB PD specification. The value written for VID here is used to populate the VID in other registers as well: TX_MIDB_SOP, TX_SCEDB, and TX_SKEDB."

        connectortype = register_class.cListDMTerminator(self,
                {'name': 'Connector Type',
                    'offset': 21,
                    'bit length': 2})
        connectortype.setReportList(['Reserved Legacy', 'Reserved', 'Receptacle', 'Plug'])
        UFPIDOHeader_dm.addChild(connectortype)
        connectortype.reference_name = "Connector Type"
        connectortype.help = "This is as defined in the USB PD specification. The value written for Connector Type is used to  identify it as either a USB Type-C receptacle or a USB Type-C plug."
        connectortype.hide()
        connectortype.setMaxValue(3)

        producttypedfp = register_class.cListDMTerminator(self,
                {'name': 'Product Type DFP',
                    'offset': 23,
                    'bit length': 3})
        producttypedfp.setReportList(['Not a DFP', 'PDUSB HUB', 'PDUSB Host', 'Power Brick'])
        UFPIDOHeader_dm.addChild(producttypedfp)
        producttypedfp.reference_name = "Product Type DFP"
        producttypedfp.help = "This is as defined in the USB PD specification."
        producttypedfp.setMaxValue(3)
        producttypedfp.addUpdateRegisterByName("self")

        modaloperationsupported = register_class.cBooleanDMTerminator(self,
                {'name': 'Modal Operation Supported',
                'offset': 26,
                'bit length': 1})
        UFPIDOHeader_dm.addChild(modaloperationsupported)
        modaloperationsupported.reference_name = "Modal Operation Supported"
        modaloperationsupported.help = "Assert this bit if Alternate Modes are supported."

        producttypeufp = register_class.cListDMTerminator(self,
                {'name': 'Product Type UFP',
                    'offset': 27,
                    'bit length': 3})
        producttypeufp.setReportList(['Not a UFP', 'PDUSB HUB', 'PDUSB Peripheral', 'PSD'])
        UFPIDOHeader_dm.addChild(producttypeufp)
        producttypeufp.reference_name = "Product Type UFP"
        producttypeufp.help = "This is as defined in the USB PD specification. bits 15:0 are the VID. The value written for VID here is used to populate the VID in other registers as well: TX_MIDB_SOP, TX_SCEDB, and TX_SKEDB."
        producttypeufp.setMaxValue(3)
        producttypeufp.addUpdateRegisterByName("self")

        usbcommcapableasdevice = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Communication Capable as Device',
                'offset': 30,
                'bit length': 1})
        UFPIDOHeader_dm.addChild(usbcommcapableasdevice)
        usbcommcapableasdevice.reference_name = "USB Communication Capable as Device"
        usbcommcapableasdevice.help = "Assert if USB communications capable as a device."

        usbcommcapableashost = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Communication Capable as Host',
                'offset': 31,
                'bit length': 1})
        UFPIDOHeader_dm.addChild(usbcommcapableashost)
        usbcommcapableashost.reference_name = "USB Communication Capable as Host"
        usbcommcapableashost.help = "Assert if USB communications capable as a host."


        CertificationTestID_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Certification Test ID',
                                                         'offset': 32,
                                                         'bit length': 72})
        UFPDiscoverIdentityResponse_dm.addChild(CertificationTestID_dm)

        certstatvdo = register_class.cHexDMTerminator(self,
                {'name': 'Certification Test ID',
                'offset': 0,
                'bit length': 32})
        CertificationTestID_dm.addChild(certstatvdo)
        certstatvdo.reference_name = "Certification Test ID"
        certstatvdo.help = "This contains the 32-bit XID assigned by USB-IF. The value written for XID here is used to populate the XID in other registers as well: TX_SCEDB, and TX_SKEDB."


        ProductVendorDefinedObject_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Product Vendor Defined Object',
                                                         'offset': 64,
                                                         'bit length': 104})
        UFPDiscoverIdentityResponse_dm.addChild(ProductVendorDefinedObject_dm)

        bcddevice = register_class.cHexDMTerminator(self,
                {'name': 'BCD Device',
                'offset': 0,
                'bit length': 16})
        ProductVendorDefinedObject_dm.addChild(bcddevice)
        bcddevice.reference_name = "BCD Device"
        bcddevice.help = "This field is read-only and contains the FW version for the PD controller."

        productid = register_class.cHexDMTerminator(self,
                {'name': 'USB Product ID',
                'offset': 16,
                'bit length': 16})
        ProductVendorDefinedObject_dm.addChild(productid)
        productid.reference_name = "USB Product ID"
        productid.help = "Product ID. The value written for PID here is used to populate the PID in other registers as well: TX_MIDB_SOP, TX_SCEDB, and TX_SKEDB."


        ProductTypeVDO0_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Product Type VDO 0',
                                                         'offset': 96,
                                                         'bit length': 136})
        UFPDiscoverIdentityResponse_dm.addChild(ProductTypeVDO0_dm)

        USBHighestSpeed = register_class.cListDMTerminator(self,
                {'name': 'USB Highest Speed',
                    'offset': 0,
                    'bit length': 3})
        USBHighestSpeed.setReportList(['USB2', 'USB3.2Gen1', 'USB3.2Gen2', 'USB4Gen3', 'USB4Gen4'])
        ProductTypeVDO0_dm.addChild(USBHighestSpeed)
        USBHighestSpeed.reference_name = "USB Highest Speed-UFP1 VDO"
        USBHighestSpeed.setMaxValue(4)

        AlternateMode = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Alternate Mode',
                                                             'offset': 3,
                                                             'bit length': 3})
        AlternateMode.setFlagNameList(['Supports', 'Supports that reconfigures signal', 'Supports that do not reconfigure signal', 'A', 'B', 'C'])
        AlternateMode.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        AlternateMode.setSpacing(6)
        ProductTypeVDO0_dm.addChild(AlternateMode)
        AlternateMode.reference_name = "Alternate Mode-UFP1 VDO"

        VBUSRequired = register_class.cBooleanDMTerminator(self,
                {'name': 'VBUS Required',
                'offset': 6,
                'bit length': 1})
        ProductTypeVDO0_dm.addChild(VBUSRequired)
        VBUSRequired.reference_name = "VBUS Required-UFP1 VDO"

        VCONNRequired = register_class.cBooleanDMTerminator(self,
                {'name': 'VCONN Required',
                'offset': 7,
                'bit length': 1})
        ProductTypeVDO0_dm.addChild(VCONNRequired)
        VCONNRequired.reference_name = "VCONN Required-UFP1 VDO"

        VCONNPower = register_class.cListDMTerminator(self,
                {'name': 'VCONN Power',
                    'offset': 8,
                    'bit length': 3})
        VCONNPower.setReportList(['1W', '1.5W', '2W', '3W', '4W', '5W', '6W'])
        ProductTypeVDO0_dm.addChild(VCONNPower)
        VCONNPower.reference_name = "VCONN Power-UFP1 VDO"
        VCONNPower.setMaxValue(6)

        UFPConnectorTypeLegacy = register_class.cListDMTerminator(self,
                {'name': 'UFP Connector Type (Legacy)',
                    'offset': 22,
                    'bit length': 2})
        UFPConnectorTypeLegacy.setReportList(['Reserved'])
        ProductTypeVDO0_dm.addChild(UFPConnectorTypeLegacy)
        UFPConnectorTypeLegacy.reference_name = "UFP Connector Type (Legacy)-UFP1 VDO"
        UFPConnectorTypeLegacy.setMaxValue(0)

        DeviceCapability = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Device Capability',
                                                             'offset': 24,
                                                             'bit length': 4})
        DeviceCapability.setFlagNameList(['USB2', 'USB2 BillBoard Only', 'USB3.2', 'USB4', 'A', 'B'])
        DeviceCapability.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        DeviceCapability.setSpacing(6)
        ProductTypeVDO0_dm.addChild(DeviceCapability)
        DeviceCapability.reference_name = "Device Capability-UFP1 VDO"

        UFPVDOVersion = register_class.cDictDMTerminator(self,
                                                     {'name': 'UFP VDO Version',
                                                      'offset': 29,
                                                      'bit length': 3})
        UFPVDOVersion.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'Reserved1'), (3, 'Version 1.3')]))
        ProductTypeVDO0_dm.addChild(UFPVDOVersion)
        UFPVDOVersion.reference_name = "UFP VDO Version-UFP1 VDO"
        UFPVDOVersion.setMaxValue(3)

        USB3MaxPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'USB3 Max Power',
                                                      'offset': 0,
                                                      'bit length': 7})
        USB3MaxPower.dictScaleUnits = {'W': 1.0}
        USB3MaxPower.defaultUnit = 'W'
        ProductTypeVDO0_dm.addChild(USB3MaxPower)
        USB3MaxPower.reference_name = "USB3 Max Power-UFP2 VDO"
        USB3MaxPower.hide()
        USB3MaxPower.setMaxValue(127)
        USB3MaxPower.setMinValue(0)

        USB3MinPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'USB3 Min Power',
                                                      'offset': 7,
                                                      'bit length': 7})
        USB3MinPower.dictScaleUnits = {'W': 1.0}
        USB3MinPower.defaultUnit = 'W'
        ProductTypeVDO0_dm.addChild(USB3MinPower)
        USB3MinPower.reference_name = "USB3 Min Power-UFP2 VDO"
        USB3MinPower.hide()
        USB3MinPower.setMaxValue(127)
        USB3MinPower.setMinValue(0)

        USB4MaxPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'USB4 Max Power',
                                                      'offset': 16,
                                                      'bit length': 7})
        USB4MaxPower.dictScaleUnits = {'W': 1.0}
        USB4MaxPower.defaultUnit = 'W'
        ProductTypeVDO0_dm.addChild(USB4MaxPower)
        USB4MaxPower.reference_name = "USB4 Max Power-UFP2 VDO"
        USB4MaxPower.hide()
        USB4MaxPower.setMaxValue(127)
        USB4MaxPower.setMinValue(0)

        USB4MinPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'USB4 Min Power',
                                                      'offset': 23,
                                                      'bit length': 7})
        USB4MinPower.dictScaleUnits = {'W': 1.0}
        USB4MinPower.defaultUnit = 'W'
        ProductTypeVDO0_dm.addChild(USB4MinPower)
        USB4MinPower.reference_name = "USB4 Min Power-UFP2 VDO"
        USB4MinPower.hide()
        USB4MinPower.setMaxValue(127)
        USB4MinPower.setMinValue(0)

        PortNumber = register_class.cHexDMTerminator(self,
                {'name': 'Port Number',
                'offset': 0,
                'bit length': 5})
        ProductTypeVDO0_dm.addChild(PortNumber)
        PortNumber.reference_name = "Port Number-DFP1 VDO"

        DFPConnectorTypeLegacy = register_class.cListDMTerminator(self,
                {'name': 'DFP Connector Type (Legacy)',
                    'offset': 22,
                    'bit length': 2})
        DFPConnectorTypeLegacy.setReportList(['Reserved'])
        ProductTypeVDO0_dm.addChild(DFPConnectorTypeLegacy)
        DFPConnectorTypeLegacy.reference_name = "DFP Connector Type (Legacy)-DFP1 VDO"
        DFPConnectorTypeLegacy.setMaxValue(0)

        HostCapability = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Host Capability',
                                                             'offset': 24,
                                                             'bit length': 3})
        HostCapability.setFlagNameList(['USB2', 'USB3.2', 'USB4', 'A', 'B', 'C'])
        HostCapability.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        HostCapability.setSpacing(6)
        ProductTypeVDO0_dm.addChild(HostCapability)
        HostCapability.reference_name = "Host Capability-DFP1 VDO"

        DFPVDOVersion = register_class.cDictDMTerminator(self,
                                                     {'name': 'DFP VDO Version',
                                                      'offset': 29,
                                                      'bit length': 3})
        DFPVDOVersion.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'Version 1.2'), (3, 'Reserved1')]))
        ProductTypeVDO0_dm.addChild(DFPVDOVersion)
        DFPVDOVersion.reference_name = "DFP VDO Version-DFP1 VDO"
        DFPVDOVersion.setMaxValue(3)

        NonSpecData = register_class.cHexDMTerminator(self,
                {'name': 'Non-Spec Data',
                'offset': 0,
                'bit length': 31})
        ProductTypeVDO0_dm.addChild(NonSpecData)
        NonSpecData.reference_name = "Non-Spec Data-NONSPEC VDO1"

        producttypevdo0sop = register_class.cVirtualListDMTerminator(self,
                {'name': 'Product Type VDO 0 SOP',
                    'offset': 0,
                    'bit length': 2})
        producttypevdo0sop.setReportList(['UFP VDO1', 'UFP VDO2', 'DFP VDO', 'UNDEFINED'])
        ProductTypeVDO0_dm.addChild(producttypevdo0sop)
        producttypevdo0sop.reference_name = "Product Type VDO 0 SOP"
        producttypevdo0sop.help = "virtual_control"
        producttypevdo0sop.hide()
        producttypevdo0sop.setMaxValue(3)
        producttypevdo0sop.addUpdateRegisterByName("self")

        producttypevdo0sop.registerAsDerivedField(producttypevdo0sop_0x47_fo_104_derived_function, None, [['Tx Identity', 'UFP Discover Identity Response', 'UFP IDO Header', 'Product Type UFP'], ['Tx Identity', 'UFP Discover Identity Response', 'UFP IDO Header', 'Product Type DFP']])



        ProductTypeVDO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Product Type VDO 2',
                                                         'offset': 160,
                                                         'bit length': 200})
        UFPDiscoverIdentityResponse_dm.addChild(ProductTypeVDO2_dm)

        USBHighestSpeed = register_class.cListDMTerminator(self,
                {'name': 'USB Highest Speed',
                    'offset': 0,
                    'bit length': 3})
        USBHighestSpeed.setReportList(['USB2', 'USB3.2Gen1', 'USB3.2Gen2', 'USB4Gen3', 'USB4Gen4'])
        ProductTypeVDO2_dm.addChild(USBHighestSpeed)
        USBHighestSpeed.reference_name = "USB Highest Speed-UFP1 VDO"
        USBHighestSpeed.setMaxValue(4)

        AlternateMode = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Alternate Mode',
                                                             'offset': 3,
                                                             'bit length': 3})
        AlternateMode.setFlagNameList(['Supports', 'Supports that reconfigures signal', 'Supports that do not reconfigure signal', 'A', 'B', 'C'])
        AlternateMode.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        AlternateMode.setSpacing(6)
        ProductTypeVDO2_dm.addChild(AlternateMode)
        AlternateMode.reference_name = "Alternate Mode-UFP1 VDO"

        VBUSRequired = register_class.cBooleanDMTerminator(self,
                {'name': 'VBUS Required',
                'offset': 6,
                'bit length': 1})
        ProductTypeVDO2_dm.addChild(VBUSRequired)
        VBUSRequired.reference_name = "VBUS Required-UFP1 VDO"

        VCONNRequired = register_class.cBooleanDMTerminator(self,
                {'name': 'VCONN Required',
                'offset': 7,
                'bit length': 1})
        ProductTypeVDO2_dm.addChild(VCONNRequired)
        VCONNRequired.reference_name = "VCONN Required-UFP1 VDO"

        VCONNPower = register_class.cListDMTerminator(self,
                {'name': 'VCONN Power',
                    'offset': 8,
                    'bit length': 3})
        VCONNPower.setReportList(['1W', '1.5W', '2W', '3W', '4W', '5W', '6W'])
        ProductTypeVDO2_dm.addChild(VCONNPower)
        VCONNPower.reference_name = "VCONN Power-UFP1 VDO"
        VCONNPower.setMaxValue(6)

        UFPConnectorTypeLegacy = register_class.cListDMTerminator(self,
                {'name': 'UFP Connector Type (Legacy)',
                    'offset': 22,
                    'bit length': 2})
        UFPConnectorTypeLegacy.setReportList(['Reserved'])
        ProductTypeVDO2_dm.addChild(UFPConnectorTypeLegacy)
        UFPConnectorTypeLegacy.reference_name = "UFP Connector Type (Legacy)-UFP1 VDO"
        UFPConnectorTypeLegacy.setMaxValue(0)

        DeviceCapability = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Device Capability',
                                                             'offset': 24,
                                                             'bit length': 4})
        DeviceCapability.setFlagNameList(['USB2', 'USB2 BillBoard Only', 'USB3.2', 'USB4', 'A', 'B'])
        DeviceCapability.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        DeviceCapability.setSpacing(6)
        ProductTypeVDO2_dm.addChild(DeviceCapability)
        DeviceCapability.reference_name = "Device Capability-UFP1 VDO"

        UFPVDOVersion = register_class.cDictDMTerminator(self,
                                                     {'name': 'UFP VDO Version',
                                                      'offset': 29,
                                                      'bit length': 3})
        UFPVDOVersion.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'Reserved1'), (3, 'Version 1.3')]))
        ProductTypeVDO2_dm.addChild(UFPVDOVersion)
        UFPVDOVersion.reference_name = "UFP VDO Version-UFP1 VDO"
        UFPVDOVersion.setMaxValue(3)

        USB3MaxPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'USB3 Max Power',
                                                      'offset': 0,
                                                      'bit length': 7})
        USB3MaxPower.dictScaleUnits = {'W': 1.0}
        USB3MaxPower.defaultUnit = 'W'
        ProductTypeVDO2_dm.addChild(USB3MaxPower)
        USB3MaxPower.reference_name = "USB3 Max Power-UFP2 VDO"
        USB3MaxPower.hide()
        USB3MaxPower.setMaxValue(127)
        USB3MaxPower.setMinValue(0)

        USB3MinPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'USB3 Min Power',
                                                      'offset': 7,
                                                      'bit length': 7})
        USB3MinPower.dictScaleUnits = {'W': 1.0}
        USB3MinPower.defaultUnit = 'W'
        ProductTypeVDO2_dm.addChild(USB3MinPower)
        USB3MinPower.reference_name = "USB3 Min Power-UFP2 VDO"
        USB3MinPower.hide()
        USB3MinPower.setMaxValue(127)
        USB3MinPower.setMinValue(0)

        USB4MaxPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'USB4 Max Power',
                                                      'offset': 16,
                                                      'bit length': 7})
        USB4MaxPower.dictScaleUnits = {'W': 1.0}
        USB4MaxPower.defaultUnit = 'W'
        ProductTypeVDO2_dm.addChild(USB4MaxPower)
        USB4MaxPower.reference_name = "USB4 Max Power-UFP2 VDO"
        USB4MaxPower.hide()
        USB4MaxPower.setMaxValue(127)
        USB4MaxPower.setMinValue(0)

        USB4MinPower = register_class.cScalingDMTerminator(self,
                                                     {'name': 'USB4 Min Power',
                                                      'offset': 23,
                                                      'bit length': 7})
        USB4MinPower.dictScaleUnits = {'W': 1.0}
        USB4MinPower.defaultUnit = 'W'
        ProductTypeVDO2_dm.addChild(USB4MinPower)
        USB4MinPower.reference_name = "USB4 Min Power-UFP2 VDO"
        USB4MinPower.hide()
        USB4MinPower.setMaxValue(127)
        USB4MinPower.setMinValue(0)

        PortNumber = register_class.cHexDMTerminator(self,
                {'name': 'Port Number',
                'offset': 0,
                'bit length': 5})
        ProductTypeVDO2_dm.addChild(PortNumber)
        PortNumber.reference_name = "Port Number-DFP1 VDO"

        DFPConnectorTypeLegacy = register_class.cListDMTerminator(self,
                {'name': 'DFP Connector Type (Legacy)',
                    'offset': 22,
                    'bit length': 2})
        DFPConnectorTypeLegacy.setReportList(['Reserved'])
        ProductTypeVDO2_dm.addChild(DFPConnectorTypeLegacy)
        DFPConnectorTypeLegacy.reference_name = "DFP Connector Type (Legacy)-DFP1 VDO"
        DFPConnectorTypeLegacy.setMaxValue(0)

        HostCapability = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Host Capability',
                                                             'offset': 24,
                                                             'bit length': 3})
        HostCapability.setFlagNameList(['USB2', 'USB3.2', 'USB4', 'A', 'B', 'C'])
        HostCapability.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        HostCapability.setSpacing(6)
        ProductTypeVDO2_dm.addChild(HostCapability)
        HostCapability.reference_name = "Host Capability-DFP1 VDO"

        DFPVDOVersion = register_class.cDictDMTerminator(self,
                                                     {'name': 'DFP VDO Version',
                                                      'offset': 29,
                                                      'bit length': 3})
        DFPVDOVersion.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'Version 1.2'), (3, 'Reserved1')]))
        ProductTypeVDO2_dm.addChild(DFPVDOVersion)
        DFPVDOVersion.reference_name = "DFP VDO Version-DFP1 VDO"
        DFPVDOVersion.setMaxValue(3)

        NonSpecData = register_class.cHexDMTerminator(self,
                {'name': 'Non-Spec Data',
                'offset': 0,
                'bit length': 31})
        ProductTypeVDO2_dm.addChild(NonSpecData)
        NonSpecData.reference_name = "Non-Spec Data-NONSPEC VDO1"

        producttypevdo2sop = register_class.cVirtualListDMTerminator(self,
                {'name': 'Product Type VDO 2 SOP',
                    'offset': 0,
                    'bit length': 2})
        producttypevdo2sop.setReportList(['UFP VDO1', 'UFP VDO2', 'DFP VDO', 'UNDEFINED'])
        ProductTypeVDO2_dm.addChild(producttypevdo2sop)
        producttypevdo2sop.reference_name = "Product Type VDO 2 SOP"
        producttypevdo2sop.help = "virtual_control"
        producttypevdo2sop.hide()
        producttypevdo2sop.setMaxValue(3)
        producttypevdo2sop.addUpdateRegisterByName("self")

        producttypevdo2sop.registerAsDerivedField(producttypevdo2sop_0x47_fo_168_derived_function, None, [['Tx Identity', 'UFP Discover Identity Response', 'UFP IDO Header', 'Product Type UFP'], ['Tx Identity', 'UFP Discover Identity Response', 'UFP IDO Header', 'Product Type DFP']])


        self.dataModel.parent = self
        self.dataModel.setDataModelGenerator(txidentity_dm_generator)

        update_function = get_updater_function("txidentity_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class crxidentitysop_0x48_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Received SOP Identity Data Object',
                                           'address': 0x48,
                                           'byte length': 25,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received SOP Identity Data Object',
                                                         'offset': 0,
                                                         'bit length': 200})

        VDOconfiguration_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'VDO configuration',
                                                         'offset': 0,
                                                         'bit length': 14})
        self.dataModel.addChild(VDOconfiguration_dm)


        NumberofvalidVDOs_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Number of valid VDOs',
                                                         'offset': 0,
                                                         'bit length': 3})
        VDOconfiguration_dm.addChild(NumberofvalidVDOs_dm)

        numvalidvdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid VDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        NumberofvalidVDOs_dm.addChild(numvalidvdos)
        numvalidvdos.reference_name = "Number Valid VDOs"
        numvalidvdos.help = "Number of valid VDOs in this register. (Max of 6)"
        numvalidvdos.setMaxValue(6)
        numvalidvdos.setMinValue(0)


        SOPMessageSource_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'SOP Message Source',
                                                         'offset': 6,
                                                         'bit length': 8})
        VDOconfiguration_dm.addChild(SOPMessageSource_dm)

        responsetype = register_class.cListDMTerminator(self,
                {'name': 'Response Type',
                    'offset': 0,
                    'bit length': 2})
        responsetype.setReportList(['SOP Discover Identity request not sent or pending', 'Responder ACK received', 'Responder NAK received or response timeout', 'Responder BUSY received (PD Controller will retry)'])
        SOPMessageSource_dm.addChild(responsetype)
        responsetype.reference_name = "Response Type"
        responsetype.help = "Type of response received."
        responsetype.setMaxValue(3)

        ReceivedSOPVDO_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received SOP VDO',
                                                         'offset': 8,
                                                         'bit length': 368})
        self.dataModel.addChild(ReceivedSOPVDO_dm)


        AlternateModeAdapterVDO_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Alternate Mode Adapter VDO',
                                                         'offset': 96,
                                                         'bit length': 136})
        ReceivedSOPVDO_dm.addChild(AlternateModeAdapterVDO_dm)

        rxidsopvdo4 = register_class.cListDMTerminator(self,
                {'name': 'USB SS Signalling',
                    'offset': 0,
                    'bit length': 3})
        rxidsopvdo4.setReportList(['USB2', 'USB3.2 Gen1', 'USB3.2 Gen2', 'USB2 billboard only', 'Reserved'])
        AlternateModeAdapterVDO_dm.addChild(rxidsopvdo4)
        rxidsopvdo4.reference_name = "USB SS Signalling"
        rxidsopvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsopvdo4.setMaxValue(4)

        rxidsopvdo4 = register_class.cBooleanDMTerminator(self,
                {'name': 'Vbus Required',
                'offset': 3,
                'bit length': 1})
        AlternateModeAdapterVDO_dm.addChild(rxidsopvdo4)
        rxidsopvdo4.reference_name = "Vbus Required"
        rxidsopvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."

        rxidsopvdo4 = register_class.cBooleanDMTerminator(self,
                {'name': 'Vconn Required',
                'offset': 4,
                'bit length': 1})
        AlternateModeAdapterVDO_dm.addChild(rxidsopvdo4)
        rxidsopvdo4.reference_name = "Vconn Required"
        rxidsopvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."

        rxidsopvdo4 = register_class.cListDMTerminator(self,
                {'name': 'Vconn Power',
                    'offset': 5,
                    'bit length': 3})
        rxidsopvdo4.setReportList(['1W', '1.5W', '2W', '3W', '4W', '5W', '6W', 'Reserved'])
        AlternateModeAdapterVDO_dm.addChild(rxidsopvdo4)
        rxidsopvdo4.reference_name = "Vconn Power"
        rxidsopvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsopvdo4.setMaxValue(7)

        rxidsopvdo4 = register_class.cHexDMTerminator(self,
                {'name': 'VDO Version',
                'offset': 21,
                'bit length': 3})
        AlternateModeAdapterVDO_dm.addChild(rxidsopvdo4)
        rxidsopvdo4.reference_name = "VDO Version"
        rxidsopvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."

        rxidsopvdo4 = register_class.cHexDMTerminator(self,
                {'name': 'AMA Firmware Version',
                'offset': 24,
                'bit length': 4})
        AlternateModeAdapterVDO_dm.addChild(rxidsopvdo4)
        rxidsopvdo4.reference_name = "AMA Firmware Version"
        rxidsopvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."

        rxidsopvdo4 = register_class.cHexDMTerminator(self,
                {'name': 'AMA Hardware Version',
                'offset': 28,
                'bit length': 4})
        AlternateModeAdapterVDO_dm.addChild(rxidsopvdo4)
        rxidsopvdo4.reference_name = "AMA Hardware Version"
        rxidsopvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."


        CertificationTestID_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Certification Test ID',
                                                         'offset': 32,
                                                         'bit length': 72})
        ReceivedSOPVDO_dm.addChild(CertificationTestID_dm)

        rxidsopvdo2 = register_class.cHexDMTerminator(self,
                {'name': 'RX ID SOP VDO 2',
                'offset': 0,
                'bit length': 32})
        CertificationTestID_dm.addChild(rxidsopvdo2)
        rxidsopvdo2.reference_name = "RX ID SOP VDO 2"
        rxidsopvdo2.help = "Cert Stat VDO. The second Data Object for Discover Identity response."


        IDOHeader_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'IDO Header',
                                                         'offset': 0,
                                                         'bit length': 40})
        ReceivedSOPVDO_dm.addChild(IDOHeader_dm)

        rxidsopvdo1 = register_class.cHexDMTerminator(self,
                {'name': 'USB Vendor ID',
                'offset': 0,
                'bit length': 16})
        IDOHeader_dm.addChild(rxidsopvdo1)
        rxidsopvdo1.reference_name = "USB Vendor ID"
        rxidsopvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."

        rxidsopvdo1 = register_class.cListDMTerminator(self,
                {'name': 'Product Type (DFP)',
                    'offset': 23,
                    'bit length': 3})
        rxidsopvdo1.setReportList(['Undefined', 'HUB', 'Host', 'Brick', 'Alternate Mode Controller', 'Unknow(0x5)', 'Unknow(0x6)', 'Unknow(0x7)'])
        IDOHeader_dm.addChild(rxidsopvdo1)
        rxidsopvdo1.reference_name = "Product Type (DFP)"
        rxidsopvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."
        rxidsopvdo1.setMaxValue(7)

        rxidsopvdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Modal Operation Supported',
                'offset': 26,
                'bit length': 1})
        IDOHeader_dm.addChild(rxidsopvdo1)
        rxidsopvdo1.reference_name = "Modal Operation Supported"
        rxidsopvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."

        rxidsopvdo1 = register_class.cListDMTerminator(self,
                {'name': 'Product Type (UFP)',
                    'offset': 27,
                    'bit length': 3})
        rxidsopvdo1.setReportList(['Undefined', 'HUB', 'Peripheral', 'Passive Cable', 'Active Cable', 'Alternate Mode Adapter', 'Power Bric'])
        IDOHeader_dm.addChild(rxidsopvdo1)
        rxidsopvdo1.reference_name = "Product Type (UFP)"
        rxidsopvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."
        rxidsopvdo1.setMaxValue(6)

        rxidsopvdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Capable as USB Device',
                'offset': 30,
                'bit length': 1})
        IDOHeader_dm.addChild(rxidsopvdo1)
        rxidsopvdo1.reference_name = "Data Capable as USB Device"
        rxidsopvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."

        rxidsopvdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Capable as USB Host',
                'offset': 31,
                'bit length': 1})
        IDOHeader_dm.addChild(rxidsopvdo1)
        rxidsopvdo1.reference_name = "Data Capable as USB Host"
        rxidsopvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."


        ProductVendorDefinedObject_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Product Vendor Defined Object',
                                                         'offset': 64,
                                                         'bit length': 104})
        ReceivedSOPVDO_dm.addChild(ProductVendorDefinedObject_dm)

        rxidsopvdo3 = register_class.cHexDMTerminator(self,
                {'name': 'BCD Device',
                'offset': 0,
                'bit length': 16})
        ProductVendorDefinedObject_dm.addChild(rxidsopvdo3)
        rxidsopvdo3.reference_name = "BCD Device"
        rxidsopvdo3.help = "Product VDO. The third Data Object for Discover Identity response."

        rxidsopvdo3 = register_class.cHexDMTerminator(self,
                {'name': 'USB Product ID',
                'offset': 16,
                'bit length': 16})
        ProductVendorDefinedObject_dm.addChild(rxidsopvdo3)
        rxidsopvdo3.reference_name = "USB Product ID"
        rxidsopvdo3.help = "Product VDO. The third Data Object for Discover Identity response."


        UFPIDOVDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'UFP IDO VDO#5',
                                                         'offset': 128,
                                                         'bit length': 168})
        ReceivedSOPVDO_dm.addChild(UFPIDOVDO5_dm)

        rxidsopvdo5 = register_class.cHexDMTerminator(self,
                {'name': 'RX ID SOP VDO 5',
                'offset': 0,
                'bit length': 32})
        UFPIDOVDO5_dm.addChild(rxidsopvdo5)
        rxidsopvdo5.reference_name = "RX ID SOP VDO 5"
        rxidsopvdo5.help = "5th VDO. The fifth Data Object for Discover Identity response is context-specific."


        UFPIDOVDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'UFP IDO VDO#6',
                                                         'offset': 160,
                                                         'bit length': 200})
        ReceivedSOPVDO_dm.addChild(UFPIDOVDO6_dm)

        rxidsopvdo6 = register_class.cHexDMTerminator(self,
                {'name': 'RX ID SOP VDO 6',
                'offset': 0,
                'bit length': 32})
        UFPIDOVDO6_dm.addChild(rxidsopvdo6)
        rxidsopvdo6.reference_name = "RX ID SOP VDO 6"
        rxidsopvdo6.help = "6th VDO. The sixth Data Object for Discover Identity response is context-specific."

        update_function = get_updater_function("rxidentitysop_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class crxidentitysopp_0x49_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Received SOP Prime Identity Data Object',
                                           'address': 0x49,
                                           'byte length': 25,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received SOP Prime Identity Data Object',
                                                         'offset': 0,
                                                         'bit length': 200})

        VDOConfiguration_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'VDO Configuration',
                                                         'offset': 0,
                                                         'bit length': 14})
        self.dataModel.addChild(VDOConfiguration_dm)


        NumberofvalidVDOs_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Number of valid VDOs',
                                                         'offset': 0,
                                                         'bit length': 3})
        VDOConfiguration_dm.addChild(NumberofvalidVDOs_dm)

        numvalidvdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid VDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        NumberofvalidVDOs_dm.addChild(numvalidvdos)
        numvalidvdos.reference_name = "Number Valid VDOs"
        numvalidvdos.help = "Number of valid VDOs in this register. (Max of 6)"
        numvalidvdos.setMaxValue(6)
        numvalidvdos.setMinValue(0)


        SOPPrimeMessageSource_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'SOP Prime Message Source',
                                                         'offset': 6,
                                                         'bit length': 8})
        VDOConfiguration_dm.addChild(SOPPrimeMessageSource_dm)

        responsetype = register_class.cListDMTerminator(self,
                {'name': 'Response Type',
                    'offset': 0,
                    'bit length': 2})
        responsetype.setReportList(["SOP' Discover Identity request not sent or pending", 'Responder ACK received', 'Responder NAK received or response timeout', 'Responder BUSY received (PD Controller will retry)'])
        SOPPrimeMessageSource_dm.addChild(responsetype)
        responsetype.reference_name = "Response Type"
        responsetype.help = "Type of response received."
        responsetype.setMaxValue(3)

        ReceivedSOPPrimeVDO_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received SOP Prime VDO',
                                                         'offset': 8,
                                                         'bit length': 368})
        self.dataModel.addChild(ReceivedSOPPrimeVDO_dm)


        CableVendorDefinedObject_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Cable Vendor Defined Object',
                                                         'offset': 96,
                                                         'bit length': 136})
        ReceivedSOPPrimeVDO_dm.addChild(CableVendorDefinedObject_dm)

        rxidsoppvdo4 = register_class.cListDMTerminator(self,
                {'name': 'USB Highest Speed',
                    'offset': 0,
                    'bit length': 3})
        rxidsoppvdo4.setReportList(['USB2', 'USB3.2 Gen1', 'USB3.2 Gen2', 'USB4 Gen3', 'USB4 Gen4'])
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "USB Highest Speed"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(4)

        rxidsoppvdo4 = register_class.cListDMTerminator(self,
                {'name': 'SOPdoubleprime Controller Present',
                    'offset': 3,
                    'bit length': 1})
        rxidsoppvdo4.setReportList(['No Controller Preset', 'Controller Present'])
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "SOPdoubleprime Controller Present"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(1)

        rxidsoppvdo4 = register_class.cListDMTerminator(self,
                {'name': 'Vbus Through Cable',
                    'offset': 4,
                    'bit length': 1})
        rxidsoppvdo4.setReportList(['No', 'Yes'])
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "Vbus Through Cable"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(1)

        rxidsoppvdo4 = register_class.cListDMTerminator(self,
                {'name': 'Vbus Current Handling Capability',
                    'offset': 5,
                    'bit length': 2})
        rxidsoppvdo4.setReportList(['TypeC Default Current', '1.5A', '3A', 'Reserved'])
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "Vbus Current Handling Capability"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(3)

        rxidsoppvdo4 = register_class.cListDMTerminator(self,
                {'name': 'SBU Type',
                    'offset': 7,
                    'bit length': 1})
        rxidsoppvdo4.setReportList(['SBU Passive', 'SBU Active'])
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "SBU Type"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(1)

        rxidsoppvdo4 = register_class.cListDMTerminator(self,
                {'name': 'SBU Supported',
                    'offset': 8,
                    'bit length': 1})
        rxidsoppvdo4.setReportList(['SBU Connection Supported', 'SBU Connections not Supported'])
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "SBU Supported"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(1)

        rxidsoppvdo4 = register_class.cListDMTerminator(self,
                {'name': 'Maximum Vbus Voltage',
                    'offset': 9,
                    'bit length': 2})
        rxidsoppvdo4.setReportList(['20V', '30V', '40V', '50V'])
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "Maximum Vbus Voltage"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(3)

        rxidsoppvdo4 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Cable Termination Type',
                                                      'offset': 11,
                                                      'bit length': 2})
        rxidsoppvdo4.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'One end Active, one end passive, VCONN required'), (3, 'Both ends Active, VCONN required')]))
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "Cable Termination Type"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(3)

        rxidsoppvdo4 = register_class.cListDMTerminator(self,
                {'name': 'Cable Latency',
                    'offset': 13,
                    'bit length': 4})
        rxidsoppvdo4.setReportList(['Reserved', 'Less than 10ns', '10ns to 20ns', '20ns to 30ns', '30ns to 40ns', '40ns to 50ns', '50ns to 60ns', '60ns to 70ns', '100ns', '200ns', '300ns'])
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "Cable Latency"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(10)

        rxidsoppvdo4 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Connector Type',
                                                      'offset': 18,
                                                      'bit length': 2})
        rxidsoppvdo4.setReportDict(OrderedDict([(0, 'Reserved'), (2, 'Type C'), (3, 'Captive')]))
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "Connector Type"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."
        rxidsoppvdo4.setMaxValue(3)

        rxidsoppvdo4 = register_class.cHexDMTerminator(self,
                {'name': 'VDO Version',
                'offset': 21,
                'bit length': 3})
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "VDO Version"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."

        rxidsoppvdo4 = register_class.cHexDMTerminator(self,
                {'name': 'Firmware Version',
                'offset': 24,
                'bit length': 4})
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "Firmware Version"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."

        rxidsoppvdo4 = register_class.cHexDMTerminator(self,
                {'name': 'Hardware Version',
                'offset': 28,
                'bit length': 4})
        CableVendorDefinedObject_dm.addChild(rxidsoppvdo4)
        rxidsoppvdo4.reference_name = "Hardware Version"
        rxidsoppvdo4.help = "4th VDO. The fourth Data Object for Discover Identity response is context-specific as defined in USB PD."


        CertificationTestID_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Certification Test ID',
                                                         'offset': 32,
                                                         'bit length': 72})
        ReceivedSOPPrimeVDO_dm.addChild(CertificationTestID_dm)

        rxidsoppvdo2 = register_class.cHexDMTerminator(self,
                {'name': 'RX ID SOPPrime VDO 2',
                'offset': 0,
                'bit length': 32})
        CertificationTestID_dm.addChild(rxidsoppvdo2)
        rxidsoppvdo2.reference_name = "RX ID SOPPrime VDO 2"
        rxidsoppvdo2.help = "Cert Stat VDO. The second Data Object for Discover Identity response."


        IDOHeader_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'IDO Header',
                                                         'offset': 0,
                                                         'bit length': 40})
        ReceivedSOPPrimeVDO_dm.addChild(IDOHeader_dm)

        rxidsoppvdo1 = register_class.cHexDMTerminator(self,
                {'name': 'USB Vendor ID',
                'offset': 0,
                'bit length': 16})
        IDOHeader_dm.addChild(rxidsoppvdo1)
        rxidsoppvdo1.reference_name = "USB Vendor ID"
        rxidsoppvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."

        rxidsoppvdo1 = register_class.cListDMTerminator(self,
                {'name': 'Product Type (DFP)',
                    'offset': 23,
                    'bit length': 3})
        rxidsoppvdo1.setReportList(['Undefined', 'HUB', 'Host', 'Brick', 'Alternate Mode Controller', 'Unknow(0x5)', 'Unknow(0x6)', 'Unknow(0x7)'])
        IDOHeader_dm.addChild(rxidsoppvdo1)
        rxidsoppvdo1.reference_name = "Product Type (DFP)"
        rxidsoppvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."
        rxidsoppvdo1.setMaxValue(7)

        rxidsoppvdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Modal Operation Supported',
                'offset': 26,
                'bit length': 1})
        IDOHeader_dm.addChild(rxidsoppvdo1)
        rxidsoppvdo1.reference_name = "Modal Operation Supported"
        rxidsoppvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."

        rxidsoppvdo1 = register_class.cListDMTerminator(self,
                {'name': 'Product Type (UFP)',
                    'offset': 27,
                    'bit length': 3})
        rxidsoppvdo1.setReportList(['Undefined', 'HUB', 'Peripheral', 'Passive Cable', 'Active Cable', 'Alternate Mode Adapter', 'Power Bric'])
        IDOHeader_dm.addChild(rxidsoppvdo1)
        rxidsoppvdo1.reference_name = "Product Type (UFP)"
        rxidsoppvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."
        rxidsoppvdo1.setMaxValue(6)

        rxidsoppvdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Capable as USB Device',
                'offset': 30,
                'bit length': 1})
        IDOHeader_dm.addChild(rxidsoppvdo1)
        rxidsoppvdo1.reference_name = "Data Capable as USB Device"
        rxidsoppvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."

        rxidsoppvdo1 = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Capable as USB Host',
                'offset': 31,
                'bit length': 1})
        IDOHeader_dm.addChild(rxidsoppvdo1)
        rxidsoppvdo1.reference_name = "Data Capable as USB Host"
        rxidsoppvdo1.help = "ID Header VDO. The first Data Object in Discover Identity response."


        ProductVendorDefinedObject_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Product Vendor Defined Object',
                                                         'offset': 64,
                                                         'bit length': 104})
        ReceivedSOPPrimeVDO_dm.addChild(ProductVendorDefinedObject_dm)

        rxidsoppvdo3 = register_class.cHexDMTerminator(self,
                {'name': 'BCD Device',
                'offset': 0,
                'bit length': 16})
        ProductVendorDefinedObject_dm.addChild(rxidsoppvdo3)
        rxidsoppvdo3.reference_name = "BCD Device"
        rxidsoppvdo3.help = "Product VDO. The third Data Object for Discover Identity response."

        rxidsoppvdo3 = register_class.cHexDMTerminator(self,
                {'name': 'USB Product ID',
                'offset': 16,
                'bit length': 16})
        ProductVendorDefinedObject_dm.addChild(rxidsoppvdo3)
        rxidsoppvdo3.reference_name = "USB Product ID"
        rxidsoppvdo3.help = "Product VDO. The third Data Object for Discover Identity response."


        VDO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'VDO#5',
                                                         'offset': 128,
                                                         'bit length': 168})
        ReceivedSOPPrimeVDO_dm.addChild(VDO5_dm)

        rxidsoppvdo5 = register_class.cHexDMTerminator(self,
                {'name': 'RX ID SOPPrime VDO 5',
                'offset': 0,
                'bit length': 32})
        VDO5_dm.addChild(rxidsoppvdo5)
        rxidsoppvdo5.reference_name = "RX ID SOPPrime VDO 5"
        rxidsoppvdo5.help = "5th VDO. The fifth Data Object for Discover Identity response is context-specific."


        VDO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'VDO#6',
                                                         'offset': 160,
                                                         'bit length': 200})
        ReceivedSOPPrimeVDO_dm.addChild(VDO6_dm)

        rxidsoppvdo6 = register_class.cHexDMTerminator(self,
                {'name': 'RX ID SOPPrime VDO 6',
                'offset': 0,
                'bit length': 32})
        VDO6_dm.addChild(rxidsoppvdo6)
        rxidsoppvdo6.reference_name = "RX ID SOPPrime VDO 6"
        rxidsoppvdo6.help = "6th VDO. The sixth Data Object for Discover Identity response is context-specific."

        update_function = get_updater_function("rxidentitysopp_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cuservidconfig_0x4a_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'User Alternate Mode Configuration',
                                           'address': 0x4a,
                                           'byte length': 63,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'User Alternate Mode Configuration',
                                                         'offset': 0,
                                                         'bit length': 504})

        GeneralSettings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'General Settings',
                                                         'offset': 0,
                                                         'bit length': 57})
        self.dataModel.addChild(GeneralSettings_dm)

        uservidenabled = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Enabled',
                'offset': 0,
                'bit length': 1})
        GeneralSettings_dm.addChild(uservidenabled)
        uservidenabled.reference_name = "USVID Enabled"
        uservidenabled.help = "Assert this bit to enable User VID."

        tipdioenable = register_class.cBooleanDMTerminator(self,
                {'name': 'TI PDIO Enabled',
                'offset': 1,
                'bit length': 1})
        GeneralSettings_dm.addChild(tipdioenable)
        tipdioenable.reference_name = "TI PDIO Enabled"
        tipdioenable.help = "Enable TI PDIO mode. When this bit is asserted, the PD controller will include a 32-bit VDO as part of the Enter Mode command it sends to the Port Partner upon entry into UserMode1."
        tipdioenable.hide()

        useraltmodesvidvalue = register_class.cHexDMTerminator(self,
                {'name': 'User ALT Mode SVID Value',
                'offset': 16,
                'bit length': 16})
        GeneralSettings_dm.addChild(useraltmodesvidvalue)
        useraltmodesvidvalue.reference_name = "User ALT Mode SVID Value"
        useraltmodesvidvalue.help = "User VID"

        usermode1enabled = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 1 Enabled',
                'offset': 32,
                'bit length': 1})
        GeneralSettings_dm.addChild(usermode1enabled)
        usermode1enabled.reference_name = "User Mode 1 Enabled"
        usermode1enabled.help = "Assert this bit to enable User VID mode 1."

        usermode2enabled = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 2 Enabled',
                'offset': 40,
                'bit length': 1})
        GeneralSettings_dm.addChild(usermode2enabled)
        usermode2enabled.reference_name = "User Mode 2 Enabled"
        usermode2enabled.help = "Assert this bit to enable User VID mode 2."

        usermode3enabled = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 3 Enabled',
                'offset': 48,
                'bit length': 1})
        GeneralSettings_dm.addChild(usermode3enabled)
        usermode3enabled.reference_name = "User Mode 3 Enabled"
        usermode3enabled.help = "Assert this bit to enable User VID mode 3."

        usermode4enabled = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 4 Enabled',
                'offset': 56,
                'bit length': 1})
        GeneralSettings_dm.addChild(usermode4enabled)
        usermode4enabled.reference_name = "User Mode 4 Enabled"
        usermode4enabled.help = "Assert this bit to enable User VID mode 4."

        UserAlternateMode1Settings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'User Alternate Mode #1 Settings',
                                                         'offset': 64,
                                                         'bit length': 192})
        self.dataModel.addChild(UserAlternateMode1Settings_dm)

        usermode1automodeentryallowed = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 1 Auto Entry Allowed',
                'offset': 0,
                'bit length': 1})
        UserAlternateMode1Settings_dm.addChild(usermode1automodeentryallowed)
        usermode1automodeentryallowed.reference_name = "User Mode 1 Auto Entry Allowed"
        usermode1automodeentryallowed.help = "Enable auto-entry for User VID mode 1."

        usermode1autosendunstrcvdm = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 1 Auto Send Unstruct VDM',
                'offset': 32,
                'bit length': 1})
        UserAlternateMode1Settings_dm.addChild(usermode1autosendunstrcvdm)
        usermode1autosendunstrcvdm.reference_name = "User Mode 1 Auto Send Unstruct VDM"
        usermode1autosendunstrcvdm.help = "Enable auto-sending of UVDM for User VID mode 1."

        usermode1loadappconfigdata = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 1 Load Config Data',
                'offset': 64,
                'bit length': 1})
        UserAlternateMode1Settings_dm.addChild(usermode1loadappconfigdata)
        usermode1loadappconfigdata.reference_name = "User Mode 1 Load Config Data"
        usermode1loadappconfigdata.help = "Load App Config upon entry to User VID mode 1. Assert this bit to load application data upon entry to User VID mode 1."

        useraltmodemode1value = register_class.cHexDMTerminator(self,
                {'name': 'User ALT Mode 1 Value',
                'offset': 96,
                'bit length': 32})
        UserAlternateMode1Settings_dm.addChild(useraltmodemode1value)
        useraltmodemode1value.reference_name = "User ALT Mode 1 Value"
        useraltmodemode1value.help = "User VID mode 1 name."

        UserAlternateMode2Settings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'User Alternate Mode #2 Settings',
                                                         'offset': 72,
                                                         'bit length': 224})
        self.dataModel.addChild(UserAlternateMode2Settings_dm)

        usermode2automodeentryallowed = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 2 Auto Entry Allowed',
                'offset': 0,
                'bit length': 1})
        UserAlternateMode2Settings_dm.addChild(usermode2automodeentryallowed)
        usermode2automodeentryallowed.reference_name = "User Mode 2 Auto Entry Allowed"
        usermode2automodeentryallowed.help = "Enable auto-entry for User VID mode 2."

        usermode2autosendunstrcvdm = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 2 Auto Send Unstruct VDM',
                'offset': 32,
                'bit length': 1})
        UserAlternateMode2Settings_dm.addChild(usermode2autosendunstrcvdm)
        usermode2autosendunstrcvdm.reference_name = "User Mode 2 Auto Send Unstruct VDM"
        usermode2autosendunstrcvdm.help = "Enable auto-sending of UVDM for User VID mode 2."

        usermode2loadappconfigdata = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 2 Load Config Data',
                'offset': 64,
                'bit length': 1})
        UserAlternateMode2Settings_dm.addChild(usermode2loadappconfigdata)
        usermode2loadappconfigdata.reference_name = "User Mode 2 Load Config Data"
        usermode2loadappconfigdata.help = "Load App Config upon entry to User VID mode 2. Assert this bit to load application data upon entry to User VID mode 2."

        useraltmodemode2value = register_class.cHexDMTerminator(self,
                {'name': 'User ALT Mode 2 Value',
                'offset': 120,
                'bit length': 32})
        UserAlternateMode2Settings_dm.addChild(useraltmodemode2value)
        useraltmodemode2value.reference_name = "User ALT Mode 2 Value"
        useraltmodemode2value.help = "User VID mode 2 name."

        UserAlternateMode3Settings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'User Alternate Mode #3 Settings',
                                                         'offset': 80,
                                                         'bit length': 256})
        self.dataModel.addChild(UserAlternateMode3Settings_dm)

        usermode3automodeentryallowed = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 3 Auto Entry Allowed',
                'offset': 0,
                'bit length': 1})
        UserAlternateMode3Settings_dm.addChild(usermode3automodeentryallowed)
        usermode3automodeentryallowed.reference_name = "User Mode 3 Auto Entry Allowed"
        usermode3automodeentryallowed.help = "Enable auto-entry for User VID mode 3."

        usermode3autosendunstrcvdm = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 3 Auto Send Unstruct VDM',
                'offset': 32,
                'bit length': 1})
        UserAlternateMode3Settings_dm.addChild(usermode3autosendunstrcvdm)
        usermode3autosendunstrcvdm.reference_name = "User Mode 3 Auto Send Unstruct VDM"
        usermode3autosendunstrcvdm.help = "Enable auto-sending of UVDM for User VID mode 3."

        usermode3loadappconfigdata = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 3 Load Config Data',
                'offset': 64,
                'bit length': 1})
        UserAlternateMode3Settings_dm.addChild(usermode3loadappconfigdata)
        usermode3loadappconfigdata.reference_name = "User Mode 3 Load Config Data"
        usermode3loadappconfigdata.help = "Load App Config upon entry to User VID mode 3. Assert this bit to load application data upon entry to User VID mode 3."

        useraltmodemode3value = register_class.cHexDMTerminator(self,
                {'name': 'User ALT Mode 3 Value',
                'offset': 144,
                'bit length': 32})
        UserAlternateMode3Settings_dm.addChild(useraltmodemode3value)
        useraltmodemode3value.reference_name = "User ALT Mode 3 Value"
        useraltmodemode3value.help = "User VID mode 3 name."

        UserAlternateMode4Settings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'User Alternate Mode #4 Settings',
                                                         'offset': 88,
                                                         'bit length': 288})
        self.dataModel.addChild(UserAlternateMode4Settings_dm)

        usermode4automodeentryallowed = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 4 Auto Entry Allowed',
                'offset': 0,
                'bit length': 1})
        UserAlternateMode4Settings_dm.addChild(usermode4automodeentryallowed)
        usermode4automodeentryallowed.reference_name = "User Mode 4 Auto Entry Allowed"
        usermode4automodeentryallowed.help = "Enable auto-entry for User VID mode 4."

        usermode4autosendunstrcvdm = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 4 Auto Send Unstruct VDM',
                'offset': 32,
                'bit length': 1})
        UserAlternateMode4Settings_dm.addChild(usermode4autosendunstrcvdm)
        usermode4autosendunstrcvdm.reference_name = "User Mode 4 Auto Send Unstruct VDM"
        usermode4autosendunstrcvdm.help = "Enable auto-sending of UVDM for User VID mode 4."

        usermode4loadappconfigdata = register_class.cBooleanDMTerminator(self,
                {'name': 'User Mode 4 Load Config Data',
                'offset': 64,
                'bit length': 1})
        UserAlternateMode4Settings_dm.addChild(usermode4loadappconfigdata)
        usermode4loadappconfigdata.reference_name = "User Mode 4 Load Config Data"
        usermode4loadappconfigdata.help = "Load App Config upon entry to User VID mode 4. Assert this bit to load application data upon entry to User VID mode 4."

        useraltmodemode4value = register_class.cHexDMTerminator(self,
                {'name': 'User ALT Mode 4 Value',
                'offset': 168,
                'bit length': 32})
        UserAlternateMode4Settings_dm.addChild(useraltmodemode4value)
        useraltmodemode4value.reference_name = "User ALT Mode 4 Value"
        useraltmodemode4value.help = "User VID mode 4 name."

        UnstructuredVDMSettings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Unstructured VDM Settings',
                                                         'offset': 288,
                                                         'bit length': 504})
        self.dataModel.addChild(UnstructuredVDMSettings_dm)

        usermodeautosendvdodata = register_class.cHexDMTerminator(self,
                {'name': 'User Mode Auto Send VDO Data',
                'offset': 0,
                'bit length': 192})
        UnstructuredVDMSettings_dm.addChild(usermodeautosendvdodata)
        usermodeautosendvdodata.reference_name = "User Mode Auto Send VDO Data"
        usermodeautosendvdodata.help = "Data for UVDM. If auto send unstructured VDM enabled, up to 24 bytes may be sent."

        usermodeautosendvendorusedata = register_class.cHexDMTerminator(self,
                {'name': 'User Mode Auto Send Vendor Use Data',
                'offset': 192,
                'bit length': 14})
        UnstructuredVDMSettings_dm.addChild(usermodeautosendvendorusedata)
        usermodeautosendvendorusedata.reference_name = "User Mode Auto Send Vendor Use Data"
        usermodeautosendvendorusedata.help = "Additional data for UVDM. If auto send unstructured VDM enabled, up to an additional 14 bits may be sent as part of the Unstructured VDM header."

        usermodeautosendvdocount = register_class.cHexDMTerminator(self,
                {'name': 'User Mode Auto Send VDO Count',
                'offset': 208,
                'bit length': 8})
        UnstructuredVDMSettings_dm.addChild(usermodeautosendvdocount)
        usermodeautosendvdocount.reference_name = "User Mode Auto Send VDO Count"
        usermodeautosendvdocount.help = "Number of VDOs in UVDM. If auto send unstructured VDM enabled, number of VDOs to send. (Max of 6)"

        update_function = get_updater_function("uservidconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class crxattentionvdm_0x4e_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Received Attention VDM',
                                           'address': 0x4e,
                                           'byte length': 9,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received Attention VDM',
                                                         'offset': 0,
                                                         'bit length': 72})

        RxAttentionStatus_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Rx Attention Status',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.dataModel.addChild(RxAttentionStatus_dm)

        numvaliddos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid VDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        RxAttentionStatus_dm.addChild(numvaliddos)
        numvaliddos.reference_name = "Number Valid VDOs"
        numvaliddos.help = "Number of valid data objects in this register."
        numvaliddos.setMaxValue(7)
        numvaliddos.setMinValue(0)

        seqnum = register_class.cHexDMTerminator(self,
                {'name': 'Sequence Number',
                'offset': 5,
                'bit length': 3})
        RxAttentionStatus_dm.addChild(seqnum)
        seqnum.reference_name = "Sequence Number"
        seqnum.help = "Sequence number. This field increments by one every time this register is updated, rolls over upon reflow"

        DataObjectReceived_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Data Object Received',
                                                         'offset': 8,
                                                         'bit length': 112})
        self.dataModel.addChild(DataObjectReceived_dm)


        DataObject1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#1',
                                                         'offset': 0,
                                                         'bit length': 40})
        DataObjectReceived_dm.addChild(DataObject1_dm)

        rxvdms1 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDMs 1',
                'offset': 0,
                'bit length': 32})
        DataObject1_dm.addChild(rxvdms1)
        rxvdms1.reference_name = "RX VDMs 1"
        rxvdms1.help = "Structured VDM header. This contains the first Data Object of most recently received Attention SVDM."


        DataObject2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#2',
                                                         'offset': 32,
                                                         'bit length': 72})
        DataObjectReceived_dm.addChild(DataObject2_dm)

        rxvdms2 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDMs 2',
                'offset': 0,
                'bit length': 32})
        DataObject2_dm.addChild(rxvdms2)
        rxvdms2.reference_name = "RX VDMs 2"
        rxvdms2.help = "Second data object. The vendor defined object (VDO) received with the Attention message (if any)."

        update_function = get_updater_function("rxattentionvdm_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class crxothervdm_0x4f_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Received Other VDM',
                                           'address': 0x4f,
                                           'byte length': 29,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received Other VDM',
                                                         'offset': 0,
                                                         'bit length': 232})

        RxVDMStatus_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Rx VDM Status',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.dataModel.addChild(RxVDMStatus_dm)

        numvalidvdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid VDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        RxVDMStatus_dm.addChild(numvalidvdos)
        numvalidvdos.reference_name = "Number Valid VDOs"
        numvalidvdos.setMaxValue(6)
        numvalidvdos.setMinValue(0)

        soptype = register_class.cHexDMTerminator(self,
                {'name': 'SOP Type',
                'offset': 3,
                'bit length': 2})
        RxVDMStatus_dm.addChild(soptype)
        soptype.reference_name = "SOP Type"

        seqnum = register_class.cHexDMTerminator(self,
                {'name': 'Sequence Number',
                'offset': 5,
                'bit length': 3})
        RxVDMStatus_dm.addChild(seqnum)
        seqnum.reference_name = "Sequence Number"

        DataObjectReceived_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Data Object Received',
                                                         'offset': 8,
                                                         'bit length': 432})
        self.dataModel.addChild(DataObjectReceived_dm)


        DataObject1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#1',
                                                         'offset': 0,
                                                         'bit length': 40})
        DataObjectReceived_dm.addChild(DataObject1_dm)

        rxvdms1 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDMs 1',
                'offset': 0,
                'bit length': 32})
        DataObject1_dm.addChild(rxvdms1)
        rxvdms1.reference_name = "RX VDMs 1"
        rxvdms1.help = "First Data Object of most recently received VDM."


        DataObject2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#2',
                                                         'offset': 32,
                                                         'bit length': 72})
        DataObjectReceived_dm.addChild(DataObject2_dm)

        rxvdms2 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDMs 2',
                'offset': 0,
                'bit length': 32})
        DataObject2_dm.addChild(rxvdms2)
        rxvdms2.reference_name = "RX VDMs 2"
        rxvdms2.help = "Second Data Object of most recently received VDM."


        DataObject3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#3',
                                                         'offset': 64,
                                                         'bit length': 104})
        DataObjectReceived_dm.addChild(DataObject3_dm)

        rxvdms3 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDMs 3',
                'offset': 0,
                'bit length': 32})
        DataObject3_dm.addChild(rxvdms3)
        rxvdms3.reference_name = "RX VDMs 3"
        rxvdms3.help = "Third Data Object of most recently received VDM."


        DataObject4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#4',
                                                         'offset': 96,
                                                         'bit length': 136})
        DataObjectReceived_dm.addChild(DataObject4_dm)

        rxvdms4 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDMs 4',
                'offset': 0,
                'bit length': 32})
        DataObject4_dm.addChild(rxvdms4)
        rxvdms4.reference_name = "RX VDMs 4"
        rxvdms4.help = "Fourth Data Object of most recently received VDM."


        DataObject5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#5',
                                                         'offset': 128,
                                                         'bit length': 168})
        DataObjectReceived_dm.addChild(DataObject5_dm)

        rxvdms5 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDMs 5',
                'offset': 0,
                'bit length': 32})
        DataObject5_dm.addChild(rxvdms5)
        rxvdms5.reference_name = "RX VDMs 5"
        rxvdms5.help = "Fifth Data Object of most recently received VDM."


        DataObject6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#6',
                                                         'offset': 160,
                                                         'bit length': 200})
        DataObjectReceived_dm.addChild(DataObject6_dm)

        rxvdms6 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDMs 6',
                'offset': 0,
                'bit length': 32})
        DataObject6_dm.addChild(rxvdms6)
        rxvdms6.reference_name = "RX VDMs 6"
        rxvdms6.help = "Sixth Data Object of most recently received VDM."


        DataObject7_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#7',
                                                         'offset': 192,
                                                         'bit length': 232})
        DataObjectReceived_dm.addChild(DataObject7_dm)

        rxvdms7 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDMs 7',
                'offset': 0,
                'bit length': 32})
        DataObject7_dm.addChild(rxvdms7)
        rxvdms7.reference_name = "RX VDMs 7"
        rxvdms7.help = "Seventh Data Object of most recently received VDM."

        update_function = get_updater_function("rxothervdm_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdatacontrol_0x50_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Data Control',
                                           'address': 0x50,
                                           'byte length': 6,
                                           'permission': 'DRW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Data Control',
                                                         'offset': 0,
                                                         'bit length': 48})

        ThunderboltDataControl_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Thunderbolt Data Control',
                                                         'offset': 0,
                                                         'bit length': 16})
        self.dataModel.addChild(ThunderboltDataControl_dm)

        hostconnected = register_class.cBooleanDMTerminator(self,
                {'name': 'Thunderbolt Host Connected',
                'offset': 0,
                'bit length': 1})
        ThunderboltDataControl_dm.addChild(hostconnected)
        hostconnected.reference_name = "Thunderbolt Host Connected"
        hostconnected.help = "Assert this bit when a TBT host is connected. The TBT controller may also assert this bit to 1 then 0 to force a port disconnect/reconnect."

        softreset = register_class.cBooleanDMTerminator(self,
                {'name': 'Soft Reset',
                'offset': 1,
                'bit length': 1})
        ThunderboltDataControl_dm.addChild(softreset)
        softreset.reference_name = "Soft Reset"
        softreset.help = "When set, causes a soft-reset of PD Controller. Equivalent to Gaid 4CC."

        interruptack = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt ACK',
                'offset': 2,
                'bit length': 1})
        ThunderboltDataControl_dm.addChild(interruptack)
        interruptack.reference_name = "Interrupt ACK"
        interruptack.help = "When set, causes INT_MASK2 value to be written to INT_CLEAR2 (clearing all interrupt events)."

        dphostconnected = register_class.cBooleanDMTerminator(self,
                {'name': 'DP Host Connected',
                'offset': 4,
                'bit length': 1})
        ThunderboltDataControl_dm.addChild(dphostconnected)
        dphostconnected.reference_name = "DP Host Connected"

        usbhostconnected = register_class.cBooleanDMTerminator(self,
                {'name': 'USB Host Connected',
                'offset': 5,
                'bit length': 1})
        ThunderboltDataControl_dm.addChild(usbhostconnected)
        usbhostconnected.reference_name = "USB Host Connected"

        datareset = register_class.cBooleanDMTerminator(self,
                {'name': 'Data Reset',
                'offset': 6,
                'bit length': 1})
        ThunderboltDataControl_dm.addChild(datareset)
        datareset.reference_name = "Data Reset"
        datareset.help = "If asserted the PD controller will initiate Data Reset process."

        powerreset = register_class.cBooleanDMTerminator(self,
                {'name': 'Power Reset',
                'offset': 7,
                'bit length': 1})
        ThunderboltDataControl_dm.addChild(powerreset)
        powerreset.reference_name = "Power Reset"
        powerreset.help = "If asserted the PD controller will initiate Error Recovery on the connector."

        writetoretimer = register_class.cBooleanDMTerminator(self,
                {'name': 'Write to Retimer',
                'offset': 12,
                'bit length': 1})
        ThunderboltDataControl_dm.addChild(writetoretimer)
        writetoretimer.reference_name = "Write to Retimer"
        writetoretimer.help = "If asserted the PD controller will write bytes 3-6 to to Retimer on I2C3m."

        irqack = register_class.cBooleanDMTerminator(self,
                {'name': 'IRQ ACK',
                'offset': 13,
                'bit length': 1})
        ThunderboltDataControl_dm.addChild(irqack)
        irqack.reference_name = "IRQ ACK"
        irqack.help = "Writing this bit as 1 will clear DATA_STATUS.HpdIrqSticky after a delay#ph ishcondition=legacy=filter1# of DELAY_CONFIG.HpdDelay#/ph##filter_filter21# of DELAY_CONFIG.HpdDelay#/ph#."

        hpdirqsticky = register_class.cListDMTerminator(self,
                {'name': 'HPD IRQ Sticky',
                    'offset': 14,
                    'bit length': 1})
        hpdirqsticky.setReportList(['No HPD_IRQ_ACK', 'HPD_IRQ_ACK'])
        ThunderboltDataControl_dm.addChild(hpdirqsticky)
        hpdirqsticky.reference_name = "HPD IRQ Sticky"
        hpdirqsticky.help = "HPD IRQ from DP Sink connection to Titan Ridge to PD Controller. Cleared when DATA_STATUS.HPD_IRQ_Sticky. Used only for TBT devices. Not used for TBT hosts."
        hpdirqsticky.setMaxValue(1)

        hpdlevel = register_class.cListDMTerminator(self,
                {'name': 'HPD Level',
                    'offset': 15,
                    'bit length': 1})
        hpdlevel.setReportList(['HPD low', 'HPD high'])
        ThunderboltDataControl_dm.addChild(hpdlevel)
        hpdlevel.reference_name = "HPD Level"
        hpdlevel.help = "HPD level from DP Sink connection to Titan Ridge to PD Controller. Used only for TBTdevices.Not used for TBT hosts."
        hpdlevel.setMaxValue(1)

        RetimerDebugSettings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Retimer Debug Settings',
                                                         'offset': 16,
                                                         'bit length': 48})
        self.dataModel.addChild(RetimerDebugSettings_dm)

        ampicl = register_class.cHexDMTerminator(self,
                {'name': 'AMPICL',
                'offset': 0,
                'bit length': 2})
        RetimerDebugSettings_dm.addChild(ampicl)
        ampicl.reference_name = "AMPICL"

        emphasisicl = register_class.cHexDMTerminator(self,
                {'name': 'EMPHASISICL',
                'offset': 2,
                'bit length': 2})
        RetimerDebugSettings_dm.addChild(emphasisicl)
        emphasisicl.reference_name = "EMPHASISICL"

        requestedwindowsize = register_class.cHexDMTerminator(self,
                {'name': 'Requested Window Size',
                'offset': 4,
                'bit length': 2})
        RetimerDebugSettings_dm.addChild(requestedwindowsize)
        requestedwindowsize.reference_name = "Requested Window Size"

        tpstype = register_class.cHexDMTerminator(self,
                {'name': 'TPS Type',
                'offset': 6,
                'bit length': 2})
        RetimerDebugSettings_dm.addChild(tpstype)
        tpstype.reference_name = "TPS Type"

        debugrxlocked = register_class.cBooleanDMTerminator(self,
                {'name': 'Debug RX Locked',
                'offset': 15,
                'bit length': 1})
        RetimerDebugSettings_dm.addChild(debugrxlocked)
        debugrxlocked.reference_name = "Debug RX Locked"

        ampdb = register_class.cHexDMTerminator(self,
                {'name': 'AMPDB',
                'offset': 16,
                'bit length': 2})
        RetimerDebugSettings_dm.addChild(ampdb)
        ampdb.reference_name = "AMPDB"

        emphasisdb = register_class.cHexDMTerminator(self,
                {'name': 'EMPHASISDB',
                'offset': 18,
                'bit length': 2})
        RetimerDebugSettings_dm.addChild(emphasisdb)
        emphasisdb.reference_name = "EMPHASISDB"

        freq = register_class.cHexDMTerminator(self,
                {'name': 'Freq',
                'offset': 20,
                'bit length': 2})
        RetimerDebugSettings_dm.addChild(freq)
        freq.reference_name = "Freq"

        lanecount = register_class.cHexDMTerminator(self,
                {'name': 'Lane Count',
                'offset': 22,
                'bit length': 2})
        RetimerDebugSettings_dm.addChild(lanecount)
        lanecount.reference_name = "Lane Count"

        additionalskew = register_class.cHexDMTerminator(self,
                {'name': 'Additional Skew',
                'offset': 24,
                'bit length': 3})
        RetimerDebugSettings_dm.addChild(additionalskew)
        additionalskew.reference_name = "Additional Skew"

        debugmodetype = register_class.cHexDMTerminator(self,
                {'name': 'Debug Mode Type',
                'offset': 28,
                'bit length': 2})
        RetimerDebugSettings_dm.addChild(debugmodetype)
        debugmodetype.reference_name = "Debug Mode Type"

        enable = register_class.cBooleanDMTerminator(self,
                {'name': 'Enable',
                'offset': 30,
                'bit length': 1})
        RetimerDebugSettings_dm.addChild(enable)
        enable.reference_name = "Enable"

        tracemode = register_class.cBooleanDMTerminator(self,
                {'name': 'Trace Mode',
                'offset': 31,
                'bit length': 1})
        RetimerDebugSettings_dm.addChild(tracemode)
        tracemode.reference_name = "Trace Mode"

        update_function = get_updater_function("datacontrol_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdpsidconfig_0x51_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Display Port Configuration',
                                           'address': 0x51,
                                           'byte length': 6,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Display Port Configuration',
                                                         'offset': 0,
                                                         'bit length': 48})
        enabledpsid = register_class.cBooleanDMTerminator(self,
                {'name': 'Enable DP SID',
                'offset': 0,
                'bit length': 1})
        self.dataModel.addChild(enabledpsid)
        enabledpsid.reference_name = "Enable DP SID"
        enabledpsid.help = "Assert this bit to enable DisplayPort SVID."
        dpmode = register_class.cBooleanDMTerminator(self,
                {'name': 'DP Mode',
                'offset': 1,
                'bit length': 1})
        self.dataModel.addChild(dpmode)
        dpmode.reference_name = "DP Mode"
        dpmode.help = "Assert this bit to enable DisplayPort Alternate mode."
        dpportcapability = register_class.cListDMTerminator(self,
                {'name': 'DP Port Capability',
                    'offset': 8,
                    'bit length': 2})
        dpportcapability.setReportList(['Reserved', 'UFP_D-capable (including Branch device)', 'DFP_D-capable (including Branch device)', 'Reserved_1'])
        self.dataModel.addChild(dpportcapability)
        dpportcapability.reference_name = "DP Port Capability"
        dpportcapability.help = "Display port capabilities"
        dpportcapability.setMaxValue(3)
        dptransportsignaling = register_class.cListDMTerminator(self,
                {'name': 'DP Transport Signalling',
                    'offset': 10,
                    'bit length': 4})
        dptransportsignaling.setReportList(['Supports USB signaling rate and electrical specification', 'Supports DP signaling rates and electrical specification'])
        self.dataModel.addChild(dptransportsignaling)
        dptransportsignaling.reference_name = "DP Transport Signalling"
        dptransportsignaling.help = "Signaling for transport of DisplayPort protocol."
        dptransportsignaling.setMaxValue(1)
        usb2signallingnotused = register_class.cListDMTerminator(self,
                {'name': 'USB2 Signalling Not Used',
                    'offset': 15,
                    'bit length': 1})
        usb2signallingnotused.setReportList(['May be required', 'Not required'])
        self.dataModel.addChild(usb2signallingnotused)
        usb2signallingnotused.reference_name = "USB2 Signalling Not Used"
        usb2signallingnotused.help = "USB r2.0 signaling requirement on A6 - A7 or B6 - B7 (D+/D-) while in DP configuration"
        usb2signallingnotused.setMaxValue(1)
        dfpdpinassignment = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'DFPD Pin Assignment',
                                                             'offset': 16,
                                                             'bit length': 8})
        dfpdpinassignment.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dfpdpinassignment.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dfpdpinassignment.setSpacing(6)
        self.dataModel.addChild(dfpdpinassignment)
        dfpdpinassignment.reference_name = "DFPD Pin Assignment"
        dfpdpinassignment.help = "DFP_D Pin Assignments Supported. Each bit corresponds to an allowed pin assignment. Multiple pin assignments may be allowed."
        ufpdpinassignment = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'UFPD Pin Assignment',
                                                             'offset': 24,
                                                             'bit length': 8})
        ufpdpinassignment.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        ufpdpinassignment.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        ufpdpinassignment.setSpacing(6)
        self.dataModel.addChild(ufpdpinassignment)
        ufpdpinassignment.reference_name = "UFPD Pin Assignment"
        ufpdpinassignment.help = "UFP_D Pin Assignments Supported. Each bit corresponds to an allowed pin assignment. Multiple pin assignments may be allowed."
        multifunctionpreferred = register_class.cBooleanDMTerminator(self,
                {'name': 'Multi Function Preferred',
                'offset': 32,
                'bit length': 1})
        self.dataModel.addChild(multifunctionpreferred)
        multifunctionpreferred.reference_name = "Multi Function Preferred"
        multifunctionpreferred.help = "Assert this bit if multi-function is preferred."
        dfpdufpdconnected = register_class.cListDMTerminator(self,
                {'name': 'DFPD_UFPD Connected',
                    'offset': 35,
                    'bit length': 2})
        dfpdufpdconnected.setReportList(['Neither UFP_D nor DFP_D is connected', 'DFP_D is connected', 'UFP_D is connected', 'Both UFP_D and DFP_D is connected'])
        self.dataModel.addChild(dfpdufpdconnected)
        dfpdufpdconnected.reference_name = "DFPD_UFPD Connected"
        dfpdufpdconnected.help = "This field indicates the status of the connection."
        dfpdufpdconnected.setMaxValue(3)
        dpvdoversion = register_class.cListDMTerminator(self,
                {'name': 'DP VDO Version',
                    'offset': 37,
                    'bit length': 2})
        dpvdoversion.setReportList(['DP v2.0', 'DP v2.1'])
        self.dataModel.addChild(dpvdoversion)
        dpvdoversion.reference_name = "DP VDO Version"
        dpvdoversion.setMaxValue(1)
        dpmodeautoentryallowed = register_class.cBooleanDMTerminator(self,
                {'name': 'DP Mode Auto Entry Allowed',
                'offset': 40,
                'bit length': 1})
        self.dataModel.addChild(dpmodeautoentryallowed)
        dpmodeautoentryallowed.reference_name = "DP Mode Auto Entry Allowed"
        dpmodeautoentryallowed.help = "Assert this bit to enable auto-entry."

        update_function = get_updater_function("dpsidconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctbtconfig_0x52_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Thunderbolt Configuration',
                                           'address': 0x52,
                                           'byte length': 8,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Thunderbolt Configuration',
                                                         'offset': 0,
                                                         'bit length': 64})

        ThunderboltConfigSet_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Thunderbolt Config Set',
                                                         'offset': 1,
                                                         'bit length': 64})
        self.dataModel.addChild(ThunderboltConfigSet_dm)

        thunderboltmodeenabled = register_class.cBooleanDMTerminator(self,
                {'name': 'Thunderbolt Mode Enabled',
                'offset': 0,
                'bit length': 1})
        ThunderboltConfigSet_dm.addChild(thunderboltmodeenabled)
        thunderboltmodeenabled.reference_name = "Thunderbolt Mode Enabled"
        thunderboltmodeenabled.help = "Assert this bit to enable TBT mode. When this bit is asserted The PD Controller as UFP will advertise Thunderbolt Mode. The PD Controller as DFP will negotiate Thunderbolt Mode."

        advertise900maimplicitcontract = register_class.cBooleanDMTerminator(self,
                {'name': 'Advertise 900mA Implicit Contract',
                'offset': 1,
                'bit length': 1})
        ThunderboltConfigSet_dm.addChild(advertise900maimplicitcontract)
        advertise900maimplicitcontract.reference_name = "Advertise 900mA Implicit Contract"

        i2c3configurabledelay = register_class.cScalingDMTerminator(self,
                                                     {'name': 'I2C3 Configurable Delay',
                                                      'offset': 2,
                                                      'bit length': 4})
        i2c3configurabledelay.dictScaleUnits = {' S': 0.5}
        i2c3configurabledelay.defaultUnit = ' S'
        ThunderboltConfigSet_dm.addChild(i2c3configurabledelay)
        i2c3configurabledelay.reference_name = "I2C3 Configurable Delay"
        i2c3configurabledelay.help = "Delay for the Controller I2C commands at power on. Min value is 0 sec and Max Value is 5 sec. (0.5s per LSB)"
        i2c3configurabledelay.setMaxValue(15)
        i2c3configurabledelay.setMinValue(0)

        overridedatastatusforlegacyridge = register_class.cBooleanDMTerminator(self,
                {'name': 'Override DATA_STATUS to be backward compatible with legacy ridge.',
                'offset': 7,
                'bit length': 1})
        ThunderboltConfigSet_dm.addChild(overridedatastatusforlegacyridge)
        overridedatastatusforlegacyridge.reference_name = "Override DATA_STATUS to be backward compatible with legacy ridge."
        overridedatastatusforlegacyridge.help = "Assert this bit to compatible with legacy ridge systems Titan Ridge or Alpine Ridge."
        overridedatastatusforlegacyridge.hide()

        tbtemarkeroverride = register_class.cListDMTerminator(self,
                {'name': 'TBT Emarker Override',
                    'offset': 8,
                    'bit length': 1})
        tbtemarkeroverride.setReportList(['PD Controller prevents Thunderbolt Mode entry', 'PD Controller allows Thunderbolt Mode entry'])
        ThunderboltConfigSet_dm.addChild(tbtemarkeroverride)
        tbtemarkeroverride.reference_name = "TBT Emarker Override"
        tbtemarkeroverride.help = "Configuration for non-responsive Cable Plug."
        tbtemarkeroverride.setMaxValue(1)

        anminpowerrequired = register_class.cListDMTerminator(self,
                {'name': 'AN Min Power Required',
                    'offset': 9,
                    'bit length': 1})
        anminpowerrequired.setReportList(['TBT Mode can be configured regardless of power contract', 'PD Controller will enter TBT Mode regardless of power contract'])
        ThunderboltConfigSet_dm.addChild(anminpowerrequired)
        anminpowerrequired.reference_name = "AN Min Power Required"
        anminpowerrequired.help = "Power required for TBT mode entry."
        anminpowerrequired.setMaxValue(1)

        dualtbtretimerpresent = register_class.cBooleanDMTerminator(self,
                {'name': 'Dual TBT retimer Present',
                'offset': 11,
                'bit length': 1})
        ThunderboltConfigSet_dm.addChild(dualtbtretimerpresent)
        dualtbtretimerpresent.reference_name = "Dual TBT retimer Present"
        dualtbtretimerpresent.help = "Enable second retimer on each port. Assert this bit when there is a second TBT retimer on this port."

        tbtretimerpresent = register_class.cBooleanDMTerminator(self,
                {'name': 'TBT Retimer Present',
                'offset': 12,
                'bit length': 1})
        ThunderboltConfigSet_dm.addChild(tbtretimerpresent)
        tbtretimerpresent.reference_name = "TBT Retimer Present"
        tbtretimerpresent.help = "Enable first retimer on each port. Assert this bit when there is a TBT retimer on this port."

        datastatushpdevents = register_class.cListDMTerminator(self,
                {'name': 'Data Status HPD Events',
                    'offset': 13,
                    'bit length': 1})
        datastatushpdevents.setReportList(['HPD events are reported using the GPIO configured as HPD', 'HPD events are reported in DATA_STATUS.HpdLevel and HpdIrqSticky'])
        ThunderboltConfigSet_dm.addChild(datastatushpdevents)
        datastatushpdevents.reference_name = "Data Status HPD Events"
        datastatushpdevents.help = "This bit controls how HPD events are configured."
        datastatushpdevents.setMaxValue(1)

        retimercompliancesupport = register_class.cBooleanDMTerminator(self,
                {'name': 'Retimer Compliance Support',
                'offset': 14,
                'bit length': 1})
        ThunderboltConfigSet_dm.addChild(retimercompliancesupport)
        retimercompliancesupport.reference_name = "Retimer Compliance Support"
        retimercompliancesupport.help = "If this bit is set to 1b, then asserting the Retimer_SOC_OVR_Force_Power GPIO causes the PD controller to place an attached Intel Retimer into compliance mode. De-asserting the Retimer_SOC_OVR_Force_Power GPIO places the retimer into normal operation."

        vprosupported = register_class.cBooleanDMTerminator(self,
                {'name': 'VPRO Support',
                'offset': 25,
                'bit length': 1})
        ThunderboltConfigSet_dm.addChild(vprosupported)
        vprosupported.reference_name = "VPRO Support"

        thunderboltautoentryallowed = register_class.cBooleanDMTerminator(self,
                {'name': 'Thunderbolt Auto Entry Allowed',
                'offset': 48,
                'bit length': 1})
        ThunderboltConfigSet_dm.addChild(thunderboltautoentryallowed)
        thunderboltautoentryallowed.reference_name = "Thunderbolt Auto Entry Allowed"
        thunderboltautoentryallowed.help = "Assert this bit to enable TBT auto-entry."

        sourcevconndelay = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source VCONN Delay',
                                                      'offset': 55,
                                                      'bit length': 8})
        sourcevconndelay.dictScaleUnits = {' S': 0.01}
        sourcevconndelay.defaultUnit = ' S'
        ThunderboltConfigSet_dm.addChild(sourcevconndelay)
        sourcevconndelay.reference_name = "Source VCONN Delay"
        sourcevconndelay.help = "Configurable delay for BR. (10ms per LSB)"
        sourcevconndelay.setMaxValue(60)
        sourcevconndelay.setMinValue(0)

        ThunderboltConfiguration_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Thunderbolt Configuration',
                                                         'offset': 0,
                                                         'bit length': 1})
        self.dataModel.addChild(ThunderboltConfiguration_dm)

        tbtvidenabled = register_class.cBooleanDMTerminator(self,
                {'name': 'Thunderbolt VID Enabled',
                'offset': 0,
                'bit length': 1})
        ThunderboltConfiguration_dm.addChild(tbtvidenabled)
        tbtvidenabled.reference_name = "Thunderbolt VID Enabled"
        tbtvidenabled.help = "Assert this bit to enable Thunderbolt VID."

        TBTDeviceandAMAResponse_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'TBT Device and AMA Response',
                                                         'offset': 16,
                                                         'bit length': 17})
        self.dataModel.addChild(TBTDeviceandAMAResponse_dm)

        legacytbtadapter = register_class.cListDMTerminator(self,
                {'name': 'Legacy TBT Adapter',
                    'offset': 0,
                    'bit length': 1})
        legacytbtadapter.setReportList(['Is not a Legacy Adapter', 'Is a Legacy Adapter'])
        TBTDeviceandAMAResponse_dm.addChild(legacytbtadapter)
        legacytbtadapter.reference_name = "Legacy TBT Adapter"
        legacytbtadapter.setMaxValue(1)

        update_function = get_updater_function("tbtconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cspecialconfig_0x55_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Special Configuration',
                                           'address': 0x55,
                                           'byte length': 4,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Special Configuration',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()

        SpecialConfiguration_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Special Configuration',
                                                         'offset': 6,
                                                         'bit length': 32})
        self.dataModel.addChild(SpecialConfiguration_dm)

        pheonixsupport = register_class.cBooleanDMTerminator(self,
                {'name': 'Enable Pheonix Support',
                'offset': 0,
                'bit length': 1})
        SpecialConfiguration_dm.addChild(pheonixsupport)
        pheonixsupport.reference_name = "Enable Pheonix Support"

        ovpocperrorrecoverytries = register_class.cHexDMTerminator(self,
                {'name': 'OVP OCP Error Recovery Tries',
                'offset': 8,
                'bit length': 2})
        SpecialConfiguration_dm.addChild(ovpocperrorrecoverytries)
        ovpocperrorrecoverytries.reference_name = "OVP OCP Error Recovery Tries"

        reconfigureapusxtos0transition = register_class.cBooleanDMTerminator(self,
                {'name': 'Reconfigure APU Sx to S0 Transition',
                'offset': 25,
                'bit length': 1})
        SpecialConfiguration_dm.addChild(reconfigureapusxtos0transition)
        reconfigureapusxtos0transition.reference_name = "Reconfigure APU Sx to S0 Transition"

        update_function = get_updater_function("specialconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cprochotconfig_0x56_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Prochot Configuration',
                                           'address': 0x56,
                                           'byte length': 2,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Prochot Configuration',
                                                         'offset': 0,
                                                         'bit length': 16})

        ProchotConfig_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Prochot Config',
                                                         'offset': 0,
                                                         'bit length': 16})
        self.dataModel.addChild(ProchotConfig_dm)

        prochotfilter = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Prochot Filter',
                                                             'offset': 0,
                                                             'bit length': 8})
        prochotfilter.setFlagNameList(['Upon entry into Attached', 'Upon entry into Attached', 'Upon exit from Attached', 'Upon receiving an Accept message (power contract)', 'PR_Swap accepted as source', 'PR_Swap accepted as sink', 'Voltage or current increasing', 'Hard reset as sink'])
        prochotfilter.setFlagMask([1, 1, 1, 1, 1, 1, 1, 1])
        prochotfilter.setSpacing(6)
        ProchotConfig_dm.addChild(prochotfilter)
        prochotfilter.reference_name = "Prochot Filter"
        prochotfilter.help = "Filter for PROCHOT events. Each event can be enabled or disabled individually. These events may happen asynchronously on each port in the PD controller. After the PD controller asserts ProcHot_N_Event, it will continue to assert it until INT_EVENTx.ProcHotNotification=0 or INT_MASKx.ProcHotNotification=0 for x=1 and 2 and for both ports."
        prochotfilter.hide()

        prochotclearconfig = register_class.cListDMTerminator(self,
                {'name': 'Prochot Clear Config',
                    'offset': 12,
                    'bit length': 1})
        prochotclearconfig.setReportList(['De-assert with IRQ', 'Do not de-assert with IRQ'])
        ProchotConfig_dm.addChild(prochotclearconfig)
        prochotclearconfig.reference_name = "Prochot Clear Config"
        prochotclearconfig.help = "Configure ProcHot_N_Event de-assertion."
        prochotclearconfig.hide()
        prochotclearconfig.setMaxValue(1)

        prochotstatus = register_class.cBooleanDMTerminator(self,
                {'name': 'Prochot Status',
                'offset': 13,
                'bit length': 1})
        ProchotConfig_dm.addChild(prochotstatus)
        prochotstatus.reference_name = "Prochot Status"
        prochotstatus.help = "ProcHot_N_Event GPIO status. This bit is asserted when the PD controller is asserting the ProcHot_N_Event GPIO."
        prochotstatus.hide()

        prochotclearstatus = register_class.cBooleanDMTerminator(self,
                {'name': 'Prochot Clear Status',
                'offset': 14,
                'bit length': 1})
        ProchotConfig_dm.addChild(prochotclearstatus)
        prochotclearstatus.reference_name = "Prochot Clear Status"
        prochotclearstatus.help = "De-assert ProcHot_N_Event GPIO. Write this bit as 1 to de-assert the ProcHot_N_Event GPIO."
        prochotclearstatus.hide()

        enableprochothw = register_class.cListDMTerminator(self,
                {'name': 'Enable Prochot HW',
                    'offset': 15,
                    'bit length': 1})
        enableprochothw.setReportList(['Disable fast prochot hardware', 'Enable fast prochot hardware'])
        ProchotConfig_dm.addChild(enableprochothw)
        enableprochothw.reference_name = "Enable Prochot HW"
        enableprochothw.help = "Enable for fast prochot hardware. The PD controller has a hardware feature to ensure that the GPIO is pulled low within 100us of the CC pin going low upon exit from Attached.SNK."
        enableprochothw.setMaxValue(1)

        update_function = get_updater_function("prochotconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cuservidstatus_0x57_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'User VID Status',
                                           'address': 0x57,
                                           'byte length': 2,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'User VID Status',
                                                         'offset': 0,
                                                         'bit length': 16})
        userviddetected = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Detected',
                'offset': 0,
                'bit length': 1})
        self.dataModel.addChild(userviddetected)
        userviddetected.reference_name = "USVID Detected"
        userviddetected.help = "Asserted when a User VID has been detected."
        uservidactive = register_class.cBooleanDMTerminator(self,
                {'name': 'USVID Active',
                'offset': 1,
                'bit length': 1})
        self.dataModel.addChild(uservidactive)
        uservidactive.reference_name = "USVID Active"
        uservidactive.help = "Asserted when a User VID is active."
        userviderrorcode = register_class.cHexDMTerminator(self,
                {'name': 'USVID Error Code',
                'offset': 2,
                'bit length': 3})
        self.dataModel.addChild(userviderrorcode)
        userviderrorcode.reference_name = "USVID Error Code"
        userviderrorcode.help = "Error code"
        mode1status = register_class.cBooleanDMTerminator(self,
                {'name': 'Mode 1 Status',
                'offset': 9,
                'bit length': 1})
        self.dataModel.addChild(mode1status)
        mode1status.reference_name = "Mode 1 Status"
        mode1status.help = "Asserted when Mode1 has been entered."
        mode2status = register_class.cBooleanDMTerminator(self,
                {'name': 'Mode 2 Status',
                'offset': 10,
                'bit length': 1})
        self.dataModel.addChild(mode2status)
        mode2status.reference_name = "Mode 2 Status"
        mode2status.help = "Asserted when Mode2 has been entered."
        mode3status = register_class.cBooleanDMTerminator(self,
                {'name': 'Mode 3 Status',
                'offset': 11,
                'bit length': 1})
        self.dataModel.addChild(mode3status)
        mode3status.reference_name = "Mode 3 Status"
        mode3status.help = "Asserted when Mode3 has been entered."
        mode4status = register_class.cBooleanDMTerminator(self,
                {'name': 'Mode 4 Status',
                'offset': 12,
                'bit length': 1})
        self.dataModel.addChild(mode4status)
        mode4status.reference_name = "Mode 4 Status"
        mode4status.help = "Asserted when Mode4 has been entered."

        update_function = get_updater_function("uservidstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdpsidstatus_0x58_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Display Port Status',
                                           'address': 0x58,
                                           'byte length': 40,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Display Port Status',
                                                         'offset': 0,
                                                         'bit length': 320})

        DPSIDDetected_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP SID Detected',
                                                         'offset': 0,
                                                         'bit length': 1})
        self.dataModel.addChild(DPSIDDetected_dm)

        dpsiddetected = register_class.cListDMTerminator(self,
                {'name': 'DP SID Detected',
                    'offset': 0,
                    'bit length': 1})
        dpsiddetected.setReportList(['DP SID not detected', 'Far-end DFP_U has issued DP SID SVDM or UFP_U has responded with ACK'])
        DPSIDDetected_dm.addChild(dpsiddetected)
        dpsiddetected.reference_name = "DP SID Detected"
        dpsiddetected.help = "Port Partner is Display Port capable. This bit is asserted when UFP_U returns DP SID in Discover SVIDs response or responded with ACK to DP SID SVDM Commands."
        dpsiddetected.setMaxValue(1)

        DPModeActive_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Mode Active',
                                                         'offset': 1,
                                                         'bit length': 2})
        self.dataModel.addChild(DPModeActive_dm)

        dpmodeactive = register_class.cBooleanDMTerminator(self,
                {'name': 'DP Mode Active',
                'offset': 0,
                'bit length': 1})
        DPModeActive_dm.addChild(dpmodeactive)
        dpmodeactive.reference_name = "DP Mode Active"
        dpmodeactive.help = "DP mode entered. This bit is asserted when PD Controller has entered DisplayPort Mode with attached UFP_U."

        DPStatusTX_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Status TX',
                                                         'offset': 8,
                                                         'bit length': 17})
        self.dataModel.addChild(DPStatusTX_dm)

        dpstatustx = register_class.cListDMTerminator(self,
                {'name': 'Connection Status',
                    'offset': 0,
                    'bit length': 2})
        dpstatustx.setReportList(['Neither DFP_D or UFP_D connected', 'DFP_D is connected', 'UFP_D is connected', 'Both DFP_D and UFP_D are connected'])
        DPStatusTX_dm.addChild(dpstatustx)
        dpstatustx.reference_name = "Connection Status"
        dpstatustx.help = "Current Outgoing DP Status message contents"
        dpstatustx.setMaxValue(3)

        dpstatustx = register_class.cListDMTerminator(self,
                {'name': 'Power Low',
                    'offset': 2,
                    'bit length': 1})
        dpstatustx.setReportList(['Adapter is functioning normally or disabled', 'Adapter has detected low power and DP is disabled'])
        DPStatusTX_dm.addChild(dpstatustx)
        dpstatustx.reference_name = "Power Low"
        dpstatustx.help = "Current Outgoing DP Status message contents"
        dpstatustx.setMaxValue(1)

        dpstatustx = register_class.cListDMTerminator(self,
                {'name': 'Enabled',
                    'offset': 3,
                    'bit length': 1})
        dpstatustx.setReportList(['DP functionality is Disabled', 'DP functionality is enabled'])
        DPStatusTX_dm.addChild(dpstatustx)
        dpstatustx.reference_name = "Enabled"
        dpstatustx.help = "Current Outgoing DP Status message contents"
        dpstatustx.setMaxValue(1)

        dpstatustx = register_class.cListDMTerminator(self,
                {'name': 'Multi-function Preferred',
                    'offset': 4,
                    'bit length': 1})
        dpstatustx.setReportList(['No Preference for Multi-function', 'Multi-function preferred'])
        DPStatusTX_dm.addChild(dpstatustx)
        dpstatustx.reference_name = "Multi-function Preferred"
        dpstatustx.help = "Current Outgoing DP Status message contents"
        dpstatustx.setMaxValue(1)

        dpstatustx = register_class.cListDMTerminator(self,
                {'name': 'USB Configuration Request',
                    'offset': 5,
                    'bit length': 1})
        dpstatustx.setReportList(['Maintain current configuration', 'Request switch to USB Configuration'])
        DPStatusTX_dm.addChild(dpstatustx)
        dpstatustx.reference_name = "USB Configuration Request"
        dpstatustx.help = "Current Outgoing DP Status message contents"
        dpstatustx.setMaxValue(1)

        dpstatustx = register_class.cListDMTerminator(self,
                {'name': 'Exit DisplayPort Mode Request',
                    'offset': 6,
                    'bit length': 1})
        dpstatustx.setReportList(['Maintain current mode', 'Request exit from DisplayPort Mode'])
        DPStatusTX_dm.addChild(dpstatustx)
        dpstatustx.reference_name = "Exit DisplayPort Mode Request"
        dpstatustx.help = "Current Outgoing DP Status message contents"
        dpstatustx.setMaxValue(1)

        dpstatustx = register_class.cListDMTerminator(self,
                {'name': 'HPD State',
                    'offset': 7,
                    'bit length': 1})
        dpstatustx.setReportList(['HPD_Low', 'HPD_High'])
        DPStatusTX_dm.addChild(dpstatustx)
        dpstatustx.reference_name = "HPD State"
        dpstatustx.help = "Current Outgoing DP Status message contents"
        dpstatustx.setMaxValue(1)

        dpstatustx = register_class.cListDMTerminator(self,
                {'name': 'IRQ HPD',
                    'offset': 8,
                    'bit length': 1})
        dpstatustx.setReportList(['No IRQ_HPD since last status', 'IRQ_HPD'])
        DPStatusTX_dm.addChild(dpstatustx)
        dpstatustx.reference_name = "IRQ HPD"
        dpstatustx.help = "Current Outgoing DP Status message contents"
        dpstatustx.setMaxValue(1)

        DPStatusRX_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Status RX',
                                                         'offset': 40,
                                                         'bit length': 49})
        self.dataModel.addChild(DPStatusRX_dm)

        dpstatusrx = register_class.cListDMTerminator(self,
                {'name': 'Connection Status',
                    'offset': 0,
                    'bit length': 2})
        dpstatusrx.setReportList(['Neither DFP_D or UFP_D connected', 'DFP_D is connected', 'UFP_D is connected', 'Both DFP_D and UFP_D are connected'])
        DPStatusRX_dm.addChild(dpstatusrx)
        dpstatusrx.reference_name = "Connection Status"
        dpstatusrx.help = "Most recently received DP Status message contents."
        dpstatusrx.setMaxValue(3)

        dpstatusrx = register_class.cListDMTerminator(self,
                {'name': 'Power Low',
                    'offset': 2,
                    'bit length': 1})
        dpstatusrx.setReportList(['Adapter is functioning normally or disabled', 'Adapter has detected low power and DP is disabled'])
        DPStatusRX_dm.addChild(dpstatusrx)
        dpstatusrx.reference_name = "Power Low"
        dpstatusrx.help = "Most recently received DP Status message contents."
        dpstatusrx.setMaxValue(1)

        dpstatusrx = register_class.cListDMTerminator(self,
                {'name': 'Enabled',
                    'offset': 3,
                    'bit length': 1})
        dpstatusrx.setReportList(['DP functionality is Disabled', 'DP functionality is enabled'])
        DPStatusRX_dm.addChild(dpstatusrx)
        dpstatusrx.reference_name = "Enabled"
        dpstatusrx.help = "Most recently received DP Status message contents."
        dpstatusrx.setMaxValue(1)

        dpstatusrx = register_class.cListDMTerminator(self,
                {'name': 'Multi-function Preferred',
                    'offset': 4,
                    'bit length': 1})
        dpstatusrx.setReportList(['No Preference for Multi-function', 'Multi-function preferred'])
        DPStatusRX_dm.addChild(dpstatusrx)
        dpstatusrx.reference_name = "Multi-function Preferred"
        dpstatusrx.help = "Most recently received DP Status message contents."
        dpstatusrx.setMaxValue(1)

        dpstatusrx = register_class.cListDMTerminator(self,
                {'name': 'USB Configuration Request',
                    'offset': 5,
                    'bit length': 1})
        dpstatusrx.setReportList(['Maintain current configuration', 'Request switch to USB Configuration'])
        DPStatusRX_dm.addChild(dpstatusrx)
        dpstatusrx.reference_name = "USB Configuration Request"
        dpstatusrx.help = "Most recently received DP Status message contents."
        dpstatusrx.setMaxValue(1)

        dpstatusrx = register_class.cListDMTerminator(self,
                {'name': 'Exit DisplayPort Mode Request',
                    'offset': 6,
                    'bit length': 1})
        dpstatusrx.setReportList(['Maintain current mode', 'Request exit from DisplayPort Mode'])
        DPStatusRX_dm.addChild(dpstatusrx)
        dpstatusrx.reference_name = "Exit DisplayPort Mode Request"
        dpstatusrx.help = "Most recently received DP Status message contents."
        dpstatusrx.setMaxValue(1)

        dpstatusrx = register_class.cListDMTerminator(self,
                {'name': 'HPD State',
                    'offset': 7,
                    'bit length': 1})
        dpstatusrx.setReportList(['HPD_Low', 'HPD_High'])
        DPStatusRX_dm.addChild(dpstatusrx)
        dpstatusrx.reference_name = "HPD State"
        dpstatusrx.help = "Most recently received DP Status message contents."
        dpstatusrx.setMaxValue(1)

        dpstatusrx = register_class.cListDMTerminator(self,
                {'name': 'IRQ HPD',
                    'offset': 8,
                    'bit length': 1})
        dpstatusrx.setReportList(['No IRQ_HPD since last status', 'IRQ_HPD'])
        DPStatusRX_dm.addChild(dpstatusrx)
        dpstatusrx.reference_name = "IRQ HPD"
        dpstatusrx.help = "Most recently received DP Status message contents."
        dpstatusrx.setMaxValue(1)

        DPConfigure_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Configure',
                                                         'offset': 72,
                                                         'bit length': 96})
        self.dataModel.addChild(DPConfigure_dm)

        dpconfiguremessage = register_class.cListDMTerminator(self,
                {'name': 'Select Configuration',
                    'offset': 0,
                    'bit length': 2})
        dpconfiguremessage.setReportList(['Set configuration for USB', 'Set configuration for UFP_U as DFP_D', 'Set configuration for UFP_U as UFP_D', 'Reserved'])
        DPConfigure_dm.addChild(dpconfiguremessage)
        dpconfiguremessage.reference_name = "Select Configuration"
        dpconfiguremessage.help = "Contents of DP Config message when sent (DFP_U).#ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or received (UFP_U).#/ph#"
        dpconfiguremessage.setMaxValue(3)

        dpconfiguremessage = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports DP v1.3 Signaling',
                'offset': 2,
                'bit length': 1})
        DPConfigure_dm.addChild(dpconfiguremessage)
        dpconfiguremessage.reference_name = "Supports DP v1.3 Signaling"
        dpconfiguremessage.help = "Contents of DP Config message when sent (DFP_U).#ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or received (UFP_U).#/ph#"

        dpconfiguremessage = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports USB Gen 2 Signaling',
                'offset': 3,
                'bit length': 1})
        DPConfigure_dm.addChild(dpconfiguremessage)
        dpconfiguremessage.reference_name = "Supports USB Gen 2 Signaling"
        dpconfiguremessage.help = "Contents of DP Config message when sent (DFP_U).#ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or received (UFP_U).#/ph#"

        dpconfiguremessage = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'DFPD Receptacle or UFPD Plug Pin Assignment',
                                                             'offset': 8,
                                                             'bit length': 8})
        dpconfiguremessage.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpconfiguremessage.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpconfiguremessage.setSpacing(6)
        DPConfigure_dm.addChild(dpconfiguremessage)
        dpconfiguremessage.reference_name = "DFPD Receptacle or UFPD Plug Pin Assignment"
        dpconfiguremessage.help = "Contents of DP Config message when sent (DFP_U).#ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or received (UFP_U).#/ph#"

        dpconfiguremessage = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'UFPD Receptacle or DFPD Plug Pin Assignment',
                                                             'offset': 16,
                                                             'bit length': 8})
        dpconfiguremessage.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpconfiguremessage.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpconfiguremessage.setSpacing(6)
        DPConfigure_dm.addChild(dpconfiguremessage)
        dpconfiguremessage.reference_name = "UFPD Receptacle or DFPD Plug Pin Assignment"
        dpconfiguremessage.help = "Contents of DP Config message when sent (DFP_U).#ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or received (UFP_U).#/ph#"

        DPModeData_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Mode Data',
                                                         'offset': 104,
                                                         'bit length': 128})
        self.dataModel.addChild(DPModeData_dm)

        dpmodedata = register_class.cListDMTerminator(self,
                {'name': 'Port Capability',
                    'offset': 0,
                    'bit length': 2})
        dpmodedata.setReportList(['Reserved', 'UFP_D capable', 'DFP_D capable', 'Both UFP_d and DFP_D capable'])
        DPModeData_dm.addChild(dpmodedata)
        dpmodedata.reference_name = "Port Capability"
        dpmodedata.help = "DP Discover Mode response. This field contains the contents of the DP Discover Mode response when received (DFP_U). #ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or sent.(UFP_U).#/ph#"
        dpmodedata.setMaxValue(3)

        dpmodedata = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports DP v1.3 Signaling',
                'offset': 2,
                'bit length': 1})
        DPModeData_dm.addChild(dpmodedata)
        dpmodedata.reference_name = "Supports DP v1.3 Signaling"
        dpmodedata.help = "DP Discover Mode response. This field contains the contents of the DP Discover Mode response when received (DFP_U). #ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or sent.(UFP_U).#/ph#"

        dpmodedata = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports USB Gen 2 Signaling',
                'offset': 3,
                'bit length': 1})
        DPModeData_dm.addChild(dpmodedata)
        dpmodedata.reference_name = "Supports USB Gen 2 Signaling"
        dpmodedata.help = "DP Discover Mode response. This field contains the contents of the DP Discover Mode response when received (DFP_U). #ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or sent.(UFP_U).#/ph#"

        dpmodedata = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'DFPD Receptacle or UFPD Plug Pin Assignment',
                                                             'offset': 8,
                                                             'bit length': 8})
        dpmodedata.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpmodedata.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpmodedata.setSpacing(6)
        DPModeData_dm.addChild(dpmodedata)
        dpmodedata.reference_name = "DFPD Receptacle or UFPD Plug Pin Assignment"
        dpmodedata.help = "DP Discover Mode response. This field contains the contents of the DP Discover Mode response when received (DFP_U). #ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or sent.(UFP_U).#/ph#"

        dpmodedata = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'UFPD Receptacle or DFPD Plug Pin Assignment',
                                                             'offset': 16,
                                                             'bit length': 8})
        dpmodedata.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpmodedata.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpmodedata.setSpacing(6)
        DPModeData_dm.addChild(dpmodedata)
        dpmodedata.reference_name = "UFPD Receptacle or DFPD Plug Pin Assignment"
        dpmodedata.help = "DP Discover Mode response. This field contains the contents of the DP Discover Mode response when received (DFP_U). #ph ishcondition=(legacy=filter21) or (legacy=filter22) or (legacy=filter23)#Or sent.(UFP_U).#/ph#"

        DPStatusToPlug_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Status To Plug',
                                                         'offset': 136,
                                                         'bit length': 145})
        self.dataModel.addChild(DPStatusToPlug_dm)

        dpstatustoplug = register_class.cListDMTerminator(self,
                {'name': 'Connection Status',
                    'offset': 0,
                    'bit length': 2})
        dpstatustoplug.setReportList(['Neither DFP_D or UFP_D connected', 'DFP_D is connected', 'UFP_D is connected', 'Both DFP_D and UFP_D are connected'])
        DPStatusToPlug_dm.addChild(dpstatustoplug)
        dpstatustoplug.reference_name = "Connection Status"
        dpstatustoplug.help = "DP Status (SOP). This field contains the current Outgoing DP Status message contents to Cable Plug"
        dpstatustoplug.setMaxValue(3)

        dpstatustoplug = register_class.cListDMTerminator(self,
                {'name': 'Power Low',
                    'offset': 2,
                    'bit length': 1})
        dpstatustoplug.setReportList(['Adapter is functioning normally or disabled', 'Adapter has detected low power and DP is disabled'])
        DPStatusToPlug_dm.addChild(dpstatustoplug)
        dpstatustoplug.reference_name = "Power Low"
        dpstatustoplug.help = "DP Status (SOP). This field contains the current Outgoing DP Status message contents to Cable Plug"
        dpstatustoplug.setMaxValue(1)

        dpstatustoplug = register_class.cListDMTerminator(self,
                {'name': 'Enabled',
                    'offset': 3,
                    'bit length': 1})
        dpstatustoplug.setReportList(['DP functionality is Disabled', 'DP functionality is enabled'])
        DPStatusToPlug_dm.addChild(dpstatustoplug)
        dpstatustoplug.reference_name = "Enabled"
        dpstatustoplug.help = "DP Status (SOP). This field contains the current Outgoing DP Status message contents to Cable Plug"
        dpstatustoplug.setMaxValue(1)

        dpstatustoplug = register_class.cListDMTerminator(self,
                {'name': 'Multi-function Preferred',
                    'offset': 4,
                    'bit length': 1})
        dpstatustoplug.setReportList(['No Preference for Multi-function', 'Multi-function preferred'])
        DPStatusToPlug_dm.addChild(dpstatustoplug)
        dpstatustoplug.reference_name = "Multi-function Preferred"
        dpstatustoplug.help = "DP Status (SOP). This field contains the current Outgoing DP Status message contents to Cable Plug"
        dpstatustoplug.setMaxValue(1)

        dpstatustoplug = register_class.cListDMTerminator(self,
                {'name': 'USB Configuration Request',
                    'offset': 5,
                    'bit length': 1})
        dpstatustoplug.setReportList(['Maintain current configuration', 'Request switch to USB Configuration'])
        DPStatusToPlug_dm.addChild(dpstatustoplug)
        dpstatustoplug.reference_name = "USB Configuration Request"
        dpstatustoplug.help = "DP Status (SOP). This field contains the current Outgoing DP Status message contents to Cable Plug"
        dpstatustoplug.setMaxValue(1)

        dpstatustoplug = register_class.cListDMTerminator(self,
                {'name': 'Exit DisplayPort Mode Request',
                    'offset': 6,
                    'bit length': 1})
        dpstatustoplug.setReportList(['Maintain current mode', 'Request exit from DisplayPort Mode'])
        DPStatusToPlug_dm.addChild(dpstatustoplug)
        dpstatustoplug.reference_name = "Exit DisplayPort Mode Request"
        dpstatustoplug.help = "DP Status (SOP). This field contains the current Outgoing DP Status message contents to Cable Plug"
        dpstatustoplug.setMaxValue(1)

        dpstatustoplug = register_class.cListDMTerminator(self,
                {'name': 'HPD State',
                    'offset': 7,
                    'bit length': 1})
        dpstatustoplug.setReportList(['HPD_Low', 'HPD_High'])
        DPStatusToPlug_dm.addChild(dpstatustoplug)
        dpstatustoplug.reference_name = "HPD State"
        dpstatustoplug.help = "DP Status (SOP). This field contains the current Outgoing DP Status message contents to Cable Plug"
        dpstatustoplug.setMaxValue(1)

        dpstatustoplug = register_class.cListDMTerminator(self,
                {'name': 'IRQ HPD',
                    'offset': 8,
                    'bit length': 1})
        dpstatustoplug.setReportList(['No IRQ_HPD since last status', 'IRQ_HPD'])
        DPStatusToPlug_dm.addChild(dpstatustoplug)
        dpstatustoplug.reference_name = "IRQ HPD"
        dpstatustoplug.help = "DP Status (SOP). This field contains the current Outgoing DP Status message contents to Cable Plug"
        dpstatustoplug.setMaxValue(1)

        DPStatusACKFromPlug_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Status ACK From Plug',
                                                         'offset': 168,
                                                         'bit length': 177})
        self.dataModel.addChild(DPStatusACKFromPlug_dm)

        dpstatusackfromplug = register_class.cListDMTerminator(self,
                {'name': 'Connection Status',
                    'offset': 0,
                    'bit length': 2})
        dpstatusackfromplug.setReportList(['Neither DFP_D or UFP_D connected', 'DFP_D is connected', 'UFP_D is connected', 'Both DFP_D and UFP_D are connected'])
        DPStatusACKFromPlug_dm.addChild(dpstatusackfromplug)
        dpstatusackfromplug.reference_name = "Connection Status"
        dpstatusackfromplug.help = "DP Status acknowledgement (SOP). This field contains the most recently received DP Status Acknowledgment from Cable Plug"
        dpstatusackfromplug.setMaxValue(3)

        dpstatusackfromplug = register_class.cListDMTerminator(self,
                {'name': 'Power Low',
                    'offset': 2,
                    'bit length': 1})
        dpstatusackfromplug.setReportList(['Adapter is functioning normally or disabled', 'Adapter has detected low power and DP is disabled'])
        DPStatusACKFromPlug_dm.addChild(dpstatusackfromplug)
        dpstatusackfromplug.reference_name = "Power Low"
        dpstatusackfromplug.help = "DP Status acknowledgement (SOP). This field contains the most recently received DP Status Acknowledgment from Cable Plug"
        dpstatusackfromplug.setMaxValue(1)

        dpstatusackfromplug = register_class.cListDMTerminator(self,
                {'name': 'Enabled',
                    'offset': 3,
                    'bit length': 1})
        dpstatusackfromplug.setReportList(['DP functionality is Disabled', 'DP functionality is enabled'])
        DPStatusACKFromPlug_dm.addChild(dpstatusackfromplug)
        dpstatusackfromplug.reference_name = "Enabled"
        dpstatusackfromplug.help = "DP Status acknowledgement (SOP). This field contains the most recently received DP Status Acknowledgment from Cable Plug"
        dpstatusackfromplug.setMaxValue(1)

        dpstatusackfromplug = register_class.cListDMTerminator(self,
                {'name': 'Multi-function Preferred',
                    'offset': 4,
                    'bit length': 1})
        dpstatusackfromplug.setReportList(['No Preference for Multi-function', 'Multi-function preferred'])
        DPStatusACKFromPlug_dm.addChild(dpstatusackfromplug)
        dpstatusackfromplug.reference_name = "Multi-function Preferred"
        dpstatusackfromplug.help = "DP Status acknowledgement (SOP). This field contains the most recently received DP Status Acknowledgment from Cable Plug"
        dpstatusackfromplug.setMaxValue(1)

        dpstatusackfromplug = register_class.cListDMTerminator(self,
                {'name': 'USB Configuration Request',
                    'offset': 5,
                    'bit length': 1})
        dpstatusackfromplug.setReportList(['Maintain current configuration', 'Request switch to USB Configuration'])
        DPStatusACKFromPlug_dm.addChild(dpstatusackfromplug)
        dpstatusackfromplug.reference_name = "USB Configuration Request"
        dpstatusackfromplug.help = "DP Status acknowledgement (SOP). This field contains the most recently received DP Status Acknowledgment from Cable Plug"
        dpstatusackfromplug.setMaxValue(1)

        dpstatusackfromplug = register_class.cListDMTerminator(self,
                {'name': 'Exit DisplayPort Mode Request',
                    'offset': 6,
                    'bit length': 1})
        dpstatusackfromplug.setReportList(['Maintain current mode', 'Request exit from DisplayPort Mode'])
        DPStatusACKFromPlug_dm.addChild(dpstatusackfromplug)
        dpstatusackfromplug.reference_name = "Exit DisplayPort Mode Request"
        dpstatusackfromplug.help = "DP Status acknowledgement (SOP). This field contains the most recently received DP Status Acknowledgment from Cable Plug"
        dpstatusackfromplug.setMaxValue(1)

        dpstatusackfromplug = register_class.cListDMTerminator(self,
                {'name': 'HPD State',
                    'offset': 7,
                    'bit length': 1})
        dpstatusackfromplug.setReportList(['HPD_Low', 'HPD_High'])
        DPStatusACKFromPlug_dm.addChild(dpstatusackfromplug)
        dpstatusackfromplug.reference_name = "HPD State"
        dpstatusackfromplug.help = "DP Status acknowledgement (SOP). This field contains the most recently received DP Status Acknowledgment from Cable Plug"
        dpstatusackfromplug.setMaxValue(1)

        dpstatusackfromplug = register_class.cListDMTerminator(self,
                {'name': 'IRQ HPD',
                    'offset': 8,
                    'bit length': 1})
        dpstatusackfromplug.setReportList(['No IRQ_HPD since last status', 'IRQ_HPD'])
        DPStatusACKFromPlug_dm.addChild(dpstatusackfromplug)
        dpstatusackfromplug.reference_name = "IRQ HPD"
        dpstatusackfromplug.help = "DP Status acknowledgement (SOP). This field contains the most recently received DP Status Acknowledgment from Cable Plug"
        dpstatusackfromplug.setMaxValue(1)

        DPConfigureToPlug_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Configure To Plug',
                                                         'offset': 200,
                                                         'bit length': 224})
        self.dataModel.addChild(DPConfigureToPlug_dm)

        dpconfigtoplug = register_class.cListDMTerminator(self,
                {'name': 'Select Configuration',
                    'offset': 0,
                    'bit length': 2})
        dpconfigtoplug.setReportList(['Set configuration for USB', 'Set configuration for UFP_U as DFP_D', 'Set configuration for UFP_U as UFP_D', 'Reserved'])
        DPConfigureToPlug_dm.addChild(dpconfigtoplug)
        dpconfigtoplug.reference_name = "Select Configuration"
        dpconfigtoplug.help = "DP Config message (SOP). This field contains the contents of DP Configure message sent to Cable Plug"
        dpconfigtoplug.setMaxValue(3)

        dpconfigtoplug = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports DP v1.3 Signaling',
                'offset': 2,
                'bit length': 1})
        DPConfigureToPlug_dm.addChild(dpconfigtoplug)
        dpconfigtoplug.reference_name = "Supports DP v1.3 Signaling"
        dpconfigtoplug.help = "DP Config message (SOP). This field contains the contents of DP Configure message sent to Cable Plug"

        dpconfigtoplug = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports USB Gen 2 Signaling',
                'offset': 3,
                'bit length': 1})
        DPConfigureToPlug_dm.addChild(dpconfigtoplug)
        dpconfigtoplug.reference_name = "Supports USB Gen 2 Signaling"
        dpconfigtoplug.help = "DP Config message (SOP). This field contains the contents of DP Configure message sent to Cable Plug"

        dpconfigtoplug = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'DFPD Receptacle or UFPD Plug Pin Assignment',
                                                             'offset': 8,
                                                             'bit length': 8})
        dpconfigtoplug.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpconfigtoplug.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpconfigtoplug.setSpacing(6)
        DPConfigureToPlug_dm.addChild(dpconfigtoplug)
        dpconfigtoplug.reference_name = "DFPD Receptacle or UFPD Plug Pin Assignment"
        dpconfigtoplug.help = "DP Config message (SOP). This field contains the contents of DP Configure message sent to Cable Plug"

        dpconfigtoplug = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'UFPD Receptacle or DFPD Plug Pin Assignment',
                                                             'offset': 16,
                                                             'bit length': 8})
        dpconfigtoplug.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpconfigtoplug.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpconfigtoplug.setSpacing(6)
        DPConfigureToPlug_dm.addChild(dpconfigtoplug)
        dpconfigtoplug.reference_name = "UFPD Receptacle or DFPD Plug Pin Assignment"
        dpconfigtoplug.help = "DP Config message (SOP). This field contains the contents of DP Configure message sent to Cable Plug"

        DPConfigureACKFromPlug_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Configure ACK From Plug',
                                                         'offset': 232,
                                                         'bit length': 256})
        self.dataModel.addChild(DPConfigureACKFromPlug_dm)

        dpconfigfromplug = register_class.cListDMTerminator(self,
                {'name': 'Select Configuration',
                    'offset': 0,
                    'bit length': 2})
        dpconfigfromplug.setReportList(['Set configuration for USB', 'Set configuration for UFP_U as DFP_D', 'Set configuration for UFP_U as UFP_D', 'Reserved'])
        DPConfigureACKFromPlug_dm.addChild(dpconfigfromplug)
        dpconfigfromplug.reference_name = "Select Configuration"
        dpconfigfromplug.help = "Received DP config message (SOP). This field contains the contents of DP Configure message received from Cable Plug"
        dpconfigfromplug.setMaxValue(3)

        dpconfigfromplug = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports DP v1.3 Signaling',
                'offset': 2,
                'bit length': 1})
        DPConfigureACKFromPlug_dm.addChild(dpconfigfromplug)
        dpconfigfromplug.reference_name = "Supports DP v1.3 Signaling"
        dpconfigfromplug.help = "Received DP config message (SOP). This field contains the contents of DP Configure message received from Cable Plug"

        dpconfigfromplug = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports USB Gen 2 Signaling',
                'offset': 3,
                'bit length': 1})
        DPConfigureACKFromPlug_dm.addChild(dpconfigfromplug)
        dpconfigfromplug.reference_name = "Supports USB Gen 2 Signaling"
        dpconfigfromplug.help = "Received DP config message (SOP). This field contains the contents of DP Configure message received from Cable Plug"

        dpconfigfromplug = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'DFPD Receptacle or UFPD Plug Pin Assignment',
                                                             'offset': 8,
                                                             'bit length': 8})
        dpconfigfromplug.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpconfigfromplug.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpconfigfromplug.setSpacing(6)
        DPConfigureACKFromPlug_dm.addChild(dpconfigfromplug)
        dpconfigfromplug.reference_name = "DFPD Receptacle or UFPD Plug Pin Assignment"
        dpconfigfromplug.help = "Received DP config message (SOP). This field contains the contents of DP Configure message received from Cable Plug"

        dpconfigfromplug = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'UFPD Receptacle or DFPD Plug Pin Assignment',
                                                             'offset': 16,
                                                             'bit length': 8})
        dpconfigfromplug.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpconfigfromplug.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpconfigfromplug.setSpacing(6)
        DPConfigureACKFromPlug_dm.addChild(dpconfigfromplug)
        dpconfigfromplug.reference_name = "UFPD Receptacle or DFPD Plug Pin Assignment"
        dpconfigfromplug.help = "Received DP config message (SOP). This field contains the contents of DP Configure message received from Cable Plug"

        DPModeDataSOPPrime_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'DP Mode Data, SOP Prime',
                                                         'offset': 264,
                                                         'bit length': 304})
        self.dataModel.addChild(DPModeDataSOPPrime_dm)

        dpmodedatasopp = register_class.cListDMTerminator(self,
                {'name': 'Port Capability',
                    'offset': 0,
                    'bit length': 2})
        dpmodedatasopp.setReportList(['Reserved', 'UFP_D capable', 'DFP_D capable', 'Both UFP_d and DFP_D capable'])
        DPModeDataSOPPrime_dm.addChild(dpmodedatasopp)
        dpmodedatasopp.reference_name = "Port Capability"
        dpmodedatasopp.help = "Discover Mode ACK (SOP). This field contains the contents of DP Discover Mode response from Cable Plug"
        dpmodedatasopp.setMaxValue(3)

        dpmodedatasopp = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports DP v1.3 Signaling',
                'offset': 2,
                'bit length': 1})
        DPModeDataSOPPrime_dm.addChild(dpmodedatasopp)
        dpmodedatasopp.reference_name = "Supports DP v1.3 Signaling"
        dpmodedatasopp.help = "Discover Mode ACK (SOP). This field contains the contents of DP Discover Mode response from Cable Plug"

        dpmodedatasopp = register_class.cBooleanDMTerminator(self,
                {'name': 'Supports USB Gen 2 Signaling',
                'offset': 3,
                'bit length': 1})
        DPModeDataSOPPrime_dm.addChild(dpmodedatasopp)
        dpmodedatasopp.reference_name = "Supports USB Gen 2 Signaling"
        dpmodedatasopp.help = "Discover Mode ACK (SOP). This field contains the contents of DP Discover Mode response from Cable Plug"

        dpmodedatasopp = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'DFPD Receptacle or UFPD Plug Pin Assignment',
                                                             'offset': 8,
                                                             'bit length': 8})
        dpmodedatasopp.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpmodedatasopp.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpmodedatasopp.setSpacing(6)
        DPModeDataSOPPrime_dm.addChild(dpmodedatasopp)
        dpmodedatasopp.reference_name = "DFPD Receptacle or UFPD Plug Pin Assignment"
        dpmodedatasopp.help = "Discover Mode ACK (SOP). This field contains the contents of DP Discover Mode response from Cable Plug"

        dpmodedatasopp = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'UFPD Receptacle or DFPD Plug Pin Assignment',
                                                             'offset': 16,
                                                             'bit length': 8})
        dpmodedatasopp.setFlagNameList(['A', 'B', 'C', 'D', 'E', 'F'])
        dpmodedatasopp.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        dpmodedatasopp.setSpacing(6)
        DPModeDataSOPPrime_dm.addChild(dpmodedatasopp)
        dpmodedatasopp.reference_name = "UFPD Receptacle or DFPD Plug Pin Assignment"
        dpmodedatasopp.help = "Discover Mode ACK (SOP). This field contains the contents of DP Discover Mode response from Cable Plug"

        tdpsidstatusdpsignalingrate = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'DP Signalling Rate',
                                                             'offset': 32,
                                                             'bit length': 4})
        tdpsidstatusdpsignalingrate.setFlagNameList(['HBR3', 'UHBR10 HBR3', 'UHBR20 UHBR10 HBR3'])
        tdpsidstatusdpsignalingrate.setFlagMask([1, 1, 1, 0, 0, 0, 0, 0])
        tdpsidstatusdpsignalingrate.setSpacing(6)
        DPModeDataSOPPrime_dm.addChild(tdpsidstatusdpsignalingrate)
        tdpsidstatusdpsignalingrate.reference_name = "DP Signalling Rate"
        tdpsidstatusdpsignalingrate.help = "Signaling for Cable Information Transport of DisplayPort Protocol"

        tdpsidstatusuhbr13 = register_class.cListDMTerminator(self,
                {'name': 'Cable UHBR13.5 Support',
                    'offset': 36,
                    'bit length': 1})
        tdpsidstatusuhbr13.setReportList(['UHBR13.5 Not Supported', 'UHBR13.5 Supported'])
        DPModeDataSOPPrime_dm.addChild(tdpsidstatusuhbr13)
        tdpsidstatusuhbr13.reference_name = "Cable UHBR13.5 Support"
        tdpsidstatusuhbr13.help = "Cable UHBR13.5 Support"
        tdpsidstatusuhbr13.setMaxValue(1)

        tdpsidstatuscableactivecomponent = register_class.cListDMTerminator(self,
                {'name': 'Cable Active Component',
                    'offset': 37,
                    'bit length': 2})
        tdpsidstatuscableactivecomponent.setReportList(['Passive', 'Active Retimer', 'Active Redriver', 'Optical'])
        DPModeDataSOPPrime_dm.addChild(tdpsidstatuscableactivecomponent)
        tdpsidstatuscableactivecomponent.reference_name = "Cable Active Component"
        tdpsidstatuscableactivecomponent.help = "Cable Active Component"
        tdpsidstatuscableactivecomponent.setMaxValue(3)

        tdpsidstatusufpvdoversion = register_class.cListDMTerminator(self,
                {'name': 'DP UFP VDO Version',
                    'offset': 39,
                    'bit length': 1})
        tdpsidstatusufpvdoversion.setReportList(['VDO Original Version', 'VDO Version 1'])
        DPModeDataSOPPrime_dm.addChild(tdpsidstatusufpvdoversion)
        tdpsidstatusufpvdoversion.reference_name = "DP UFP VDO Version"
        tdpsidstatusufpvdoversion.help = "DP UFP VDP Version"
        tdpsidstatusufpvdoversion.setMaxValue(1)

        update_function = get_updater_function("dpsidstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cintelvidstatus_0x59_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Intel VID Status',
                                           'address': 0x59,
                                           'byte length': 11,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Intel VID Status',
                                                         'offset': 0,
                                                         'bit length': 88})

        IntelVIDDetected_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Intel VID Detected',
                                                         'offset': 0,
                                                         'bit length': 1})
        self.dataModel.addChild(IntelVIDDetected_dm)

        intelviddetected = register_class.cDictDMTerminator(self,
                                                     {'name': 'Intel VID Detected',
                                                      'offset': 0,
                                                      'bit length': 1})
        intelviddetected.setReportDict(OrderedDict([(1, 'UFP returned Intel VID in Discover SVIDs response'), (0, 'DFP has issued Intel VID SVDM')]))
        IntelVIDDetected_dm.addChild(intelviddetected)
        intelviddetected.reference_name = "Intel VID Detected"
        intelviddetected.setMaxValue(1)

        ThunderboltModeActive_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Thunderbolt Mode Active',
                                                         'offset': 1,
                                                         'bit length': 2})
        self.dataModel.addChild(ThunderboltModeActive_dm)

        tbtmodeactive = register_class.cDictDMTerminator(self,
                                                     {'name': 'TBT Mode Active',
                                                      'offset': 0,
                                                      'bit length': 1})
        tbtmodeactive.setReportDict(OrderedDict([(1, 'Asserted when PD Controller has entered Thunderbolt Mode with attached UFP'), (0, 'Asserted when Attached DFP has entered Thunderbolt Mode')]))
        ThunderboltModeActive_dm.addChild(tbtmodeactive)
        tbtmodeactive.reference_name = "TBT Mode Active"
        tbtmodeactive.setMaxValue(1)

        ForcedThunderboltMode_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Forced Thunderbolt Mode',
                                                         'offset': 2,
                                                         'bit length': 3})
        self.dataModel.addChild(ForcedThunderboltMode_dm)

        forcedtbtmode = register_class.cBooleanDMTerminator(self,
                {'name': 'Forced TBT Mode',
                'offset': 0,
                'bit length': 1})
        ForcedThunderboltMode_dm.addChild(forcedtbtmode)
        forcedtbtmode.reference_name = "Forced TBT Mode"
        forcedtbtmode.help = "Retimer in TBT state and ready for FW update. A value of 1 indicates that the PD controller has placed the retimer in the TBT state and it is ready for FW update."

        TBTAttentionData_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'TBT Attention Data',
                                                         'offset': 8,
                                                         'bit length': 40})
        self.dataModel.addChild(TBTAttentionData_dm)

        tbtattndata = register_class.cHexDMTerminator(self,
                {'name': 'TBT Attention Data',
                'offset': 0,
                'bit length': 32})
        TBTAttentionData_dm.addChild(tbtattndata)
        tbtattndata.reference_name = "TBT Attention Data"
        tbtattndata.help = "Attention message contents. This field contains the contents of the Attention VDO in Thunderbolt Mode when sent (UFP) or received (DFP)."

        TBTEnterModeData_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'TBT Enter Mode Data',
                                                         'offset': 40,
                                                         'bit length': 49})
        self.dataModel.addChild(TBTEnterModeData_dm)

        tbtentermodedata = register_class.cListDMTerminator(self,
                {'name': 'Thunderbolt Cable Speed Support',
                    'offset': 0,
                    'bit length': 3})
        tbtentermodedata.setReportList(['Reserved', 'USB3.1 gen1 cable (10Gb/s Thunderbolt support)', '10Gb/s only', '10Gb/s and 20Gb/s only'])
        TBTEnterModeData_dm.addChild(tbtentermodedata)
        tbtentermodedata.reference_name = "Thunderbolt Cable Speed Support"
        tbtentermodedata.help = "Data for TBT Enter mode message. This field contains the upper 16 bits of second VDO to Thunderbolt Enter Mode command when sent (DFP) or received (UFP)."
        tbtentermodedata.setMaxValue(3)

        tbtentermodedata = register_class.cListDMTerminator(self,
                {'name': 'Thunderbolt Cable Gen',
                    'offset': 3,
                    'bit length': 2})
        tbtentermodedata.setReportList(['3rd generation TBT (10.3125 and 20.625 Gb/s)', '4th generation TBT (10.0, 10.3125, 20.0, and 20.625 Gb/s)'])
        TBTEnterModeData_dm.addChild(tbtentermodedata)
        tbtentermodedata.reference_name = "Thunderbolt Cable Gen"
        tbtentermodedata.help = "Data for TBT Enter mode message. This field contains the upper 16 bits of second VDO to Thunderbolt Enter Mode command when sent (DFP) or received (UFP)."
        tbtentermodedata.setMaxValue(1)

        tbtentermodedata = register_class.cListDMTerminator(self,
                {'name': 'Cable Type',
                    'offset': 5,
                    'bit length': 1})
        tbtentermodedata.setReportList(['Type-C to Type-C Cable', 'Legacy Adapter'])
        TBTEnterModeData_dm.addChild(tbtentermodedata)
        tbtentermodedata.reference_name = "Cable Type"
        tbtentermodedata.help = "Data for TBT Enter mode message. This field contains the upper 16 bits of second VDO to Thunderbolt Enter Mode command when sent (DFP) or received (UFP)."
        tbtentermodedata.setMaxValue(1)

        tbtentermodedata = register_class.cListDMTerminator(self,
                {'name': 'Active Cable',
                    'offset': 6,
                    'bit length': 1})
        tbtentermodedata.setReportList(['Active Cable', 'Passive Cable'])
        TBTEnterModeData_dm.addChild(tbtentermodedata)
        tbtentermodedata.reference_name = "Active Cable"
        tbtentermodedata.help = "Data for TBT Enter mode message. This field contains the upper 16 bits of second VDO to Thunderbolt Enter Mode command when sent (DFP) or received (UFP)."
        tbtentermodedata.setMaxValue(1)

        tbtentermodedata = register_class.cListDMTerminator(self,
                {'name': 'Active Link Training',
                    'offset': 7,
                    'bit length': 1})
        tbtentermodedata.setReportList(['Active with bi-directional LSRX communication (also used for passive cables)', 'Active with uni-directional LSRX communication'])
        TBTEnterModeData_dm.addChild(tbtentermodedata)
        tbtentermodedata.reference_name = "Active Link Training"
        tbtentermodedata.help = "Data for TBT Enter mode message. This field contains the upper 16 bits of second VDO to Thunderbolt Enter Mode command when sent (DFP) or received (UFP)."
        tbtentermodedata.setMaxValue(1)

        tbtentermodedata = register_class.cListDMTerminator(self,
                {'name': 'Legacy TBT Adapter',
                    'offset': 8,
                    'bit length': 1})
        tbtentermodedata.setReportList(['Is Not a Legacy Adapter', 'Is a Legacy Adapter'])
        TBTEnterModeData_dm.addChild(tbtentermodedata)
        tbtentermodedata.reference_name = "Legacy TBT Adapter"
        tbtentermodedata.help = "Data for TBT Enter mode message. This field contains the upper 16 bits of second VDO to Thunderbolt Enter Mode command when sent (DFP) or received (UFP)."
        tbtentermodedata.setMaxValue(1)

        TBTDiscoverModeDataSOP_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'TBT Discover Mode Data SOP',
                                                         'offset': 56,
                                                         'bit length': 67})
        self.dataModel.addChild(TBTDiscoverModeDataSOP_dm)

        tbtmodedatarxonsop = register_class.cListDMTerminator(self,
                {'name': 'Legacy TBT Adapter',
                    'offset': 0,
                    'bit length': 1})
        tbtmodedatarxonsop.setReportList(['Is Not a Legacy Adapter', 'Is a Legacy Adapter'])
        TBTDiscoverModeDataSOP_dm.addChild(tbtmodedatarxonsop)
        tbtmodedatarxonsop.reference_name = "Legacy TBT Adapter"
        tbtmodedatarxonsop.help = "Data for Discover Modes response. This field contains the upper 16 bits of SOP Discover Modes response for TBT Mode when received (DFP) or sent (UFP). Lower 16 bits of the response are always 0x0001. NOTE: In the UFP role, this register simply copies the contents of the Intel VID Configuration register bits 23:8 at the time the Discover Modes response is generated."
        tbtmodedatarxonsop.setMaxValue(1)

        tbtmodedatarxonsop = register_class.cListDMTerminator(self,
                {'name': 'VPRO Supported',
                    'offset': 10,
                    'bit length': 1})
        tbtmodedatarxonsop.setReportList(['Is Not Supported', 'Is Supported'])
        TBTDiscoverModeDataSOP_dm.addChild(tbtmodedatarxonsop)
        tbtmodedatarxonsop.reference_name = "VPRO Supported"
        tbtmodedatarxonsop.help = "Data for Discover Modes response. This field contains the upper 16 bits of SOP Discover Modes response for TBT Mode when received (DFP) or sent (UFP). Lower 16 bits of the response are always 0x0001. NOTE: In the UFP role, this register simply copies the contents of the Intel VID Configuration register bits 23:8 at the time the Discover Modes response is generated."
        tbtmodedatarxonsop.setMaxValue(1)

        TBTDiscoverModeDataSOPP_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'TBT Discover Mode Data SOPP',
                                                         'offset': 72,
                                                         'bit length': 80})
        self.dataModel.addChild(TBTDiscoverModeDataSOPP_dm)

        tbtmodedatarxonsopp = register_class.cListDMTerminator(self,
                {'name': 'Thunderbolt Cable Speed Support',
                    'offset': 0,
                    'bit length': 3})
        tbtmodedatarxonsopp.setReportList(['Reserved', 'USB3.1 gen1 cable (10Gb/s Thunderbolt support)', '10Gb/s only', '10Gb/s and 20Gb/s only'])
        TBTDiscoverModeDataSOPP_dm.addChild(tbtmodedatarxonsopp)
        tbtmodedatarxonsopp.reference_name = "Thunderbolt Cable Speed Support"
        tbtmodedatarxonsopp.help = "Data for Discover Modes (SOP). This field contains the upper 16 bits of SOP Discover Modes Cable response for TBT Mode. Lower 16 bits of the response are always 0x0001"
        tbtmodedatarxonsopp.setMaxValue(3)

        tbtmodedatarxonsopp = register_class.cListDMTerminator(self,
                {'name': 'Thunderbolt Cable Gen',
                    'offset': 3,
                    'bit length': 2})
        tbtmodedatarxonsopp.setReportList(['3rd generation TBT (10.3125 and 20.625 Gb/s)', '4th generation TBT (10.0, 10.3125, 20.0, and 20.625 Gb/s)'])
        TBTDiscoverModeDataSOPP_dm.addChild(tbtmodedatarxonsopp)
        tbtmodedatarxonsopp.reference_name = "Thunderbolt Cable Gen"
        tbtmodedatarxonsopp.help = "Data for Discover Modes (SOP). This field contains the upper 16 bits of SOP Discover Modes Cable response for TBT Mode. Lower 16 bits of the response are always 0x0001"
        tbtmodedatarxonsopp.setMaxValue(1)

        tbtmodedatarxonsopp = register_class.cListDMTerminator(self,
                {'name': 'Cable Type',
                    'offset': 5,
                    'bit length': 1})
        tbtmodedatarxonsopp.setReportList(['Type-C to Type-C Cable', 'Legacy Adapter'])
        TBTDiscoverModeDataSOPP_dm.addChild(tbtmodedatarxonsopp)
        tbtmodedatarxonsopp.reference_name = "Cable Type"
        tbtmodedatarxonsopp.help = "Data for Discover Modes (SOP). This field contains the upper 16 bits of SOP Discover Modes Cable response for TBT Mode. Lower 16 bits of the response are always 0x0001"
        tbtmodedatarxonsopp.setMaxValue(1)

        tbtmodedatarxonsopp = register_class.cListDMTerminator(self,
                {'name': 'Active Cable',
                    'offset': 6,
                    'bit length': 1})
        tbtmodedatarxonsopp.setReportList(['Passive Cable', 'Active Cable'])
        TBTDiscoverModeDataSOPP_dm.addChild(tbtmodedatarxonsopp)
        tbtmodedatarxonsopp.reference_name = "Active Cable"
        tbtmodedatarxonsopp.help = "Data for Discover Modes (SOP). This field contains the upper 16 bits of SOP Discover Modes Cable response for TBT Mode. Lower 16 bits of the response are always 0x0001"
        tbtmodedatarxonsopp.setMaxValue(1)

        tbtmodedatarxonsopp = register_class.cListDMTerminator(self,
                {'name': 'Active Link Training',
                    'offset': 7,
                    'bit length': 1})
        tbtmodedatarxonsopp.setReportList(['Active with bi-directional LSRX communication (also used for passive cables)', 'Active with uni-directional LSRX communication'])
        TBTDiscoverModeDataSOPP_dm.addChild(tbtmodedatarxonsopp)
        tbtmodedatarxonsopp.reference_name = "Active Link Training"
        tbtmodedatarxonsopp.help = "Data for Discover Modes (SOP). This field contains the upper 16 bits of SOP Discover Modes Cable response for TBT Mode. Lower 16 bits of the response are always 0x0001"
        tbtmodedatarxonsopp.setMaxValue(1)

        update_function = get_updater_function("intelvidstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

# -------------------------Alert definitions - IO Config------------------
def gpio_mapped_event_0x5c_fo_288_check_function(self, argumentList, newValue):
    returnVal = {'check failed': False,
                 'message': "",
                 'change list': None}

    if newValue == 38:
        if argumentList[0].valueToInt() == 0:
            returnVal = {'check failed': True,
                         'message': "retimer_force_pwr_event_port2(38) Event Cannot be assigned when TBT Controller Type is Default  (Register : Global System Configuration,  Field : TBT Controller Type)",
                         'change list': [
                             {'object': argumentList[0],
                              'valid setting list': [
                        {'value': 1, 'description': "AR" }, 
                        {'value': 3, 'description': "ICL or later Lake platform" }]}
                         ]}
            return returnVal            
    if newValue == 40:
        if argumentList[0].valueToInt() == 0:
            returnVal = {'check failed': True,
                         'message': "retimer_force_pwr_event_port1(40) Event Cannot be assigned when TBT Controller Type is Default  (Register : Global System Configuration,  Field : TBT Controller Type)",
                         'change list': [
                             {'object': argumentList[0],
                              'valid setting list': [
                        {'value': 1, 'description': "AR" }, 
                        {'value': 3, 'description': "ICL or later Lake platform" }]}
                         ]}
            return returnVal            

    update_function = get_updater_function("gpio_mapped_event_0x5c_fo_288_check_function_updater")
    if update_function is not None:
        self.alert_update_fxn = types.MethodType(update_function, self, self)
        updater_return = self.alert_update_fxn(argumentList, newValue)
        if updater_return is not None:
            return updater_return


    return returnVal

def gpioconfig_dm_generator(self):

    get_child_object(self, [u'GPIO 0']).EventCategory = get_child_object(self, ['GPIO 0', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 0', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 0']).MultiplexingType = get_child_object(self, ['GPIO 0', 'Multiplexing for GPIO 0 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 0', 'Multiplexing for GPIO 0 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 0', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 0', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 0', 'Multiplexing for GPIO 0 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 0']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 0', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 0', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 0', 'Multiplexing for GPIO 0 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 0']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 0', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 0', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 0', 'Multiplexing for GPIO 0 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 0', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 0', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 0', 'Multiplexing for GPIO 0 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 0']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 0', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 0', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 0', 'Multiplexing for GPIO 0 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 0']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 0', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 0', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 1']).EventCategory = get_child_object(self, ['GPIO 1', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 1', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 1']).MultiplexingType = get_child_object(self, ['GPIO 1', 'Multiplexing for GPIO 1 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 1', 'Multiplexing for GPIO 1 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 1', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 1', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 1', 'Multiplexing for GPIO 1 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 1']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 1', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 1', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 1', 'Multiplexing for GPIO 1 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 1']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 1', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 1', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 1', 'Multiplexing for GPIO 1 Pin']).valueToInt() == 2):
        get_child_object(self, [u'GPIO 1', u'HPD Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 1', u'HPD Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 1', 'Multiplexing for GPIO 1 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 1', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 1', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 1', 'Multiplexing for GPIO 1 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 1']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 1', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 1', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 1', 'Multiplexing for GPIO 1 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 1']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 1', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 1', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 2']).EventCategory = get_child_object(self, ['GPIO 2', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 2', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 2']).MultiplexingType = get_child_object(self, ['GPIO 2', 'Multiplexing for GPIO 2 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 2', 'Multiplexing for GPIO 2 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 2', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 2', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 2', 'Multiplexing for GPIO 2 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 2']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 2', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 2', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 2', 'Multiplexing for GPIO 2 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 2']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 2', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 2', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 2', 'Multiplexing for GPIO 2 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 2', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 2', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 2', 'Multiplexing for GPIO 2 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 2']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 2', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 2', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 2', 'Multiplexing for GPIO 2 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 2']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 2', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 2', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 3']).EventCategory = get_child_object(self, ['GPIO 3', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 3', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 3']).MultiplexingType = get_child_object(self, ['GPIO 3', 'Multiplexing for GPIO 3 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 3', 'Multiplexing for GPIO 3 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 3', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 3', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 3', 'Multiplexing for GPIO 3 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 3']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 3', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 3', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 3', 'Multiplexing for GPIO 3 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 3']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 3', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 3', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 3', 'Multiplexing for GPIO 3 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 3', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 3', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 3', 'Multiplexing for GPIO 3 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 3']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 3', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 3', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 3', 'Multiplexing for GPIO 3 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 3']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 3', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 3', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 4']).EventCategory = get_child_object(self, ['GPIO 4', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 4', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 4']).MultiplexingType = get_child_object(self, ['GPIO 4', 'Multiplexing for GPIO 4 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 4', 'Multiplexing for GPIO 4 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 4', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 4', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 4', 'Multiplexing for GPIO 4 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 4']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 4', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 4', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 4', 'Multiplexing for GPIO 4 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 4']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 4', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 4', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 4', 'Multiplexing for GPIO 4 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 4', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 4', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 4', 'Multiplexing for GPIO 4 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 4']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 4', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 4', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 4', 'Multiplexing for GPIO 4 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 4']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 4', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 4', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 5']).EventCategory = get_child_object(self, ['GPIO 5', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 5', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 5']).MultiplexingType = get_child_object(self, ['GPIO 5', 'Multiplexing for GPIO 5 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 5', 'Multiplexing for GPIO 5 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 5', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 5', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 5', 'Multiplexing for GPIO 5 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 5']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 5', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 5', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 5', 'Multiplexing for GPIO 5 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 5']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 5', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 5', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 5', 'Multiplexing for GPIO 5 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 5', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 5', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 5', 'Multiplexing for GPIO 5 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 5']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 5', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 5', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 5', 'Multiplexing for GPIO 5 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 5']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 5', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 5', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 6']).EventCategory = get_child_object(self, ['GPIO 6', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 6', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 6']).MultiplexingType = get_child_object(self, ['GPIO 6', 'Multiplexing for GPIO 6 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 6', 'Multiplexing for GPIO 6 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 6', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 6', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 6', 'Multiplexing for GPIO 6 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 6']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 6', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 6', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 6', 'Multiplexing for GPIO 6 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 6']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 6', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 6', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 6', 'Multiplexing for GPIO 6 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 6', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 6', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 6', 'Multiplexing for GPIO 6 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 6']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 6', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 6', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 6', 'Multiplexing for GPIO 6 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 6']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 6', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 6', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 7']).EventCategory = get_child_object(self, ['GPIO 7', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 7', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 7']).MultiplexingType = get_child_object(self, ['GPIO 7', 'Multiplexing for GPIO 7 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 7', 'Multiplexing for GPIO 7 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 7', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 7', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 7', 'Multiplexing for GPIO 7 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 7']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 7', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 7', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 7', 'Multiplexing for GPIO 7 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 7']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 7', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 7', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 7', 'Multiplexing for GPIO 7 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 7', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 7', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 7', 'Multiplexing for GPIO 7 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 7']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 7', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 7', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 7', 'Multiplexing for GPIO 7 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 7']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 7', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 7', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 10']).EventCategory = get_child_object(self, ['GPIO 10', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 10', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 10']).MultiplexingType = get_child_object(self, ['GPIO 10', 'Multiplexing for GPIO 10 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 10', 'Multiplexing for GPIO 10 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 10', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 10', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 10', 'Multiplexing for GPIO 10 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 10']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 10', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 10', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 10', 'Multiplexing for GPIO 10 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 10']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 10', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 10', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 10', 'Multiplexing for GPIO 10 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 10', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 10', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 10', 'Multiplexing for GPIO 10 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 10']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 10', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 10', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 10', 'Multiplexing for GPIO 10 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 10']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 10', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 10', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 11']).EventCategory = get_child_object(self, ['GPIO 11', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 11', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 11']).MultiplexingType = get_child_object(self, ['GPIO 11', 'Multiplexing for GPIO 11 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 11', 'Multiplexing for GPIO 11 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 11', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 11', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 11', 'Multiplexing for GPIO 11 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 11']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 11', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 11', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 11', 'Multiplexing for GPIO 11 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 11']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 11', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 11', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 11', 'Multiplexing for GPIO 11 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 11', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 11', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 11', 'Multiplexing for GPIO 11 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 11']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 11', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 11', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 11', 'Multiplexing for GPIO 11 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 11']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 11', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 11', u'GPIO Event Polarity']).hide()

    get_child_object(self, [u'GPIO 12']).EventCategory = get_child_object(self, ['GPIO 12', 'GPIO Mapped Event']).GPIOEventDictList[get_child_object(self, ['GPIO 12', 'GPIO Mapped Event']).valueToInt()]['inout']
    get_child_object(self, [u'GPIO 12']).MultiplexingType = get_child_object(self, ['GPIO 12', 'Multiplexing for GPIO 12 Pin']).valueToInt()

    if (get_child_object(self, ['GPIO 12', 'Multiplexing for GPIO 12 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 12', u'GPIO Mapped Event']).unhide()

    else:
        get_child_object(self, [u'GPIO 12', u'GPIO Mapped Event']).hide()

    if (get_child_object(self, ['GPIO 12', 'Multiplexing for GPIO 12 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 12']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 12', u'Initial Value']).unhide()

    else:
        get_child_object(self, [u'GPIO 12', u'Initial Value']).hide()

    if (get_child_object(self, ['GPIO 12', 'Multiplexing for GPIO 12 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 12']).EventCategory == 'output'):
        get_child_object(self, [u'GPIO 12', u'Open Drain Output Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 12', u'Open Drain Output Enable']).hide()

    if (get_child_object(self, ['GPIO 12', 'Multiplexing for GPIO 12 Pin']).valueToInt() == 0):
        get_child_object(self, [u'GPIO 12', u'Internal Pull Down Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 12', u'Internal Pull Down Enable']).hide()

    if (get_child_object(self, ['GPIO 12', 'Multiplexing for GPIO 12 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 12']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 12', u'Internal Pull Up Enable']).unhide()

    else:
        get_child_object(self, [u'GPIO 12', u'Internal Pull Up Enable']).hide()

    if (get_child_object(self, ['GPIO 12', 'Multiplexing for GPIO 12 Pin']).valueToInt() == 0) and (get_child_object(self, ['GPIO 12']).EventCategory in ['input', 'output']):
        get_child_object(self, [u'GPIO 12', u'GPIO Event Polarity']).unhide()

    else:
        get_child_object(self, [u'GPIO 12', u'GPIO Event Polarity']).hide()

    return self.childrenAsListDMGenerator()

def multiplexingforgpio0pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 1

    return long(return_value)

def multiplexingforgpio0pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 1):
        argsList[0].setFromInt(1)
        argsList[1].setFromInt(0)
    elif (value == 0):
        argsList[0].setFromInt(0)
        argsList[1].setFromInt(0)


def interruptenable_0x5c_fo_32_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def multiplexingforgpio1pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 2

    return long(return_value)

def multiplexingforgpio1pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 2):
        argsList[0].setFromInt(1)
    elif (value == 0):
        argsList[0].setFromInt(0)


def interruptenable_0x5c_fo_33_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def multiplexingforgpio2pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 1

    return long(return_value)

def multiplexingforgpio2pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 1):
        argsList[0].setFromInt(1)
        argsList[1].setFromInt(0)
    elif (value == 0):
        argsList[0].setFromInt(0)
        argsList[1].setFromInt(0)


def interruptenable_0x5c_fo_34_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def multiplexingforgpio3pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 2

    return long(return_value)

def multiplexingforgpio3pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 2):
        argsList[0].setFromInt(1)
    elif (value == 0):
        argsList[0].setFromInt(0)


def interruptenable_0x5c_fo_35_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def multiplexingforgpio4pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 2
    elif (argsList[1].valueToInt() == 1):
        return_value = 1

    return long(return_value)

def multiplexingforgpio4pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 2):
        argsList[0].setFromInt(1)
        argsList[1].setFromInt(0)
        argsList[2].setFromInt(0)
    elif (value == 1):
        argsList[0].setFromInt(0)
        argsList[1].setFromInt(1)
        argsList[2].setFromInt(0)
    elif (value == 0):
        argsList[0].setFromInt(0)
        argsList[1].setFromInt(0)
        argsList[2].setFromInt(0)


def interruptenable_0x5c_fo_36_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def multiplexingforgpio5pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 2
    elif (argsList[1].valueToInt() == 1):
        return_value = 1

    return long(return_value)

def multiplexingforgpio5pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 2):
        argsList[0].setFromInt(1)
        argsList[1].setFromInt(0)
        argsList[2].setFromInt(0)
    elif (value == 1):
        argsList[0].setFromInt(0)
        argsList[1].setFromInt(1)
        argsList[2].setFromInt(0)
    elif (value == 0):
        argsList[0].setFromInt(0)
        argsList[1].setFromInt(0)
        argsList[2].setFromInt(0)


def interruptenable_0x5c_fo_37_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def multiplexingforgpio6pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 2

    return long(return_value)

def multiplexingforgpio6pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 2):
        argsList[0].setFromInt(1)
    elif (value == 0):
        argsList[0].setFromInt(0)


def interruptenable_0x5c_fo_38_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def multiplexingforgpio7pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 2

    return long(return_value)

def multiplexingforgpio7pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 2):
        argsList[0].setFromInt(1)
    elif (value == 0):
        argsList[0].setFromInt(0)


def interruptenable_0x5c_fo_39_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def multiplexingforgpio10pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 2

    return long(return_value)

def multiplexingforgpio10pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 2):
        argsList[0].setFromInt(1)
    elif (value == 0):
        argsList[0].setFromInt(0)


def interruptenable_0x5c_fo_42_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def opendrainoutputenable_0x5c_fo_106_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 2):
        return_value = 1

    return long(return_value)

def multiplexingforgpio11pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 1):
        return_value = 2

    return long(return_value)

def multiplexingforgpio11pin_0x5c_fo_0_update_function(value, argsList):
    if (value == 2):
        argsList[0].setFromInt(1)
    elif (value == 0):
        argsList[0].setFromInt(0)


def interruptenable_0x5c_fo_43_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)

def opendrainoutputenable_0x5c_fo_107_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 2):
        return_value = 1

    return long(return_value)

def multiplexingforgpio12pin_0x5c_fo_0_derived_function(argsList):
    return_value = 0

    if (argsList[0].valueToInt() == 0):
        return_value = 0

    return long(return_value)

def interruptenable_0x5c_fo_44_derived_function(argsList):
    return_value = 0

    if (argsList[0].EventCategory == 'input'):
        return_value = 1

    return long(return_value)


class cgpioconfig_0x5c_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'IO Config',
                                           'address': 0x5c,
                                           'byte length': 49,
                                           'permission': 'RO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'IO Config',
                                                         'offset': 0,
                                                         'bit length': 392})

        self.setAsShared()

        GPIO0_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 0',
                                                         'offset': 0,
                                                         'bit length': 296})
        self.dataModel.addChild(GPIO0_dm)

        gpiomuxsel = register_class.cVirtualListDMTerminator(self,
                {'name': 'Multiplexing for GPIO 0 Pin',
                    'offset': 0,
                    'bit length': 2})
        gpiomuxsel.setReportList(['Pin Multiplexed to GPIO', 'Pin Multiplexed to ADC'])
        GPIO0_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 0 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio0pin_0x5c_fo_0_derived_function, multiplexingforgpio0pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 0', 'GPIO AI Enable GPIO 0'], ['IO Config', 'GPIO 0', 'Output Enable']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 128,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO'])
        GPIO0_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(0)

        gpioaiengpio0 = register_class.cListDMTerminator(self,
                {'name': 'GPIO AI Enable GPIO 0',
                    'offset': 224,
                    'bit length': 1})
        gpioaiengpio0.setReportList(['Pin to GPIO', 'Pin to ADC'])
        GPIO0_dm.addChild(gpioaiengpio0)
        gpioaiengpio0.reference_name = "GPIO AI Enable GPIO 0"
        gpioaiengpio0.help = "Assert when GPIO4 is used as an analog input."
        gpioaiengpio0.setMaxValue(1)
        gpioaiengpio0.addUpdateRegisterByName("self")

        gpio0event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 288,
                                                      'bit length': 8})
        gpio0event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO0_dm.addChild(gpio0event)
        gpio0event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio0event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio0event.reference_name = "GPIO Mapped Event"
        gpio0event.help = "Event table mapping for GPIO0. See GPIO Event table."
        gpio0event.hide()
        gpio0event.setMaxValue(143)
        gpio0event.addUpdateRegisterByName("self")

        gpio0event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio0event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 0,
                'bit length': 1})
        GPIO0_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 32,
                'bit length': 1})
        GPIO0_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_32_derived_function, None, [['IO Config', 'GPIO 0']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 64,
                'bit length': 1})
        GPIO0_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 96,
                'bit length': 1})
        GPIO0_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 160,
                'bit length': 1})
        GPIO0_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 192,
                'bit length': 1})
        GPIO0_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 256,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO0_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO0_dm.EventCategory = 0
        GPIO0_dm.MultiplexingType = 0
        GPIO0_dm.addUpdateRegisterByName("self")

        GPIO1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 1',
                                                         'offset': 0,
                                                         'bit length': 304})
        self.dataModel.addChild(GPIO1_dm)

        gpiomuxsel = register_class.cVirtualDictDMTerminator(self,
                                                     {'name': 'Multiplexing for GPIO 1 Pin',
                                                      'offset': 0,
                                                      'bit length': 2})
        gpiomuxsel.setReportDict(OrderedDict([(0, 'Pin Multiplexed to GPIO'), (2, 'Pin Multiplexed to Alternate Function(HPD_TX1)')]))
        GPIO1_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 1 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(2)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio1pin_0x5c_fo_0_derived_function, multiplexingforgpio1pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 1', 'Map Pin to GPIO or Alternate Function']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 129,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO', 'HPD_TX1'])
        GPIO1_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpio1event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 296,
                                                      'bit length': 8})
        gpio1event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO1_dm.addChild(gpio1event)
        gpio1event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio1event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio1event.reference_name = "GPIO Mapped Event"
        gpio1event.help = "Event table mapping for GPIO1. See GPIO Event table."
        gpio1event.hide()
        gpio1event.setMaxValue(143)
        gpio1event.addUpdateRegisterByName("self")

        gpio1event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio1event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 1,
                'bit length': 1})
        GPIO1_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 33,
                'bit length': 1})
        GPIO1_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_33_derived_function, None, [['IO Config', 'GPIO 1']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 65,
                'bit length': 1})
        GPIO1_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 97,
                'bit length': 1})
        GPIO1_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'HPD Open Drain Output Enable',
                'offset': 97,
                'bit length': 1})
        GPIO1_dm.addChild(gpiooden)
        gpiooden.reference_name = "HPD Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 161,
                'bit length': 1})
        GPIO1_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 193,
                'bit length': 1})
        GPIO1_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 257,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO1_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO1_dm.EventCategory = 0
        GPIO1_dm.MultiplexingType = 0
        GPIO1_dm.addUpdateRegisterByName("self")

        GPIO2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 2',
                                                         'offset': 0,
                                                         'bit length': 312})
        self.dataModel.addChild(GPIO2_dm)

        gpiomuxsel = register_class.cVirtualListDMTerminator(self,
                {'name': 'Multiplexing for GPIO 2 Pin',
                    'offset': 0,
                    'bit length': 2})
        gpiomuxsel.setReportList(['Pin Multiplexed to GPIO', 'Pin Multiplexed to ADC'])
        GPIO2_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 2 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio2pin_0x5c_fo_0_derived_function, multiplexingforgpio2pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 2', 'GPIO AI Enable GPIO 2'], ['IO Config', 'GPIO 2', 'Output Enable']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 130,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO'])
        GPIO2_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(0)

        gpioaiengpio2 = register_class.cListDMTerminator(self,
                {'name': 'GPIO AI Enable GPIO 2',
                    'offset': 226,
                    'bit length': 1})
        gpioaiengpio2.setReportList(['Pin to GPIO', 'Pin to ADC'])
        GPIO2_dm.addChild(gpioaiengpio2)
        gpioaiengpio2.reference_name = "GPIO AI Enable GPIO 2"
        gpioaiengpio2.help = "Assert when GPIO4 is used as an analog input."
        gpioaiengpio2.setMaxValue(1)
        gpioaiengpio2.addUpdateRegisterByName("self")

        gpio2event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 304,
                                                      'bit length': 8})
        gpio2event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO2_dm.addChild(gpio2event)
        gpio2event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio2event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio2event.reference_name = "GPIO Mapped Event"
        gpio2event.help = "Event table mapping for GPIO2. See GPIO Event table."
        gpio2event.hide()
        gpio2event.setMaxValue(143)
        gpio2event.addUpdateRegisterByName("self")

        gpio2event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio2event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 2,
                'bit length': 1})
        GPIO2_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 34,
                'bit length': 1})
        GPIO2_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_34_derived_function, None, [['IO Config', 'GPIO 2']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 66,
                'bit length': 1})
        GPIO2_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 98,
                'bit length': 1})
        GPIO2_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 162,
                'bit length': 1})
        GPIO2_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 194,
                'bit length': 1})
        GPIO2_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 258,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO2_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO2_dm.EventCategory = 0
        GPIO2_dm.MultiplexingType = 0
        GPIO2_dm.addUpdateRegisterByName("self")

        GPIO3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 3',
                                                         'offset': 0,
                                                         'bit length': 320})
        self.dataModel.addChild(GPIO3_dm)

        gpiomuxsel = register_class.cVirtualDictDMTerminator(self,
                                                     {'name': 'Multiplexing for GPIO 3 Pin',
                                                      'offset': 0,
                                                      'bit length': 2})
        gpiomuxsel.setReportDict(OrderedDict([(0, 'Pin Multiplexed to GPIO'), (2, 'Pin Multiplexed to Alternate Function(HPD_RX1)')]))
        GPIO3_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 3 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(2)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio3pin_0x5c_fo_0_derived_function, multiplexingforgpio3pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 3', 'Map Pin to GPIO or Alternate Function']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 131,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO', 'HPD_RX1'])
        GPIO3_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpio3event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 312,
                                                      'bit length': 8})
        gpio3event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO3_dm.addChild(gpio3event)
        gpio3event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio3event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio3event.reference_name = "GPIO Mapped Event"
        gpio3event.help = "Event table mapping for GPIO3. See GPIO Event table."
        gpio3event.hide()
        gpio3event.setMaxValue(143)
        gpio3event.addUpdateRegisterByName("self")

        gpio3event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio3event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 3,
                'bit length': 1})
        GPIO3_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 35,
                'bit length': 1})
        GPIO3_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_35_derived_function, None, [['IO Config', 'GPIO 3']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 67,
                'bit length': 1})
        GPIO3_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 99,
                'bit length': 1})
        GPIO3_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 163,
                'bit length': 1})
        GPIO3_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 195,
                'bit length': 1})
        GPIO3_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 259,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO3_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO3_dm.EventCategory = 0
        GPIO3_dm.MultiplexingType = 0
        GPIO3_dm.addUpdateRegisterByName("self")

        GPIO4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 4',
                                                         'offset': 0,
                                                         'bit length': 328})
        self.dataModel.addChild(GPIO4_dm)

        gpiomuxsel = register_class.cVirtualListDMTerminator(self,
                {'name': 'Multiplexing for GPIO 4 Pin',
                    'offset': 0,
                    'bit length': 2})
        gpiomuxsel.setReportList(['Pin Multiplexed to GPIO', 'Pin Multiplexed to ADC', 'Pin Multiplexed to Alternate Function(D+)'])
        GPIO4_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 4 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(2)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio4pin_0x5c_fo_0_derived_function, multiplexingforgpio4pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 4', 'Map Pin to GPIO or Alternate Function'], ['IO Config', 'GPIO 4', 'GPIO 4 Analog Input Control'], ['IO Config', 'GPIO 4', 'Output Enable']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 132,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO', 'D+'])
        GPIO4_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpioaiengpio4 = register_class.cListDMTerminator(self,
                {'name': 'GPIO 4 Analog Input Control',
                    'offset': 228,
                    'bit length': 1})
        gpioaiengpio4.setReportList(['Pin to GPIO', 'Pin to ADC'])
        GPIO4_dm.addChild(gpioaiengpio4)
        gpioaiengpio4.reference_name = "GPIO 4 Analog Input Control"
        gpioaiengpio4.help = "Assert when GPIO4 is used as an analog input. This must also be asserted when PORT_CONTROL.ChargerDetectEnable or ChargerAdvertiseEnable is non-zero."
        gpioaiengpio4.setMaxValue(1)
        gpioaiengpio4.addUpdateRegisterByName("self")

        gpio4event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 320,
                                                      'bit length': 8})
        gpio4event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO4_dm.addChild(gpio4event)
        gpio4event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio4event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio4event.reference_name = "GPIO Mapped Event"
        gpio4event.help = "Event table mapping for GPIO4. See GPIO Event table."
        gpio4event.hide()
        gpio4event.setMaxValue(143)
        gpio4event.addUpdateRegisterByName("self")

        gpio4event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio4event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 4,
                'bit length': 1})
        GPIO4_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 36,
                'bit length': 1})
        GPIO4_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_36_derived_function, None, [['IO Config', 'GPIO 4']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 68,
                'bit length': 1})
        GPIO4_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 100,
                'bit length': 1})
        GPIO4_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 164,
                'bit length': 1})
        GPIO4_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 196,
                'bit length': 1})
        GPIO4_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 260,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO4_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO4_dm.EventCategory = 0
        GPIO4_dm.MultiplexingType = 0
        GPIO4_dm.addUpdateRegisterByName("self")

        GPIO5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 5',
                                                         'offset': 0,
                                                         'bit length': 336})
        self.dataModel.addChild(GPIO5_dm)

        gpiomuxsel = register_class.cVirtualListDMTerminator(self,
                {'name': 'Multiplexing for GPIO 5 Pin',
                    'offset': 0,
                    'bit length': 2})
        gpiomuxsel.setReportList(['Pin Multiplexed to GPIO', 'Pin Multiplexed to ADC', 'Pin Multiplexed to Alternate Function(D-)'])
        GPIO5_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 5 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(2)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio5pin_0x5c_fo_0_derived_function, multiplexingforgpio5pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 5', 'Map Pin to GPIO or Alternate Function'], ['IO Config', 'GPIO 5', 'GPIO 5 Analog Input Control'], ['IO Config', 'GPIO 5', 'Output Enable']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 133,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO', 'D-'])
        GPIO5_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpioaiengpio5 = register_class.cListDMTerminator(self,
                {'name': 'GPIO 5 Analog Input Control',
                    'offset': 229,
                    'bit length': 1})
        gpioaiengpio5.setReportList(['Pin to GPIO', 'Pin to ADC'])
        GPIO5_dm.addChild(gpioaiengpio5)
        gpioaiengpio5.reference_name = "GPIO 5 Analog Input Control"
        gpioaiengpio5.help = "Assert when GPIO5 is used as an analog input. This must also be asserted when PORT_CONTROL.ChargerDetectEnable or ChargerAdvertiseEnable is non-zero."
        gpioaiengpio5.setMaxValue(1)
        gpioaiengpio5.addUpdateRegisterByName("self")

        gpio5event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 328,
                                                      'bit length': 8})
        gpio5event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO5_dm.addChild(gpio5event)
        gpio5event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio5event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio5event.reference_name = "GPIO Mapped Event"
        gpio5event.help = "Event table mapping for GPIO5. See GPIO Event table."
        gpio5event.hide()
        gpio5event.setMaxValue(143)
        gpio5event.addUpdateRegisterByName("self")

        gpio5event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio5event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 5,
                'bit length': 1})
        GPIO5_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 37,
                'bit length': 1})
        GPIO5_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_37_derived_function, None, [['IO Config', 'GPIO 5']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 69,
                'bit length': 1})
        GPIO5_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 101,
                'bit length': 1})
        GPIO5_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 165,
                'bit length': 1})
        GPIO5_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 197,
                'bit length': 1})
        GPIO5_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 261,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO5_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO5_dm.EventCategory = 0
        GPIO5_dm.MultiplexingType = 0
        GPIO5_dm.addUpdateRegisterByName("self")

        GPIO6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 6',
                                                         'offset': 0,
                                                         'bit length': 344})
        self.dataModel.addChild(GPIO6_dm)

        gpiomuxsel = register_class.cVirtualDictDMTerminator(self,
                                                     {'name': 'Multiplexing for GPIO 6 Pin',
                                                      'offset': 0,
                                                      'bit length': 2})
        gpiomuxsel.setReportDict(OrderedDict([(0, 'Pin Multiplexed to GPIO'), (2, 'Pin Multiplexed to Alternate Function(SWD_DAT)')]))
        GPIO6_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 6 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(2)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio6pin_0x5c_fo_0_derived_function, multiplexingforgpio6pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 6', 'Map Pin to GPIO or Alternate Function']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 134,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO', 'SWD_DAT'])
        GPIO6_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpio6event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 336,
                                                      'bit length': 8})
        gpio6event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO6_dm.addChild(gpio6event)
        gpio6event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio6event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio6event.reference_name = "GPIO Mapped Event"
        gpio6event.help = "Event table mapping for GPIO6. See GPIO Event table."
        gpio6event.hide()
        gpio6event.setMaxValue(143)
        gpio6event.addUpdateRegisterByName("self")

        gpio6event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio6event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 6,
                'bit length': 1})
        GPIO6_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 38,
                'bit length': 1})
        GPIO6_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_38_derived_function, None, [['IO Config', 'GPIO 6']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 70,
                'bit length': 1})
        GPIO6_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 102,
                'bit length': 1})
        GPIO6_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 166,
                'bit length': 1})
        GPIO6_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 198,
                'bit length': 1})
        GPIO6_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 262,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO6_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO6_dm.EventCategory = 0
        GPIO6_dm.MultiplexingType = 0
        GPIO6_dm.addUpdateRegisterByName("self")

        GPIO7_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 7',
                                                         'offset': 0,
                                                         'bit length': 352})
        self.dataModel.addChild(GPIO7_dm)

        gpiomuxsel = register_class.cVirtualDictDMTerminator(self,
                                                     {'name': 'Multiplexing for GPIO 7 Pin',
                                                      'offset': 0,
                                                      'bit length': 2})
        gpiomuxsel.setReportDict(OrderedDict([(0, 'Pin Multiplexed to GPIO'), (2, 'Pin Multiplexed to Alternate Function(SWD_CLK)')]))
        GPIO7_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 7 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(2)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio7pin_0x5c_fo_0_derived_function, multiplexingforgpio7pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 7', 'Map Pin to GPIO or Alternate Function']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 135,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO', 'SWD_CLK'])
        GPIO7_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpio7event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 344,
                                                      'bit length': 8})
        gpio7event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO7_dm.addChild(gpio7event)
        gpio7event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio7event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio7event.reference_name = "GPIO Mapped Event"
        gpio7event.help = "Event table mapping for GPIO7. See GPIO Event table."
        gpio7event.hide()
        gpio7event.setMaxValue(143)
        gpio7event.addUpdateRegisterByName("self")

        gpio7event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio7event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 7,
                'bit length': 1})
        GPIO7_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 39,
                'bit length': 1})
        GPIO7_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_39_derived_function, None, [['IO Config', 'GPIO 7']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 71,
                'bit length': 1})
        GPIO7_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 103,
                'bit length': 1})
        GPIO7_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 167,
                'bit length': 1})
        GPIO7_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 199,
                'bit length': 1})
        GPIO7_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 263,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO7_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO7_dm.EventCategory = 0
        GPIO7_dm.MultiplexingType = 0
        GPIO7_dm.addUpdateRegisterByName("self")

        GPIO10_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 10',
                                                         'offset': 0,
                                                         'bit length': 376})
        self.dataModel.addChild(GPIO10_dm)

        gpiomuxsel = register_class.cVirtualDictDMTerminator(self,
                                                     {'name': 'Multiplexing for GPIO 10 Pin',
                                                      'offset': 0,
                                                      'bit length': 2})
        gpiomuxsel.setReportDict(OrderedDict([(0, 'Pin Multiplexed to GPIO'), (2, 'Pin Multiplexed to Alternate Function(I2C1s_IRQ)')]))
        GPIO10_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 10 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(2)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio10pin_0x5c_fo_0_derived_function, multiplexingforgpio10pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 10', 'Map Pin to GPIO or Alternate Function']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 138,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO', 'I2C1s_IRQ'])
        GPIO10_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpio10event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 368,
                                                      'bit length': 8})
        gpio10event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO10_dm.addChild(gpio10event)
        gpio10event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio10event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio10event.reference_name = "GPIO Mapped Event"
        gpio10event.help = "Event table mapping for GPIO10. See GPIO Event table."
        gpio10event.hide()
        gpio10event.setMaxValue(143)
        gpio10event.addUpdateRegisterByName("self")

        gpio10event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio10event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 10,
                'bit length': 1})
        GPIO10_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 42,
                'bit length': 1})
        GPIO10_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_42_derived_function, None, [['IO Config', 'GPIO 10']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 74,
                'bit length': 1})
        GPIO10_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 106,
                'bit length': 1})
        GPIO10_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiooden.registerAsDerivedField(opendrainoutputenable_0x5c_fo_106_derived_function, None, [['IO Config', 'GPIO 10', 'Multiplexing for GPIO 10 Pin']])


        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 170,
                'bit length': 1})
        GPIO10_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 202,
                'bit length': 1})
        GPIO10_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 266,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO10_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO10_dm.EventCategory = 0
        GPIO10_dm.MultiplexingType = 0
        GPIO10_dm.addUpdateRegisterByName("self")

        GPIO11_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 11',
                                                         'offset': 0,
                                                         'bit length': 384})
        self.dataModel.addChild(GPIO11_dm)

        gpiomuxsel = register_class.cVirtualDictDMTerminator(self,
                                                     {'name': 'Multiplexing for GPIO 11 Pin',
                                                      'offset': 0,
                                                      'bit length': 2})
        gpiomuxsel.setReportDict(OrderedDict([(0, 'Pin Multiplexed to GPIO'), (2, 'Pin Multiplexed to Alternate Function(I2C2s_IRQ)')]))
        GPIO11_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 11 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(2)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio11pin_0x5c_fo_0_derived_function, multiplexingforgpio11pin_0x5c_fo_0_update_function, [['IO Config', 'GPIO 11', 'Map Pin to GPIO or Alternate Function']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 139,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO', 'I2C2s_IRQ'])
        GPIO11_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(1)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpio11event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 376,
                                                      'bit length': 8})
        gpio11event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO11_dm.addChild(gpio11event)
        gpio11event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio11event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio11event.reference_name = "GPIO Mapped Event"
        gpio11event.help = "Event table mapping for GPIO11. See GPIO Event table."
        gpio11event.hide()
        gpio11event.setMaxValue(143)
        gpio11event.addUpdateRegisterByName("self")

        gpio11event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio11event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 11,
                'bit length': 1})
        GPIO11_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 43,
                'bit length': 1})
        GPIO11_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_43_derived_function, None, [['IO Config', 'GPIO 11']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 75,
                'bit length': 1})
        GPIO11_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 107,
                'bit length': 1})
        GPIO11_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiooden.registerAsDerivedField(opendrainoutputenable_0x5c_fo_107_derived_function, None, [['IO Config', 'GPIO 11', 'Multiplexing for GPIO 11 Pin']])


        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 171,
                'bit length': 1})
        GPIO11_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 203,
                'bit length': 1})
        GPIO11_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 267,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO11_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO11_dm.EventCategory = 0
        GPIO11_dm.MultiplexingType = 0
        GPIO11_dm.addUpdateRegisterByName("self")

        GPIO12_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO 12',
                                                         'offset': 0,
                                                         'bit length': 392})
        self.dataModel.addChild(GPIO12_dm)

        gpiomuxsel = register_class.cVirtualListDMTerminator(self,
                {'name': 'Multiplexing for GPIO 12 Pin',
                    'offset': 0,
                    'bit length': 2})
        gpiomuxsel.setReportList(['Pin Multiplexed to GPIO'])
        GPIO12_dm.addChild(gpiomuxsel)
        gpiomuxsel.reference_name = "Multiplexing for GPIO 12 Pin"
        gpiomuxsel.help = "virtual_control"
        gpiomuxsel.setMaxValue(0)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpiomuxsel.registerAsDerivedField(multiplexingforgpio12pin_0x5c_fo_0_derived_function, None, [['IO Config', 'GPIO 12', 'Map Pin to GPIO or Alternate Function']])


        gpiomuxsel = register_class.cListDMTerminator(self,
                {'name': 'Map Pin to GPIO or Alternate Function',
                    'offset': 140,
                    'bit length': 1})
        gpiomuxsel.setReportList(['GPIO'])
        GPIO12_dm.addChild(gpiomuxsel)
        gpiomuxsel.setMethodSetFromInt(mappintogpiooralternatefunction_set_from_int)
        gpiomuxsel.reference_name = "Map Pin to GPIO or Alternate Function"
        gpiomuxsel.help = "Selects between GPIO (0) and Secondary Function (1) for each GPIO. See the subsection below for more details."
        gpiomuxsel.hide()
        gpiomuxsel.setMaxValue(0)
        gpiomuxsel.addUpdateRegisterByName("self")

        gpio12event = register_class.cDictDMTerminator(self,
                                                     {'name': 'GPIO Mapped Event',
                                                      'offset': 384,
                                                      'bit length': 8})
        gpio12event.setReportDict(OrderedDict([(0, 'Disable'), (1, 'plugevent_port1 (1)'), (3, 'cable_orientation_event_port1 (3)'), (5, 'amsel_event_port1 (5)'), (7, 'sourcepdo1contract_port1 (7)'), (8, 'sourcepdo2contract_port1 (8)'), (9, 'sourcepdo3contract_port1 (9)'), (10, 'sourcepdo4contract_port1 (10)'), (11, 'sourcepdocontractbit0_port1 (11)'), (12, 'sourcepdocontractbit1_port1 (12)'), (13, 'sourcepdocontractbit2_port1 (13)'), (21, 'usb3_event_port1 (21)'), (23, 'dp_mode_selection_event_port1 (23)'), (25, 'user_svid_active_event_port1 (25)'), (27, 'dp_or_usb3_event_port1 (27)'), (29, 'ufp_dfp_event_port1 (29)'), (31, 'tbt_mode_selection_event_port1 (31)'), (33, 'fault_input_event_port1 (33)'), (35, 'fault_condition_active_low_event_port1 (35)'), (37, 'retimer_force_pwr_event_port1 (37)'), (39, 'retimer_reset_n_event_port1 (39)'), (41, 'prochot_n_event (41)'), (42, 'retimer_soc_ovr_force_pwr_event (42)'), (43, 'barrel_jack_event (43)'), (44, 'ufp_indicator_event (44)'), (45, 'prevent_drswap_to_ufp_event (45)'), (47, 'prevent_high_current_contract_event (47)'), (48, 'audio_mode_event_port1 (48)'), (50, 'debug_accessory_mode_event_port1 (50)'), (52, 'vconn_on_event_port1 (52)'), (54, 'prs_ext_vbus_discharge_event_port1 (54)'), (56, 'i2c3_controller_irq_event (56)'), (61, 'dp_dm_mux_enable_event_port1 (61)'), (65, 'load_switch_drive_port1 (65)'), (68, 'resetz (68)'), (69, 'mreset (69)'), (70, 'bc1p2_dcp_enabled_port1 (70)'), (72, 'select_cdp_dcp (72)'), (73, 'enablesource_port1 (73)'), (75, 'attachedassink (75)'), (76, 'pdnegotiationinprocess_port1 (76)'), (78, 'sps_gpu_2_event (78)'), (79, 'crossbar_irq (79)'), (84, 'fault_ovp_port1 (84)'), (87, 'i2c3_controller_active (87)'), (92, 'vbus_sense_divider_event__port_1 (92)'), (94, 'soc_rst_input_event (94)'), (96, 'i2c_extpp_comm_fail  (96)'), (99, 'enablesource_highcontract_vbus_event_global (99)'), (101, 'plug_insert_or_removal__device (101)'), (102, 'mux_oe_n_event__port_1 (102)'), (110, 'billboard_event__port_0 (110)'), (111, 'billboard_event__port_1 (111)'), (113, 'dmc_force_safe_state_event (113)'), (115, 'hub_typec_disable_event__port_1 (115)'), (116, 'hub_typec_disable_event__port_2 (116)'), (117, 'gr_typec_disable_event__port_1 (117)'), (118, 'gr_typec_disable_event__port_2 (118)'), (121, 'usb4_event__port_0 (121)'), (122, 'usb4_event__port_1 (122)'), (123, 'port_specific_event1_irq_port_0 (123)'), (124, 'port_specific_event1_irq_port_1 (124)'), (125, 'port_specific_event2_irq_port_0 (125)'), (126, 'port_specific_event2_irq_port_1 (126)'), (127, 'pp_virtual_switch1_enable (127)'), (131, 'extdcdc_irq_event__port_1 (131)'), (132, 'extdcdc_irq_event__port_2 (132)'), (133, 'dmc_force_safe_state_event (133)'), (136, 'capmismatchblinking__port1 (136)'), (137, 'capmismatchblinking__port2 (137)'), (138, 'greater_than_thershold_voltage_event__port_1 (138)'), (139, 'greater_than_thershold_voltage_event__port_2 (139)'), (140, 'load_switch_drive_event_delayed__port_1 (140)'), (141, 'load_switch_drive_event_delayed__port_2 (141)'), (142, 'epr_discharge_event__port_1 (142)'), (143, 'epr_discharge_event__port_2 (143)'), (-2, 'Disable'), (-1, 'Output Enabled without Event')]))
        GPIO12_dm.addChild(gpio12event)
        gpio12event.setMethodSetFromInt(gpiomappedevent_set_from_int)
        gpio12event.setMethodValueToInt(gpiomappedevent_value_to_int)
        gpio12event.reference_name = "GPIO Mapped Event"
        gpio12event.help = "Event table mapping for GPIO12. See GPIO Event table."
        gpio12event.hide()
        gpio12event.setMaxValue(143)
        gpio12event.addUpdateRegisterByName("self")

        gpio12event.GPIOEventDictList = [{'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plugevent_port1 (1)', 'inout': 'output', 'number': 1}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'cable_orientation_event_port1 (3)', 'inout': 'output', 'number': 3}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'amsel_event_port1 (5)', 'inout': 'output', 'number': 5}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sourcepdo1contract_port1 (7)', 'inout': 'output', 'number': 7}, {'name': 'sourcepdo2contract_port1 (8)', 'inout': 'output', 'number': 8}, {'name': 'sourcepdo3contract_port1 (9)', 'inout': 'output', 'number': 9}, {'name': 'sourcepdo4contract_port1 (10)', 'inout': 'output', 'number': 10}, {'name': 'sourcepdocontractbit0_port1 (11)', 'inout': 'output', 'number': 11}, {'name': 'sourcepdocontractbit1_port1 (12)', 'inout': 'output', 'number': 12}, {'name': 'sourcepdocontractbit2_port1 (13)', 'inout': 'output', 'number': 13}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb3_event_port1 (21)', 'inout': 'output', 'number': 21}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_mode_selection_event_port1 (23)', 'inout': 'output', 'number': 23}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'user_svid_active_event_port1 (25)', 'inout': 'output', 'number': 25}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_or_usb3_event_port1 (27)', 'inout': 'output', 'number': 27}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'ufp_dfp_event_port1 (29)', 'inout': 'output', 'number': 29}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'tbt_mode_selection_event_port1 (31)', 'inout': 'output', 'number': 31}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_input_event_port1 (33)', 'inout': 'input', 'number': 33}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_condition_active_low_event_port1 (35)', 'inout': 'output', 'number': 35}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_force_pwr_event_port1 (37)', 'inout': 'output', 'number': 37}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'retimer_reset_n_event_port1 (39)', 'inout': 'output', 'number': 39}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prochot_n_event (41)', 'inout': 'output', 'number': 41}, {'name': 'retimer_soc_ovr_force_pwr_event (42)', 'inout': 'input', 'number': 42}, {'name': 'barrel_jack_event (43)', 'inout': 'input', 'number': 43}, {'name': 'ufp_indicator_event (44)', 'inout': 'output', 'number': 44}, {'name': 'prevent_drswap_to_ufp_event (45)', 'inout': 'input', 'number': 45}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prevent_high_current_contract_event (47)', 'inout': 'input', 'number': 47}, {'name': 'audio_mode_event_port1 (48)', 'inout': 'output', 'number': 48}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'debug_accessory_mode_event_port1 (50)', 'inout': 'output', 'number': 50}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vconn_on_event_port1 (52)', 'inout': 'output', 'number': 52}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'prs_ext_vbus_discharge_event_port1 (54)', 'inout': 'output', 'number': 54}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_irq_event (56)', 'inout': 'input', 'number': 56}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dp_dm_mux_enable_event_port1 (61)', 'inout': 'output', 'number': 61}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'load_switch_drive_port1 (65)', 'inout': 'output', 'number': 65}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'resetz (68)', 'inout': 'output', 'number': 68}, {'name': 'mreset (69)', 'inout': 'input', 'number': 69}, {'name': 'bc1p2_dcp_enabled_port1 (70)', 'inout': 'output', 'number': 70}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'select_cdp_dcp (72)', 'inout': 'input', 'number': 72}, {'name': 'enablesource_port1 (73)', 'inout': 'output', 'number': 73}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'attachedassink (75)', 'inout': 'output', 'number': 75}, {'name': 'pdnegotiationinprocess_port1 (76)', 'inout': 'output', 'number': 76}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'sps_gpu_2_event (78)', 'inout': 'input', 'number': 78}, {'name': 'crossbar_irq (79)', 'inout': 'input', 'number': 79}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'fault_ovp_port1 (84)', 'inout': 'output', 'number': 84}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c3_controller_active (87)', 'inout': 'output', 'number': 87}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'vbus_sense_divider_event__port_1 (92)', 'inout': 'output', 'number': 92}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'soc_rst_input_event (94)', 'inout': 'input', 'number': 94}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'i2c_extpp_comm_fail  (96)', 'inout': 'output', 'number': 96}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'enablesource_highcontract_vbus_event_global (99)', 'inout': 'output', 'number': 99}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'plug_insert_or_removal__device (101)', 'inout': 'output', 'number': 101}, {'name': 'mux_oe_n_event__port_1 (102)', 'inout': 'output', 'number': 102}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'billboard_event__port_0 (110)', 'inout': 'output', 'number': 110}, {'name': 'billboard_event__port_1 (111)', 'inout': 'output', 'number': 111}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'dmc_force_safe_state_event (113)', 'inout': 'input', 'number': 113}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'hub_typec_disable_event__port_1 (115)', 'inout': 'input', 'number': 115}, {'name': 'hub_typec_disable_event__port_2 (116)', 'inout': 'input', 'number': 116}, {'name': 'gr_typec_disable_event__port_1 (117)', 'inout': 'input', 'number': 117}, {'name': 'gr_typec_disable_event__port_2 (118)', 'inout': 'input', 'number': 118}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'usb4_event__port_0 (121)', 'inout': 'output', 'number': 121}, {'name': 'usb4_event__port_1 (122)', 'inout': 'output', 'number': 122}, {'name': 'port_specific_event1_irq_port_0 (123)', 'inout': 'output', 'number': 123}, {'name': 'port_specific_event1_irq_port_1 (124)', 'inout': 'output', 'number': 124}, {'name': 'port_specific_event2_irq_port_0 (125)', 'inout': 'output', 'number': 125}, {'name': 'port_specific_event2_irq_port_1 (126)', 'inout': 'output', 'number': 126}, {'name': 'pp_virtual_switch1_enable (127)', 'inout': 'output', 'number': 127}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'extdcdc_irq_event__port_1 (131)', 'inout': 'input', 'number': 131}, {'name': 'extdcdc_irq_event__port_2 (132)', 'inout': 'input', 'number': 132}, {'name': 'dmc_force_safe_state_event (133)', 'inout': 'output', 'number': 133}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'Disable', 'inout': 'neither', 'number': 0}, {'name': 'capmismatchblinking__port1 (136)', 'inout': 'output', 'number': 136}, {'name': 'capmismatchblinking__port2 (137)', 'inout': 'output', 'number': 137}, {'name': 'greater_than_thershold_voltage_event__port_1 (138)', 'inout': 'output', 'number': 138}, {'name': 'greater_than_thershold_voltage_event__port_2 (139)', 'inout': 'output', 'number': 139}, {'name': 'load_switch_drive_event_delayed__port_1 (140)', 'inout': 'output', 'number': 140}, {'name': 'load_switch_drive_event_delayed__port_2 (141)', 'inout': 'output', 'number': 141}, {'name': 'epr_discharge_event__port_1 (142)', 'inout': 'output', 'number': 142}, {'name': 'epr_discharge_event__port_2 (143)', 'inout': 'output', 'number': 143}, {'name': 'Disable', 'inout': 'neither', 'number': -2}, {'name': 'Output Enabled without Event', 'inout': 'output', 'number': -1}]
        gpio12event.registerAsCheckedField(gpio_mapped_event_0x5c_fo_288_check_function, [["Global System Configuration", "TBT Controller Type"]])

        gpiooe = register_class.cBooleanDMTerminator(self,
                {'name': 'Output Enable',
                'offset': 12,
                'bit length': 1})
        GPIO12_dm.addChild(gpiooe)
        gpiooe.setMethodSetFromInt(outputenable_set_from_int)
        gpiooe.reference_name = "Output Enable"
        gpiooe.help = "Controls output enable for each GPIO (1=Output Enabled, 0=Hi-Z). Note that all GPIO may not be configurable as an output (see data-sheet)."
        gpiooe.hide()

        gpiointen = register_class.cBooleanDMTerminator(self,
                {'name': 'Interrupt Enable',
                'offset': 44,
                'bit length': 1})
        GPIO12_dm.addChild(gpiointen)
        gpiointen.reference_name = "Interrupt Enable"
        gpiointen.help = "Controls interrupt enable for each GPIO (1=Interrupt Enabled, 0=Interrupt Disabled). Note that all GPIO pins may not be configured as inputs (see the data-sheet)."
        gpiointen.hide()

        gpiointen.registerAsDerivedField(interruptenable_0x5c_fo_44_derived_function, None, [['IO Config', 'GPIO 12']])


        gpiodata = register_class.cBooleanDMTerminator(self,
                {'name': 'Initial Value',
                'offset': 76,
                'bit length': 1})
        GPIO12_dm.addChild(gpiodata)
        gpiodata.reference_name = "Initial Value"
        gpiodata.help = "Controls default output level for each GPIO enabled as output (0=Drive Low, 1=Drive High)"
        gpiodata.hide()

        gpiooden = register_class.cBooleanDMTerminator(self,
                {'name': 'Open Drain Output Enable',
                'offset': 108,
                'bit length': 1})
        GPIO12_dm.addChild(gpiooden)
        gpiooden.reference_name = "Open Drain Output Enable"
        gpiooden.help = "Controls push-pull (0) vs. open-drain (1) setting for each configurable GPIO."
        gpiooden.hide()

        gpiopden = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Down Enable',
                'offset': 172,
                'bit length': 1})
        GPIO12_dm.addChild(gpiopden)
        gpiopden.reference_name = "Internal Pull Down Enable"
        gpiopden.help = "Controls weak pull-down setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopden.hide()

        gpiopuen = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Pull Up Enable',
                'offset': 204,
                'bit length': 1})
        GPIO12_dm.addChild(gpiopuen)
        gpiopuen.reference_name = "Internal Pull Up Enable"
        gpiopuen.help = "Controls weak pull-up setting for each configurable GPIO (1=Enabled, 0=Disabled)."
        gpiopuen.hide()

        gpioeventpol = register_class.cListDMTerminator(self,
                {'name': 'GPIO Event Polarity',
                    'offset': 268,
                    'bit length': 1})
        gpioeventpol.setReportList(['Direct Mapped Event', 'Inverted Event'])
        GPIO12_dm.addChild(gpioeventpol)
        gpioeventpol.reference_name = "GPIO Event Polarity"
        gpioeventpol.help = "Controls polarity of a selected output event for each GPIO. Assert the bit for a given GPIO to invert the polarity of the event mapped to it. This field has no impact for input GPIO Events."
        gpioeventpol.hide()
        gpioeventpol.setMaxValue(1)

        GPIO12_dm.EventCategory = 0
        GPIO12_dm.MultiplexingType = 0
        GPIO12_dm.addUpdateRegisterByName("self")

        self.dataModel.parent = self
        self.dataModel.setDataModelGenerator(gpioconfig_dm_generator)

        update_function = get_updater_function("gpioconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cretimerdebugmode_0x5d_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Retimer Debug Register',
                                           'address': 0x5d,
                                           'byte length': 4,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Retimer Debug Register',
                                                         'offset': 0,
                                                         'bit length': 32})
        ampicl = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'AMPICL',
                                                      'offset': 0,
                                                      'bit length': 2})
        self.dataModel.addChild(ampicl)
        ampicl.reference_name = "AMPICL"
        ampicl.setMaxValue(3)
        ampicl.setMinValue(0)
        emphasisicl = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'EMPHASISICL',
                                                      'offset': 2,
                                                      'bit length': 2})
        self.dataModel.addChild(emphasisicl)
        emphasisicl.reference_name = "EMPHASISICL"
        emphasisicl.setMaxValue(3)
        emphasisicl.setMinValue(0)
        requestedwindowsize = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Requested Window Size',
                                                      'offset': 4,
                                                      'bit length': 2})
        self.dataModel.addChild(requestedwindowsize)
        requestedwindowsize.reference_name = "Requested Window Size"
        requestedwindowsize.setMaxValue(3)
        requestedwindowsize.setMinValue(0)
        tpstype = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'TPS Type',
                                                      'offset': 6,
                                                      'bit length': 2})
        self.dataModel.addChild(tpstype)
        tpstype.reference_name = "TPS Type"
        tpstype.setMaxValue(3)
        tpstype.setMinValue(0)
        debugrxlocked = register_class.cBooleanDMTerminator(self,
                {'name': 'Debug RX Locked',
                'offset': 15,
                'bit length': 1})
        self.dataModel.addChild(debugrxlocked)
        debugrxlocked.reference_name = "Debug RX Locked"
        ampdb = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'AMPDB',
                                                      'offset': 16,
                                                      'bit length': 2})
        self.dataModel.addChild(ampdb)
        ampdb.reference_name = "AMPDB"
        ampdb.setMaxValue(3)
        ampdb.setMinValue(0)
        emphasisdb = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'EMPHASISDB',
                                                      'offset': 18,
                                                      'bit length': 2})
        self.dataModel.addChild(emphasisdb)
        emphasisdb.reference_name = "EMPHASISDB"
        emphasisdb.setMaxValue(3)
        emphasisdb.setMinValue(0)
        freq = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Freq',
                                                      'offset': 20,
                                                      'bit length': 2})
        self.dataModel.addChild(freq)
        freq.reference_name = "Freq"
        freq.setMaxValue(3)
        freq.setMinValue(0)
        lanecount = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Lane Count',
                                                      'offset': 22,
                                                      'bit length': 2})
        self.dataModel.addChild(lanecount)
        lanecount.reference_name = "Lane Count"
        lanecount.setMaxValue(3)
        lanecount.setMinValue(0)
        additionalskew = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Additional Skew',
                                                      'offset': 24,
                                                      'bit length': 3})
        self.dataModel.addChild(additionalskew)
        additionalskew.reference_name = "Additional Skew"
        additionalskew.setMaxValue(7)
        additionalskew.setMinValue(0)
        debugmodetype = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Debug Mode Type',
                                                      'offset': 28,
                                                      'bit length': 2})
        self.dataModel.addChild(debugmodetype)
        debugmodetype.reference_name = "Debug Mode Type"
        debugmodetype.setMaxValue(3)
        debugmodetype.setMinValue(0)
        enable = register_class.cBooleanDMTerminator(self,
                {'name': 'Enable',
                'offset': 30,
                'bit length': 1})
        self.dataModel.addChild(enable)
        enable.reference_name = "Enable"
        tracemode = register_class.cBooleanDMTerminator(self,
                {'name': 'Trace Mode',
                'offset': 31,
                'bit length': 1})
        self.dataModel.addChild(tracemode)
        tracemode.reference_name = "Trace Mode"

        update_function = get_updater_function("retimerdebugmode_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cdatastatus_0x5f_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Data Status',
                                           'address': 0x5f,
                                           'byte length': 5,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Status',
                                                         'offset': 0,
                                                         'bit length': 40})
        dataconnection = register_class.cListDMTerminator(self,
                {'name': 'Data Connection',
                    'offset': 0,
                    'bit length': 1})
        dataconnection.setReportList(['No data connection', 'Data connection present'])
        self.dataModel.addChild(dataconnection)
        dataconnection.reference_name = "Data Connection"
        dataconnection.help = "Status of data connection."
        dataconnection.setMaxValue(1)
        connectionorientation = register_class.cListDMTerminator(self,
                {'name': 'Connection Orientation',
                    'offset': 1,
                    'bit length': 1})
        connectionorientation.setReportList(['Plug is oriented on CC1 (upside-up) or no data connection', 'Plug is oriented on CC2 (upside-down) with a valid data connection'])
        self.dataModel.addChild(connectionorientation)
        connectionorientation.reference_name = "Connection Orientation"
        connectionorientation.help = "Plug orientation"
        connectionorientation.setMaxValue(1)
        retimerorredriver = register_class.cBooleanDMTerminator(self,
                {'name': 'Retimer or Redriver',
                'offset': 2,
                'bit length': 1})
        self.dataModel.addChild(retimerorredriver)
        retimerorredriver.reference_name = "Retimer or Redriver"
        retimerorredriver.help = "Indicates type of active element in the cable."
        overcurrentortemperature = register_class.cBooleanDMTerminator(self,
                {'name': 'Over Current or Temperature',
                'offset': 3,
                'bit length': 1})
        self.dataModel.addChild(overcurrentortemperature)
        overcurrentortemperature.reference_name = "Over Current or Temperature"
        overcurrentortemperature.help = "Over-current or over-temperature has occurred."
        usb2connection = register_class.cListDMTerminator(self,
                {'name': 'USB2 Connection',
                    'offset': 4,
                    'bit length': 1})
        usb2connection.setReportList(['No USB2 connection to USB_RP', "USB2 connection to USB_RP on 'Mission' D+/D- pair"])
        self.dataModel.addChild(usb2connection)
        usb2connection.reference_name = "USB2 Connection"
        usb2connection.help = "Status of USB2 connection"
        usb2connection.setMaxValue(1)
        usb3connection = register_class.cListDMTerminator(self,
                {'name': 'USB3 Connection',
                    'offset': 5,
                    'bit length': 1})
        usb3connection.setReportList(['No USB3 connection', 'USB3 connection on SSTx1/Rx1 if upside-up STx2/Rx2 if upsidedown'])
        self.dataModel.addChild(usb3connection)
        usb3connection.reference_name = "USB3 Connection"
        usb3connection.help = "Status of USB3 connection"
        usb3connection.setMaxValue(1)
        usb3speed = register_class.cListDMTerminator(self,
                {'name': 'USB3 Speed',
                    'offset': 6,
                    'bit length': 1})
        usb3speed.setReportList(['Limited to Gen 1 speed (5Gbps)', 'Allowed to Gen 2 speed (10Gbps)'])
        self.dataModel.addChild(usb3speed)
        usb3speed.reference_name = "USB3 Speed"
        usb3speed.help = "USB3 data speed"
        usb3speed.setMaxValue(1)
        datarole = register_class.cListDMTerminator(self,
                {'name': 'Data Role',
                    'offset': 7,
                    'bit length': 1})
        datarole.setReportList(['DFP', 'UFP'])
        self.dataModel.addChild(datarole)
        datarole.reference_name = "Data Role"
        datarole.help = "USB data role: DFP (0) or UFP (1)."
        datarole.setMaxValue(1)
        dpconnection = register_class.cListDMTerminator(self,
                {'name': 'DP Connection',
                    'offset': 8,
                    'bit length': 1})
        dpconnection.setReportList(['Not Present', 'Present'])
        self.dataModel.addChild(dpconnection)
        dpconnection.reference_name = "DP Connection"
        dpconnection.help = "Asserted when there is a DisplayPort connection."
        dpconnection.setMaxValue(1)
        dpsourcesink = register_class.cBooleanDMTerminator(self,
                {'name': 'DP Source Sink',
                'offset': 9,
                'bit length': 1})
        self.dataModel.addChild(dpsourcesink)
        dpsourcesink.reference_name = "DP Source Sink"
        dpsourcesink.help = "The PD controller does not support DP sink. So this bit always reads back as 0b."
        dppinassignment = register_class.cListDMTerminator(self,
                {'name': 'DP Pin Assignment',
                    'offset': 10,
                    'bit length': 2})
        dppinassignment.setReportList(['Legacy DP USB-C to DP cable (pin assignments E-F if supported)', 'Legacy DP USB-C to USB-C cable (pin assignments C-D if supported)', 'New DP USB-C to USB-C cable (pin assignments A-B if supported)', 'Reserved'])
        self.dataModel.addChild(dppinassignment)
        dppinassignment.reference_name = "DP Pin Assignment"
        dppinassignment.help = "DisplayPort Pin Assignments"
        dppinassignment.setMaxValue(3)
        debugaccessorymode = register_class.cBooleanDMTerminator(self,
                {'name': 'Debug Accessory Mode',
                'offset': 12,
                'bit length': 1})
        self.dataModel.addChild(debugaccessorymode)
        debugaccessorymode.reference_name = "Debug Accessory Mode"
        debugaccessorymode.help = "Asserted when debug accessory is present."
        irqack = register_class.cListDMTerminator(self,
                {'name': 'IRQ Ack',
                    'offset': 13,
                    'bit length': 1})
        irqack.setReportList(['No HPD_IRQ_ACK', 'HPD_IRQ_ACK'])
        self.dataModel.addChild(irqack)
        irqack.reference_name = "IRQ Ack"
        irqack.setMaxValue(1)
        hpdirqsticky = register_class.cListDMTerminator(self,
                {'name': 'HPD IRQ Sticky',
                    'offset': 14,
                    'bit length': 1})
        hpdirqsticky.setReportList(['IRQ Low', 'IRQ High'])
        self.dataModel.addChild(hpdirqsticky)
        hpdirqsticky.reference_name = "HPD IRQ Sticky"
        hpdirqsticky.help = "Status of HPD IRQ event received. This event is from DP Sink to TBT controller through the PD controller. This bit is applicable only when the port is acting as a DisplayPort host in virtual HPD signalling mode."
        hpdirqsticky.setMaxValue(1)
        hpdlevel = register_class.cListDMTerminator(self,
                {'name': 'HPD Level',
                    'offset': 15,
                    'bit length': 1})
        hpdlevel.setReportList(['HPD level Low', 'HPD level High'])
        self.dataModel.addChild(hpdlevel)
        hpdlevel.reference_name = "HPD Level"
        hpdlevel.help = "Status of HPD Level. This is the HPD level received from DisplayPort Sink to TBT controller through the PD controller. This bit is applicable only when the port is acting as a DisplayPort host in virtual HPD signalling mode."
        hpdlevel.setMaxValue(1)
        tbtconnection = register_class.cListDMTerminator(self,
                {'name': 'TBT Connection',
                    'offset': 16,
                    'bit length': 1})
        tbtconnection.setReportList(['No Thunderbolt connection', 'Thunderbolt connection present'])
        self.dataModel.addChild(tbtconnection)
        tbtconnection.reference_name = "TBT Connection"
        tbtconnection.help = "Status of Thunderbolt connection."
        tbtconnection.setMaxValue(1)
        tbttype = register_class.cListDMTerminator(self,
                {'name': 'TBT Type',
                    'offset': 17,
                    'bit length': 1})
        tbttype.setReportList(['Type-C to Type-C Cable', 'Legacy Adaptor'])
        self.dataModel.addChild(tbttype)
        tbttype.reference_name = "TBT Type"
        tbttype.help = "Indicates the type of Thunderbolt connection: Type-C to Type-C cable (0) or Legacy Adaptor (1)"
        tbttype.setMaxValue(1)
        cabletype = register_class.cListDMTerminator(self,
                {'name': 'Cable Type',
                    'offset': 18,
                    'bit length': 1})
        cabletype.setReportList(['Non-Optical', 'Optical'])
        self.dataModel.addChild(cabletype)
        cabletype.reference_name = "Cable Type"
        cabletype.help = "Indicates the type of cable: Non-Optical (0) or Optical (1)"
        cabletype.setMaxValue(1)
        vprodockdetected = register_class.cBooleanDMTerminator(self,
                {'name': 'VPRO Dock Detected',
                'offset': 19,
                'bit length': 1})
        self.dataModel.addChild(vprodockdetected)
        vprodockdetected.reference_name = "VPRO Dock Detected"
        vprodockdetected.help = "Asserted when vPro dock detected."
        activelinktraining = register_class.cBooleanDMTerminator(self,
                {'name': 'Active Link Training',
                'offset': 20,
                'bit length': 1})
        self.dataModel.addChild(activelinktraining)
        activelinktraining.reference_name = "Active Link Training"
        activelinktraining.help = "Asserted when the cable is active with uni-directional LSRX communication."
        debugalternatemode = register_class.cBooleanDMTerminator(self,
                {'name': 'Debug Alternate Mode',
                'offset': 21,
                'bit length': 1})
        self.dataModel.addChild(debugalternatemode)
        debugalternatemode.reference_name = "Debug Alternate Mode"
        debugalternatemode.help = "Asserted when a debug alternate mode is entered."
        activecable = register_class.cBooleanDMTerminator(self,
                {'name': 'Active Cable',
                'offset': 22,
                'bit length': 1})
        self.dataModel.addChild(activecable)
        activecable.reference_name = "Active Cable"
        activecable.help = "Indicates if cable is passive (0) or active (1)."
        usb4connection = register_class.cBooleanDMTerminator(self,
                {'name': 'USB4 Connection',
                'offset': 23,
                'bit length': 1})
        self.dataModel.addChild(usb4connection)
        usb4connection.reference_name = "USB4 Connection"
        usb4connection.help = "Asserted when USB4 mode is entered with the Host Present bit asserted."
        tbtcablespeedsupport = register_class.cListDMTerminator(self,
                {'name': 'TBT Cable Support',
                    'offset': 25,
                    'bit length': 3})
        tbtcablespeedsupport.setReportList(['Reserved', 'USB3.1 gen1 cable (10Gb/s Thunderbolt support)', '10Gb/s only', '10Gb/s and 20Gb/s only'])
        self.dataModel.addChild(tbtcablespeedsupport)
        tbtcablespeedsupport.reference_name = "TBT Cable Support"
        tbtcablespeedsupport.setMaxValue(3)
        tbtcablegen = register_class.cListDMTerminator(self,
                {'name': 'TBT Cable Generation',
                    'offset': 28,
                    'bit length': 2})
        tbtcablegen.setReportList(['3rd generation TBT (10.3125 and 20.625 Gb/s)', '4th generation TBT (10.0 10.3125 20.0 and 20.625 Gb/s)'])
        self.dataModel.addChild(tbtcablegen)
        tbtcablegen.reference_name = "TBT Cable Generation"
        tbtcablegen.help = "Thunderbolt cable generation."
        tbtcablegen.setMaxValue(1)
        debugalternatemodeid = register_class.cHexDMTerminator(self,
                {'name': 'Debug Alternate Mode ID',
                'offset': 32,
                'bit length': 8})
        self.dataModel.addChild(debugalternatemodeid)
        debugalternatemodeid.reference_name = "Debug Alternate Mode ID"
        debugalternatemodeid.help = "NIDnT Overlay Number"

        update_function = get_updater_function("datastatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class crxusersvidattnvdm_0x60_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Received User SVID Attention VDM',
                                           'address': 0x60,
                                           'byte length': 9,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received User SVID Attention VDM',
                                                         'offset': 0,
                                                         'bit length': 72})

        RxAttentionStatus_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Rx Attention Status',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.dataModel.addChild(RxAttentionStatus_dm)

        numvalidvdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid VDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        RxAttentionStatus_dm.addChild(numvalidvdos)
        numvalidvdos.reference_name = "Number Valid VDOs"
        numvalidvdos.help = "Number of valid VDOs received. Each VDO is 4 bytes. The USB PD spec does not allow more than two VDOs."
        numvalidvdos.setMaxValue(6)
        numvalidvdos.setMinValue(0)

        seqnum = register_class.cHexDMTerminator(self,
                {'name': 'Sequence Number',
                'offset': 5,
                'bit length': 3})
        RxAttentionStatus_dm.addChild(seqnum)
        seqnum.reference_name = "Sequence Number"
        seqnum.help = "Increments by one every time this register is updated, rolls over upon reflow."

        DataObjectReceived_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Data Object Received',
                                                         'offset': 8,
                                                         'bit length': 112})
        self.dataModel.addChild(DataObjectReceived_dm)


        DataObject1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#1',
                                                         'offset': 0,
                                                         'bit length': 40})
        DataObjectReceived_dm.addChild(DataObject1_dm)

        rxvdmdo1 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDM Data Object 1',
                'offset': 0,
                'bit length': 32})
        DataObject1_dm.addChild(rxvdmdo1)
        rxvdmdo1.reference_name = "RX VDM Data Object 1"
        rxvdmdo1.help = "VDM header. This field contains the first Data Object of most recently received Attention SVDM."


        DataObject2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#2',
                                                         'offset': 32,
                                                         'bit length': 72})
        DataObjectReceived_dm.addChild(DataObject2_dm)

        rxvdmdo2 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDM Data Object 2',
                'offset': 0,
                'bit length': 32})
        DataObject2_dm.addChild(rxvdmdo2)
        rxvdmdo2.reference_name = "RX VDM Data Object 2"
        rxvdmdo2.help = "Second Data Object of most recently received Attention SVDM. This is the VDO (if present)."

        update_function = get_updater_function("rxusersvidattnvdm_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class crxusersvidothervdm_0x61_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Received User SVID Other VDM',
                                           'address': 0x61,
                                           'byte length': 29,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Received User SVID Other VDM',
                                                         'offset': 0,
                                                         'bit length': 232})

        RxVDMStatus_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Rx VDM Status',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.dataModel.addChild(RxVDMStatus_dm)

        numvalidvdos = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Valid VDOs',
                                                      'offset': 0,
                                                      'bit length': 3})
        RxVDMStatus_dm.addChild(numvalidvdos)
        numvalidvdos.reference_name = "Number Valid VDOs"
        numvalidvdos.help = "Number of DOs received."
        numvalidvdos.setMaxValue(6)
        numvalidvdos.setMinValue(0)

        soptype = register_class.cListDMTerminator(self,
                {'name': 'SOP Type',
                    'offset': 3,
                    'bit length': 2})
        soptype.setReportList(['VDM came from SOP', "VDM came from SOP'", "VDM came from SOP''", 'VDM came from SOP*_Debug'])
        RxVDMStatus_dm.addChild(soptype)
        soptype.reference_name = "SOP Type"
        soptype.help = "Frame type of the message in this register."
        soptype.setMaxValue(3)

        seqnum = register_class.cHexDMTerminator(self,
                {'name': 'Sequence Number',
                'offset': 5,
                'bit length': 3})
        RxVDMStatus_dm.addChild(seqnum)
        seqnum.reference_name = "Sequence Number"
        seqnum.help = "Increments by one every time this register is updated, rolls over upon reflow."

        DataObjectReceived_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Data Object Received',
                                                         'offset': 8,
                                                         'bit length': 432})
        self.dataModel.addChild(DataObjectReceived_dm)


        DataObject1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#1',
                                                         'offset': 0,
                                                         'bit length': 40})
        DataObjectReceived_dm.addChild(DataObject1_dm)

        rxvdmdo1 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDM Data Object 1',
                'offset': 0,
                'bit length': 32})
        DataObject1_dm.addChild(rxvdmdo1)
        rxvdmdo1.reference_name = "RX VDM Data Object 1"
        rxvdmdo1.help = "First Data Object of most recently received VDM."


        DataObject2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#2',
                                                         'offset': 32,
                                                         'bit length': 72})
        DataObjectReceived_dm.addChild(DataObject2_dm)

        rxvdmdo2 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDM Data Object 2',
                'offset': 0,
                'bit length': 32})
        DataObject2_dm.addChild(rxvdmdo2)
        rxvdmdo2.reference_name = "RX VDM Data Object 2"
        rxvdmdo2.help = "Second Data Object of most recently received VDM."


        DataObject3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#3',
                                                         'offset': 64,
                                                         'bit length': 104})
        DataObjectReceived_dm.addChild(DataObject3_dm)

        rxvdmdo3 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDM Data Object 3',
                'offset': 0,
                'bit length': 32})
        DataObject3_dm.addChild(rxvdmdo3)
        rxvdmdo3.reference_name = "RX VDM Data Object 3"
        rxvdmdo3.help = "Third Data Object of most recently received VDM."


        DataObject4_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#4',
                                                         'offset': 96,
                                                         'bit length': 136})
        DataObjectReceived_dm.addChild(DataObject4_dm)

        rxvdmdo4 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDM Data Object 4',
                'offset': 0,
                'bit length': 32})
        DataObject4_dm.addChild(rxvdmdo4)
        rxvdmdo4.reference_name = "RX VDM Data Object 4"
        rxvdmdo4.help = "Fourth Data Object of most recently received VDM."


        DataObject5_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#5',
                                                         'offset': 128,
                                                         'bit length': 168})
        DataObjectReceived_dm.addChild(DataObject5_dm)

        rxvdmdo5 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDM Data Object 5',
                'offset': 0,
                'bit length': 32})
        DataObject5_dm.addChild(rxvdmdo5)
        rxvdmdo5.reference_name = "RX VDM Data Object 5"
        rxvdmdo5.help = "Fifth Data Object of most recently received VDM."


        DataObject6_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#6',
                                                         'offset': 160,
                                                         'bit length': 200})
        DataObjectReceived_dm.addChild(DataObject6_dm)

        rxvdmdo6 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDM Data Object 6',
                'offset': 0,
                'bit length': 32})
        DataObject6_dm.addChild(rxvdmdo6)
        rxvdmdo6.reference_name = "RX VDM Data Object 6"
        rxvdmdo6.help = "Sixth Data Object of most recently received VDM."


        DataObject7_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Data Object#7',
                                                         'offset': 192,
                                                         'bit length': 232})
        DataObjectReceived_dm.addChild(DataObject7_dm)

        rxvdmdo7 = register_class.cHexDMTerminator(self,
                {'name': 'RX VDM Data Object 7',
                'offset': 0,
                'bit length': 32})
        DataObject7_dm.addChild(rxvdmdo7)
        rxvdmdo7.reference_name = "RX VDM Data Object 7"

        update_function = get_updater_function("rxusersvidothervdm_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cbinarydataindices_0x62_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'APP Config Binary Data Indices',
                                           'address': 0x62,
                                           'byte length': 8,
                                           'permission': 'RO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'APP Config Binary Data Indices',
                                                         'offset': 0,
                                                         'bit length': 64})

        self.setAsShared()
        countrycodestartindex = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Country Code Start Index',
                                                      'offset': 0,
                                                      'bit length': 8})
        self.dataModel.addChild(countrycodestartindex)
        countrycodestartindex.reference_name = "Country Code Start Index"
        countrycodestartindex.help = "Start index of the Country Codes. This is an offset into the Application customization binary buffer."
        countrycodestartindex.setMaxValue(255)
        countrycodestartindex.setMinValue(0)
        numberofcountrycodes = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number of Country Codes',
                                                      'offset': 8,
                                                      'bit length': 8})
        self.dataModel.addChild(numberofcountrycodes)
        numberofcountrycodes.reference_name = "Number of Country Codes"
        numberofcountrycodes.help = "Number of Country Codes supported. (Max of 12)"
        numberofcountrycodes.setMaxValue(12)
        numberofcountrycodes.setMinValue(0)
        i2ceventstartindexcommon = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'I2C Event Start Index Common',
                                                      'offset': 16,
                                                      'bit length': 8})
        self.dataModel.addChild(i2ceventstartindexcommon)
        i2ceventstartindexcommon.reference_name = "I2C Event Start Index Common"
        i2ceventstartindexcommon.help = "Start index of I2C Events for both ports. This is an offset into the Application customization binary buffer."
        i2ceventstartindexcommon.setMaxValue(255)
        i2ceventstartindexcommon.setMinValue(0)
        numberofi2ceventscommon = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number of I2C Common Events',
                                                      'offset': 24,
                                                      'bit length': 8})
        self.dataModel.addChild(numberofi2ceventscommon)
        numberofi2ceventscommon.reference_name = "Number of I2C Common Events"
        numberofi2ceventscommon.help = "Number of I2C Events for both ports. (Max of 99)"
        numberofi2ceventscommon.setMaxValue(99)
        numberofi2ceventscommon.setMinValue(0)
        i2ceventstartindexport1 = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'I2C Event Start Index Port 1',
                                                      'offset': 32,
                                                      'bit length': 8})
        self.dataModel.addChild(i2ceventstartindexport1)
        i2ceventstartindexport1.reference_name = "I2C Event Start Index Port 1"
        i2ceventstartindexport1.help = "Start index of I2C Events for Port 1. This is an offset into the Application customization binary buffer.  (Max of 99)"
        i2ceventstartindexport1.setMaxValue(99)
        i2ceventstartindexport1.setMinValue(0)
        numberofi2ceventsport1 = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number of I2C Port 1 Events',
                                                      'offset': 40,
                                                      'bit length': 8})
        self.dataModel.addChild(numberofi2ceventsport1)
        numberofi2ceventsport1.reference_name = "Number of I2C Port 1 Events"
        numberofi2ceventsport1.help = "Number of I2C Events port 1. (Max of 99)"
        numberofi2ceventsport1.setMaxValue(99)
        numberofi2ceventsport1.setMinValue(0)
        i2ceventstartindexport2 = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'I2C Event Start Index Port 2',
                                                      'offset': 48,
                                                      'bit length': 8})
        self.dataModel.addChild(i2ceventstartindexport2)
        i2ceventstartindexport2.reference_name = "I2C Event Start Index Port 2"
        i2ceventstartindexport2.help = "Start index of I2C Events for Port 2. This is an offset into the Application customization binary buffer.  (Max of 99)"
        i2ceventstartindexport2.setMaxValue(99)
        i2ceventstartindexport2.setMinValue(0)
        numberofi2ceventsport2 = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number of I2C Port 2 Events',
                                                      'offset': 56,
                                                      'bit length': 8})
        self.dataModel.addChild(numberofi2ceventsport2)
        numberofi2ceventsport2.reference_name = "Number of I2C Port 2 Events"
        numberofi2ceventsport2.help = "Number of I2C Events port 2. (Max of 99)"
        numberofi2ceventsport2.setMaxValue(99)
        numberofi2ceventsport2.setMinValue(0)

        update_function = get_updater_function("binarydataindices_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cmipividstatus_0x63_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'MIPI VID Status',
                                           'address': 0x63,
                                           'byte length': 1,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'MIPI VID Status',
                                                         'offset': 0,
                                                         'bit length': 8})
        mipividdetected = register_class.cBooleanDMTerminator(self,
                {'name': 'Mipi VID Detected',
                'offset': 0,
                'bit length': 1})
        self.dataModel.addChild(mipividdetected)
        mipividdetected.reference_name = "Mipi VID Detected"
        mipividdetected.help = "This bit is asserted if the MIPI VID mode has been entered. Otherwise this bit is clear."
        debugmodestatus = register_class.cBooleanDMTerminator(self,
                {'name': 'Debug Mode Status',
                'offset': 1,
                'bit length': 1})
        self.dataModel.addChild(debugmodestatus)
        debugmodestatus.reference_name = "Debug Mode Status"
        debugmodestatus.help = "This bit is asserted if the Debug Mode has been entered. Otherwise this bit is clear."

        update_function = get_updater_function("mipividstatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ci2ccontrollerconfig_0x64_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'I2C Controller Config',
                                           'address': 0x64,
                                           'byte length': 12,
                                           'permission': 'RO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'I2C Controller Config',
                                                         'offset': 0,
                                                         'bit length': 96})

        I2CControllerConfig_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'I2C Controller Config',
                                                         'offset': 0,
                                                         'bit length': 95})
        self.dataModel.addChild(I2CControllerConfig_dm)

        targetaddr1 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address 1',
                'offset': 0,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddr1)
        targetaddr1.reference_name = "Target Address 1"
        targetaddr1.help = "Sets I2C address associated with events for index 1."

        targetaddr2 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address 2',
                'offset': 8,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddr2)
        targetaddr2.reference_name = "Target Address 2"
        targetaddr2.help = "Sets I2C address associated with events for index 2."

        targetaddr3 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address 3',
                'offset': 16,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddr3)
        targetaddr3.reference_name = "Target Address 3"
        targetaddr3.help = "Sets I2C address associated with events for index 3."

        targetaddr4 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address 4',
                'offset': 24,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddr4)
        targetaddr4.reference_name = "Target Address 4"
        targetaddr4.help = "Sets I2C address associated with events for index 4."

        targetaddr5 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address 5',
                'offset': 32,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddr5)
        targetaddr5.reference_name = "Target Address 5"
        targetaddr5.help = "Sets I2C address associated with events for index 5."

        targetaddr6 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address 6',
                'offset': 40,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddr6)
        targetaddr6.reference_name = "Target Address 6"
        targetaddr6.help = "Sets I2C address associated with events for index 6."

        targetaddr7 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address 7',
                'offset': 48,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddr7)
        targetaddr7.reference_name = "Target Address 7"
        targetaddr7.help = "Sets I2C address associated with events for index 7."

        targetaddr8 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address 8',
                'offset': 56,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddr8)
        targetaddr8.reference_name = "Target Address 8"
        targetaddr8.help = "Sets I2C address associated with events for index 8."

        targetaddrtbt1 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address TBT 1',
                'offset': 64,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddrtbt1)
        targetaddrtbt1.reference_name = "Target Address TBT 1"
        targetaddrtbt1.help = "Thunderbolt retimer target address for the first Retimer on this port. This is only used if INTEL_VID_CONFIG.TBTRetimerPresent is set to 1."

        targetaddrtbt2 = register_class.cHexDMTerminator(self,
                {'name': 'Target Address TBT 2',
                'offset': 72,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddrtbt2)
        targetaddrtbt2.reference_name = "Target Address TBT 2"
        targetaddrtbt2.help = "Thunderbolt retimer target address for the second Retimer on this port. This is only used if INTEL_VID_CONFIG.DualTBTRetimerPresent is set to 1."

        targetaddrcrossbar = register_class.cHexDMTerminator(self,
                {'name': 'Target Address Crossbar Mux',
                'offset': 80,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(targetaddrcrossbar)
        targetaddrcrossbar.reference_name = "Target Address Crossbar Mux"
        targetaddrcrossbar.help = "Sets I2C address associated with AMD Renoir Mux. This is only used if PORT_CONFIG.AMDI2CMuxEnable is set to 1."

        portindexvalueforcrossbarmuxtarget = register_class.cBooleanDMTerminator(self,
                {'name': 'Port Index Value for Crossbar Mux Target',
                'offset': 87,
                'bit length': 1})
        I2CControllerConfig_dm.addChild(portindexvalueforcrossbarmuxtarget)
        portindexvalueforcrossbarmuxtarget.reference_name = "Port Index Value for Crossbar Mux Target"

        extdcdctargetaddr = register_class.cHexDMTerminator(self,
                {'name': 'External DCDC Target Address',
                'offset': 88,
                'bit length': 7})
        I2CControllerConfig_dm.addChild(extdcdctargetaddr)
        extdcdctargetaddr.reference_name = "External DCDC Target Address"
        extdcdctargetaddr.help = "Configure external DCDC target address here"

        update_function = get_updater_function("i2ccontrollerconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctypecstate_0x69_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Type C State',
                                           'address': 0x69,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Type C State',
                                                         'offset': 0,
                                                         'bit length': 32})
        ccpinforpd = register_class.cListDMTerminator(self,
                {'name': 'CC Pin for PD',
                    'offset': 0,
                    'bit length': 8})
        ccpinforpd.setReportList(['Not connected', 'CC1 is used for USB PD communication', 'CC2 is used for USB PD communication'])
        self.dataModel.addChild(ccpinforpd)
        ccpinforpd.reference_name = "CC Pin for PD"
        ccpinforpd.help = "CC pin used for PD communication."
        ccpinforpd.setMaxValue(2)
        cc1pinstate = register_class.cListDMTerminator(self,
                {'name': 'CC1 Pin State',
                    'offset': 8,
                    'bit length': 8})
        cc1pinstate.setReportList(['Not connected', 'Ra detected (Source only)', 'Rd detected (Source only)', 'USB Default Advertisement detected (SInk only)', '1.5A Advertisement detected (Sink Only)', '3.0A Advertisement detected (Sink Only)'])
        self.dataModel.addChild(cc1pinstate)
        cc1pinstate.reference_name = "CC1 Pin State"
        cc1pinstate.help = "State of CC1 pin"
        cc1pinstate.setMaxValue(5)
        cc2pinstate = register_class.cListDMTerminator(self,
                {'name': 'CC2 Pin State',
                    'offset': 16,
                    'bit length': 8})
        cc2pinstate.setReportList(['Not connected', 'Ra detected (Source only)', 'Rd detected (Source only)', 'USB Default Advertisement detected (SInk only)', '1.5A Advertisement detected (Sink Only)', '3.0A Advertisement detected (Sink Only)'])
        self.dataModel.addChild(cc2pinstate)
        cc2pinstate.reference_name = "CC2 Pin State"
        cc2pinstate.help = "State of CC2 pin"
        cc2pinstate.setMaxValue(5)
        typecportstate = register_class.cDictDMTerminator(self,
                                                     {'name': 'TypeC Port State',
                                                      'offset': 24,
                                                      'bit length': 8})
        typecportstate.setReportDict(OrderedDict([(0, 'Disabled'), (5, 'ErrorRecovery'), (36, 'Unattached.Accessory'), (43, 'AttachWait.Accessory'), (69, 'Try.SRC'), (78, 'TryWait.SNK'), (79, 'Try.SNK'), (80, 'TryWait.SRC'), (96, 'Attached.SRC'), (97, 'Attached.SNK'), (98, 'AudioAccessory'), (99, 'DebugAccessory'), (100, 'AttachWait.SRC'), (101, 'AttachWait.SNK'), (102, 'Unattached.SNK'), (103, 'Unattached.SRC')]))
        self.dataModel.addChild(typecportstate)
        typecportstate.reference_name = "TypeC Port State"
        typecportstate.help = "Present state of Type-C state-machine."
        typecportstate.setMaxValue(103)

        update_function = get_updater_function("typecstate_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cadcresults_0x6a_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'ADC Results',
                                           'address': 0x6a,
                                           'byte length': 13,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'ADC Results',
                                                         'offset': 0,
                                                         'bit length': 104})

        self.setAsShared()
        adcin1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'ADCIN1',
                                                      'offset': 0,
                                                      'bit length': 8})
        adcin1.dictScaleUnits = {'V': 0.014}
        adcin1.defaultUnit = 'V'
        self.dataModel.addChild(adcin1)
        adcin1.reference_name = "ADCIN1"
        adcin1.help = "Most recent voltage on the ADCIN1 pin. (14mV per LSB)"
        adcin1.setMaxValue(255)
        adcin1.setMinValue(0)
        adcin2 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'ADCIN2',
                                                      'offset': 8,
                                                      'bit length': 8})
        adcin2.dictScaleUnits = {'V': 0.014}
        adcin2.defaultUnit = 'V'
        self.dataModel.addChild(adcin2)
        adcin2.reference_name = "ADCIN2"
        adcin2.help = "Most recent voltage on the ADCIN2 pin. (14mV per LSB)"
        adcin2.setMaxValue(255)
        adcin2.setMinValue(0)
        ldo3v3 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'LDO3V3',
                                                      'offset': 16,
                                                      'bit length': 8})
        ldo3v3.dictScaleUnits = {'V': 0.014}
        ldo3v3.defaultUnit = 'V'
        self.dataModel.addChild(ldo3v3)
        ldo3v3.reference_name = "LDO3V3"
        ldo3v3.help = "Most recent voltage on the LDO_3V3 pin. (14mV per LSB)"
        ldo3v3.setMaxValue(255)
        ldo3v3.setMinValue(0)
        pavbus = register_class.cScalingDMTerminator(self,
                                                     {'name': 'VBUS1',
                                                      'offset': 24,
                                                      'bit length': 8})
        pavbus.dictScaleUnits = {'V': 0.098}
        pavbus.defaultUnit = 'V'
        self.dataModel.addChild(pavbus)
        pavbus.reference_name = "VBUS1"
        pavbus.help = "Most recent voltage on the PA_VBUS pin. (98mV per LSB)"
        pavbus.setMaxValue(255)
        pavbus.setMinValue(0)
        ipavbus = register_class.cScalingDMTerminator(self,
                                                     {'name': 'IVBUS1',
                                                      'offset': 40,
                                                      'bit length': 8})
        ipavbus.dictScaleUnits = {'A': 0.0165}
        ipavbus.defaultUnit = 'A'
        self.dataModel.addChild(ipavbus)
        ipavbus.reference_name = "IVBUS1"
        ipavbus.help = "Most recent current measurement through PP_5V1. (16.5mA per LSB)"
        ipavbus.setMaxValue(255)
        ipavbus.setMinValue(0)
        gpio4 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'GPIO4',
                                                      'offset': 56,
                                                      'bit length': 8})
        gpio4.dictScaleUnits = {'V': 0.014}
        gpio4.defaultUnit = 'V'
        self.dataModel.addChild(gpio4)
        gpio4.reference_name = "GPIO4"
        gpio4.help = "Most recent voltage on the GPIO4 pin. (14mV per LSB)"
        gpio4.setMaxValue(255)
        gpio4.setMinValue(0)
        gpio5 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'GPIO5',
                                                      'offset': 64,
                                                      'bit length': 8})
        gpio5.dictScaleUnits = {'V': 0.014}
        gpio5.defaultUnit = 'V'
        self.dataModel.addChild(gpio5)
        gpio5.reference_name = "GPIO5"
        gpio5.help = "Most recent voltage on the GPIO5 pin. (14mV per LSB)"
        gpio5.setMaxValue(255)
        gpio5.setMinValue(0)
        gpio0 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'GPIO0',
                                                      'offset': 72,
                                                      'bit length': 8})
        gpio0.dictScaleUnits = {'V': 0.014}
        gpio0.defaultUnit = 'V'
        self.dataModel.addChild(gpio0)
        gpio0.reference_name = "GPIO0"
        gpio0.help = "Most recent voltage on the GPIO0 pin. (14mV per LSB)"
        gpio0.setMaxValue(255)
        gpio0.setMinValue(0)
        gpio2 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'GPIO2',
                                                      'offset': 80,
                                                      'bit length': 8})
        gpio2.dictScaleUnits = {'V': 0.014}
        gpio2.defaultUnit = 'V'
        self.dataModel.addChild(gpio2)
        gpio2.reference_name = "GPIO2"
        gpio2.help = "Most recent voltage on the GPIO2 pin. (14mV per LSB)"
        gpio2.setMaxValue(255)
        gpio2.setMinValue(0)
        ipavbusmean = register_class.cScalingDMTerminator(self,
                                                     {'name': 'IVBUS1_Mean',
                                                      'offset': 88,
                                                      'bit length': 8})
        ipavbusmean.dictScaleUnits = {' A': 0.0165}
        ipavbusmean.defaultUnit = ' A'
        self.dataModel.addChild(ipavbusmean)
        ipavbusmean.reference_name = "IVBUS1_Mean"
        ipavbusmean.help = "Most recent current peak estimate through PP_5V1. If PORT_CONTROL.EnableCurrentMonitor = 1, this field is an estimate of the recent mean current. It is cleared upon attach for a new connection.(16.5mA per LSB)"
        ipavbusmean.setMaxValue(255)
        ipavbusmean.setMinValue(0)
        ipavbuspeak = register_class.cScalingDMTerminator(self,
                                                     {'name': 'IVBUS2_Peak',
                                                      'offset': 96,
                                                      'bit length': 8})
        ipavbuspeak.dictScaleUnits = {' A': 0.0165}
        ipavbuspeak.defaultUnit = ' A'
        self.dataModel.addChild(ipavbuspeak)
        ipavbuspeak.reference_name = "IVBUS2_Peak"
        ipavbuspeak.help = "Most recent current peak estimate through PP_5V1. If PORT_CONTROL.EnableCurrentMonitor = 1, this field is an estimate of the recent peak current. It is cleared upon attach for a new connection.(16.5mA per LSB)"
        ipavbuspeak.setMaxValue(255)
        ipavbuspeak.setMinValue(0)

        update_function = get_updater_function("adcresults_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ceventconfiguration_0x6c_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'App Config Register',
                                           'address': 0x6c,
                                           'byte length': 60,
                                           'permission': 'RO'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'App Config Register',
                                                         'offset': 0,
                                                         'bit length': 480})

        AppConfigGroup1Settings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'App Config Group 1 Settings',
                                                         'offset': 0,
                                                         'bit length': 160})
        self.dataModel.addChild(AppConfigGroup1Settings_dm)

        appconfigindexentermode1 = register_class.cListDMTerminator(self,
                {'name': 'APP Config Index Entry Mode 1',
                    'offset': 0,
                    'bit length': 8})
        appconfigindexentermode1.setReportList(['None', 'Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        AppConfigGroup1Settings_dm.addChild(appconfigindexentermode1)
        appconfigindexentermode1.reference_name = "APP Config Index Entry Mode 1"
        appconfigindexentermode1.help = "Index pointing to application configuration to use upon GPIO asserted high or Alternate Mode entered events."
        appconfigindexentermode1.setMaxValue(8)

        appconfigindexexitmode1 = register_class.cListDMTerminator(self,
                {'name': 'APP Config Index Exit Mode 1',
                    'offset': 8,
                    'bit length': 8})
        appconfigindexexitmode1.setReportList(['None', 'Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        AppConfigGroup1Settings_dm.addChild(appconfigindexexitmode1)
        appconfigindexexitmode1.reference_name = "APP Config Index Exit Mode 1"
        appconfigindexexitmode1.help = "Index pointing to application configuration to use upon GPIO asserted low or Alternate Mode exit events."
        appconfigindexexitmode1.setMaxValue(8)

        command1interfacemode1 = register_class.cListDMTerminator(self,
                {'name': 'Command 1 Interface Mode 1',
                    'offset': 16,
                    'bit length': 1})
        command1interfacemode1.setReportList(['CMD1 (0x08)', 'CMD2 (0x09)'])
        AppConfigGroup1Settings_dm.addChild(command1interfacemode1)
        command1interfacemode1.reference_name = "Command 1 Interface Mode 1"
        command1interfacemode1.help = "Indicates that this command is applied to CMD1 (0) or CMD2 (1)."
        command1interfacemode1.setMaxValue(1)

        command2interfacemode1 = register_class.cListDMTerminator(self,
                {'name': 'Command 2 Interface Mode 1',
                    'offset': 24,
                    'bit length': 1})
        command2interfacemode1.setReportList(['CMD1 (0x08)', 'CMD2 (0x09)'])
        AppConfigGroup1Settings_dm.addChild(command2interfacemode1)
        command2interfacemode1.reference_name = "Command 2 Interface Mode 1"
        command2interfacemode1.help = "Indicates that this command is applied to CMD1 (0) or CMD2 (1)."
        command2interfacemode1.setMaxValue(1)

        command1entergroupmode1 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 1 Enter Group Mode 1',
                                                      'offset': 32,
                                                      'bit length': 32})
        command1entergroupmode1.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup1Settings_dm.addChild(command1entergroupmode1)
        command1entergroupmode1.reference_name = "Command 1 Enter Group Mode 1"
        command1entergroupmode1.help = "First 4CC command to use upon GPIO asserted high or Alternate Mode entered events. This command cannot be a Task Command."
        command1entergroupmode1.setMaxValue(2018788432)

        command2entergroupmode1 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 2 Enter Group Mode 1',
                                                      'offset': 64,
                                                      'bit length': 32})
        command2entergroupmode1.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup1Settings_dm.addChild(command2entergroupmode1)
        command2entergroupmode1.reference_name = "Command 2 Enter Group Mode 1"
        command2entergroupmode1.help = "Second 4CC command to use upon GPIO asserted high or Alternate Mode entered events. This may be a Task Command."
        command2entergroupmode1.setMaxValue(2018788432)

        command1exitgroupmode1 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 1 Exit Group Mode 1',
                                                      'offset': 96,
                                                      'bit length': 32})
        command1exitgroupmode1.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup1Settings_dm.addChild(command1exitgroupmode1)
        command1exitgroupmode1.reference_name = "Command 1 Exit Group Mode 1"
        command1exitgroupmode1.help = "First 4CC command to use upon GPIO asserted low or Alternate Mode exit events. This command cannot be a Task Command."
        command1exitgroupmode1.setMaxValue(2018788432)

        command2exitgroupmode1 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 2 Exit Group Mode 1',
                                                      'offset': 128,
                                                      'bit length': 32})
        command2exitgroupmode1.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup1Settings_dm.addChild(command2exitgroupmode1)
        command2exitgroupmode1.reference_name = "Command 2 Exit Group Mode 1"
        command2exitgroupmode1.help = "Second 4CC command to use upon GPIO asserted low or Alternate Mode exit events. This command may be a Task Command."
        command2exitgroupmode1.setMaxValue(2018788432)

        AppConfigGroup2Settings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'App Config Group 2 Settings',
                                                         'offset': 160,
                                                         'bit length': 320})
        self.dataModel.addChild(AppConfigGroup2Settings_dm)

        appconfigindexentermode2 = register_class.cListDMTerminator(self,
                {'name': 'APP Config Index Entry Mode 2',
                    'offset': 0,
                    'bit length': 8})
        appconfigindexentermode2.setReportList(['None', 'Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        AppConfigGroup2Settings_dm.addChild(appconfigindexentermode2)
        appconfigindexentermode2.reference_name = "APP Config Index Entry Mode 2"
        appconfigindexentermode2.help = "Index pointing to application configuration to use upon GPIO asserted high or Alternate Mode entered events."
        appconfigindexentermode2.setMaxValue(8)

        appconfigindexexitmode2 = register_class.cListDMTerminator(self,
                {'name': 'APP Config Index Exit Mode 2',
                    'offset': 8,
                    'bit length': 8})
        appconfigindexexitmode2.setReportList(['None', 'Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        AppConfigGroup2Settings_dm.addChild(appconfigindexexitmode2)
        appconfigindexexitmode2.reference_name = "APP Config Index Exit Mode 2"
        appconfigindexexitmode2.help = "Index pointing to application configuration to use upon GPIO asserted low or Alternate Mode exit events."
        appconfigindexexitmode2.setMaxValue(8)

        command1interfacemode2 = register_class.cListDMTerminator(self,
                {'name': 'Command 1 Interface Mode 2',
                    'offset': 16,
                    'bit length': 1})
        command1interfacemode2.setReportList(['CMD1 (0x08)', 'CMD2 (0x09)'])
        AppConfigGroup2Settings_dm.addChild(command1interfacemode2)
        command1interfacemode2.reference_name = "Command 1 Interface Mode 2"
        command1interfacemode2.help = "Indicates that this command is applied to CMD1 (0) or CMD2 (1)."
        command1interfacemode2.setMaxValue(1)

        command2interfacemode2 = register_class.cListDMTerminator(self,
                {'name': 'Command 2 Interface Mode 2',
                    'offset': 24,
                    'bit length': 1})
        command2interfacemode2.setReportList(['CMD1 (0x08)', 'CMD2 (0x09)'])
        AppConfigGroup2Settings_dm.addChild(command2interfacemode2)
        command2interfacemode2.reference_name = "Command 2 Interface Mode 2"
        command2interfacemode2.help = "Indicates that this command is applied to CMD1 (0) or CMD2 (1)."
        command2interfacemode2.setMaxValue(1)

        command1entergroupmode2 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 1 Enter Group Mode 2',
                                                      'offset': 32,
                                                      'bit length': 32})
        command1entergroupmode2.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup2Settings_dm.addChild(command1entergroupmode2)
        command1entergroupmode2.reference_name = "Command 1 Enter Group Mode 2"
        command1entergroupmode2.help = "First 4CC command to use upon GPIO asserted high or Alternate Mode entered events. This command cannot be a Task Command."
        command1entergroupmode2.setMaxValue(2018788432)

        command2entergroupmode2 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 2 Enter Group Mode 2',
                                                      'offset': 64,
                                                      'bit length': 32})
        command2entergroupmode2.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup2Settings_dm.addChild(command2entergroupmode2)
        command2entergroupmode2.reference_name = "Command 2 Enter Group Mode 2"
        command2entergroupmode2.help = "Second 4CC command to use upon GPIO asserted high or Alternate Mode entered events. This may be a Task Command."
        command2entergroupmode2.setMaxValue(2018788432)

        command1exitgroupmode2 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 1 Exit Group Mode 2',
                                                      'offset': 96,
                                                      'bit length': 32})
        command1exitgroupmode2.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup2Settings_dm.addChild(command1exitgroupmode2)
        command1exitgroupmode2.reference_name = "Command 1 Exit Group Mode 2"
        command1exitgroupmode2.help = "First 4CC command to use upon GPIO asserted low or Alternate Mode exit events. This command cannot be a Task Command."
        command1exitgroupmode2.setMaxValue(2018788432)

        command2exitgroupmode2 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 2 Exit Group Mode 2',
                                                      'offset': 128,
                                                      'bit length': 32})
        command2exitgroupmode2.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup2Settings_dm.addChild(command2exitgroupmode2)
        command2exitgroupmode2.reference_name = "Command 2 Exit Group Mode 2"
        command2exitgroupmode2.help = "Second 4CC command to use upon GPIO asserted low or Alternate Mode exit events. This command may be a Task Command."
        command2exitgroupmode2.setMaxValue(2018788432)

        AppConfigGroup3Settings_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'App Config Group 3 Settings',
                                                         'offset': 320,
                                                         'bit length': 480})
        self.dataModel.addChild(AppConfigGroup3Settings_dm)

        appconfigindexentermode3 = register_class.cListDMTerminator(self,
                {'name': 'APP Config Index Entry Mode 3',
                    'offset': 0,
                    'bit length': 8})
        appconfigindexentermode3.setReportList(['None', 'Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        AppConfigGroup3Settings_dm.addChild(appconfigindexentermode3)
        appconfigindexentermode3.reference_name = "APP Config Index Entry Mode 3"
        appconfigindexentermode3.help = "Index pointing to application configuration to use upon GPIO asserted high or Alternate Mode entered events."
        appconfigindexentermode3.setMaxValue(8)

        appconfigindexexitmode3 = register_class.cListDMTerminator(self,
                {'name': 'APP Config Index Exit Mode 3',
                    'offset': 8,
                    'bit length': 8})
        appconfigindexexitmode3.setReportList(['None', 'Virtual Address 0', 'Virtual Address 1', 'Virtual Address 2', 'Virtual Address 3', 'Virtual Address 4', 'Virtual Address 5', 'Virtual Address 6', 'Virtual Address 7'])
        AppConfigGroup3Settings_dm.addChild(appconfigindexexitmode3)
        appconfigindexexitmode3.reference_name = "APP Config Index Exit Mode 3"
        appconfigindexexitmode3.help = "Index pointing to application configuration to use upon GPIO asserted low or Alternate Mode exit events."
        appconfigindexexitmode3.setMaxValue(8)

        command1interfacemode3 = register_class.cListDMTerminator(self,
                {'name': 'Command 1 Interface Mode 3',
                    'offset': 16,
                    'bit length': 1})
        command1interfacemode3.setReportList(['CMD1 (0x08)', 'CMD2 (0x09)'])
        AppConfigGroup3Settings_dm.addChild(command1interfacemode3)
        command1interfacemode3.reference_name = "Command 1 Interface Mode 3"
        command1interfacemode3.help = "Indicates that this command is applied to CMD1 (0) or CMD2 (1)."
        command1interfacemode3.setMaxValue(1)

        command2interfacemode3 = register_class.cListDMTerminator(self,
                {'name': 'Command 2 Interface Mode 3',
                    'offset': 24,
                    'bit length': 1})
        command2interfacemode3.setReportList(['CMD1 (0x08)', 'CMD2 (0x09)'])
        AppConfigGroup3Settings_dm.addChild(command2interfacemode3)
        command2interfacemode3.reference_name = "Command 2 Interface Mode 3"
        command2interfacemode3.help = "Indicates that this command is applied to CMD1 (0) or CMD2 (1)."
        command2interfacemode3.setMaxValue(1)

        command1entergroupmode3 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 1 Enter Group Mode 3',
                                                      'offset': 32,
                                                      'bit length': 32})
        command1entergroupmode3.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup3Settings_dm.addChild(command1entergroupmode3)
        command1entergroupmode3.reference_name = "Command 1 Enter Group Mode 3"
        command1entergroupmode3.help = "First 4CC command to use upon GPIO asserted high or Alternate Mode entered events. This command cannot be a Task Command."
        command1entergroupmode3.setMaxValue(2018788432)

        command2entergroupmode3 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 2 Enter Group Mode 3',
                                                      'offset': 64,
                                                      'bit length': 32})
        command2entergroupmode3.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup3Settings_dm.addChild(command2entergroupmode3)
        command2entergroupmode3.reference_name = "Command 2 Enter Group Mode 3"
        command2entergroupmode3.help = "Second 4CC command to use upon GPIO asserted high or Alternate Mode entered events. This may be a Task Command."
        command2entergroupmode3.setMaxValue(2018788432)

        command1exitgroupmode3 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 1 Exit Group Mode 3',
                                                      'offset': 96,
                                                      'bit length': 32})
        command1exitgroupmode3.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup3Settings_dm.addChild(command1exitgroupmode3)
        command1exitgroupmode3.reference_name = "Command 1 Exit Group Mode 3"
        command1exitgroupmode3.help = "First 4CC command to use upon GPIO asserted low or Alternate Mode exit events. This command cannot be a Task Command."
        command1exitgroupmode3.setMaxValue(2018788432)

        command2exitgroupmode3 = register_class.cDictDMTerminator(self,
                                                     {'name': 'Command 2 Exit Group Mode 3',
                                                      'offset': 128,
                                                      'bit length': 32})
        command2exitgroupmode3.setReportDict(OrderedDict([(1734692417, 'Aneg'), (1414746691, 'CRST'), (1734754884, 'DBfg'), (1381453894, 'FPWR'), (1330204743, 'GPIO'), (1701802055, 'Gpoe'), (1701408839, 'Gpie'), (1752387655, 'GPsh'), (1819496519, 'GPsl'), (1414746696, 'HRST'), (1262702412, 'LOCK'), (1917666637, 'MEMr'), (2001552717, 'MEMw'), (1716470864, 'PDOf'), (2018788432, 'PDTx'), (1497649747, 'SRDY'), (1381585491, 'SRYR'), (1684627783, 'Gaid'), (1145651527, 'GAID'), (1145914145, '!CMD'), (0, 'Unknown (0x00)')]))
        AppConfigGroup3Settings_dm.addChild(command2exitgroupmode3)
        command2exitgroupmode3.reference_name = "Command 2 Exit Group Mode 3"
        command2exitgroupmode3.help = "Second 4CC command to use upon GPIO asserted low or Alternate Mode exit events. This command may be a Task Command."
        command2exitgroupmode3.setMaxValue(2018788432)

        update_function = get_updater_function("eventconfiguration_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cstateconfig_0x6f_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'State Config',
                                           'address': 0x6f,
                                           'byte length': 5,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'State Config',
                                                         'offset': 0,
                                                         'bit length': 40})

        self.setAsShared()
        modulemask = register_class.cHexDMTerminator(self,
                {'name': 'Module Mask',
                'offset': 0,
                'bit length': 32})
        self.dataModel.addChild(modulemask)
        modulemask.reference_name = "Module Mask"
        modulemask.help = "#ph ishcondition=legacy=filter1#make HI look like this.#/ph#"
        modulemask.hide()
        portmask = register_class.cHexDMTerminator(self,
                {'name': 'Port Mask',
                'offset': 32,
                'bit length': 2})
        self.dataModel.addChild(portmask)
        portmask.reference_name = "Port Mask"
        portmask.hide()

        update_function = get_updater_function("stateconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class csleepconfig_0x70_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Sleep Control Register',
                                           'address': 0x70,
                                           'byte length': 1,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sleep Control Register',
                                                         'offset': 0,
                                                         'bit length': 8})

        self.setAsShared()
        sleepmodeallowed = register_class.cBooleanDMTerminator(self,
                {'name': 'Sleep Mode Allowed',
                'offset': 0,
                'bit length': 1})
        self.dataModel.addChild(sleepmodeallowed)
        sleepmodeallowed.reference_name = "Sleep Mode Allowed"
        sleepmodeallowed.help = "If this bit is asserted the PD controller will enter sleep modes after device is idle for Sleep Time."
        sleeptime = register_class.cListDMTerminator(self,
                {'name': 'Sleep Time',
                    'offset': 1,
                    'bit length': 2})
        sleeptime.setReportList(['Reserved', '100 ms', '1200 ms'])
        self.dataModel.addChild(sleeptime)
        sleeptime.reference_name = "Sleep Time"
        sleeptime.help = "Minimum time the PD controller waits before entering sleep mode."
        sleeptime.setMaxValue(2)

        update_function = get_updater_function("sleepconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cgpiostatus_0x72_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'GPIO Status',
                                           'address': 0x72,
                                           'byte length': 8,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'GPIO Status',
                                                         'offset': 0,
                                                         'bit length': 64})

        self.setAsShared()
        gpio0data = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 0 Data',
                'offset': 0,
                'bit length': 1})
        self.dataModel.addChild(gpio0data)
        gpio0data.reference_name = "GPIO 0 Data"
        gpio0data.help = "Asserted if a logic high is detected on the GPIO."
        gpio1data = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 1 Data',
                'offset': 1,
                'bit length': 1})
        self.dataModel.addChild(gpio1data)
        gpio1data.reference_name = "GPIO 1 Data"
        gpio1data.help = "Asserted if a logic high is detected on the GPIO."
        gpio2data = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 2 Data',
                'offset': 2,
                'bit length': 1})
        self.dataModel.addChild(gpio2data)
        gpio2data.reference_name = "GPIO 2 Data"
        gpio2data.help = "Asserted if a logic high is detected on the GPIO."
        gpio3data = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 3 Data',
                'offset': 3,
                'bit length': 1})
        self.dataModel.addChild(gpio3data)
        gpio3data.reference_name = "GPIO 3 Data"
        gpio3data.help = "Asserted if a logic high is detected on the GPIO."
        gpio4data = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 4 Data',
                'offset': 4,
                'bit length': 1})
        self.dataModel.addChild(gpio4data)
        gpio4data.reference_name = "GPIO 4 Data"
        gpio4data.help = "Asserted if a logic high is detected on the GPIO."
        gpio5data = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 5 Data',
                'offset': 5,
                'bit length': 1})
        self.dataModel.addChild(gpio5data)
        gpio5data.reference_name = "GPIO 5 Data"
        gpio5data.help = "Asserted if a logic high is detected on the GPIO."
        gpio6data = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 6 Data',
                'offset': 6,
                'bit length': 1})
        self.dataModel.addChild(gpio6data)
        gpio6data.reference_name = "GPIO 6 Data"
        gpio6data.help = "Asserted if a logic high is detected on the GPIO."
        gpio7data = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 7 Data',
                'offset': 7,
                'bit length': 1})
        self.dataModel.addChild(gpio7data)
        gpio7data.reference_name = "GPIO 7 Data"
        gpio7data.help = "Asserted if a logic high is detected on the GPIO."
        gpio12data = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 12 Data',
                'offset': 12,
                'bit length': 1})
        self.dataModel.addChild(gpio12data)
        gpio12data.reference_name = "GPIO 12 Data"
        gpio12data.help = "Asserted if a logic high is detected on the GPIO."
        gpio0dir = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 0 Direction',
                'offset': 32,
                'bit length': 1})
        self.dataModel.addChild(gpio0dir)
        gpio0dir.reference_name = "GPIO 0 Direction"
        gpio0dir.help = "This bit is asserted when this GPIO is configured as an output."
        gpio1dir = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 1 Direction',
                'offset': 33,
                'bit length': 1})
        self.dataModel.addChild(gpio1dir)
        gpio1dir.reference_name = "GPIO 1 Direction"
        gpio1dir.help = "This bit is asserted when this GPIO is configured as an output."
        gpio2dir = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 2 Direction',
                'offset': 34,
                'bit length': 1})
        self.dataModel.addChild(gpio2dir)
        gpio2dir.reference_name = "GPIO 2 Direction"
        gpio2dir.help = "This bit is asserted when this GPIO is configured as an output."
        gpio3dir = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 3 Direction',
                'offset': 35,
                'bit length': 1})
        self.dataModel.addChild(gpio3dir)
        gpio3dir.reference_name = "GPIO 3 Direction"
        gpio3dir.help = "This bit is asserted when this GPIO is configured as an output."
        gpio4dir = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 4 Direction',
                'offset': 36,
                'bit length': 1})
        self.dataModel.addChild(gpio4dir)
        gpio4dir.reference_name = "GPIO 4 Direction"
        gpio4dir.help = "This bit is asserted when this GPIO is configured as an output."
        gpio5dir = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 5 Direction',
                'offset': 37,
                'bit length': 1})
        self.dataModel.addChild(gpio5dir)
        gpio5dir.reference_name = "GPIO 5 Direction"
        gpio5dir.help = "This bit is asserted when this GPIO is configured as an output."
        gpio6dir = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 6 Direction',
                'offset': 38,
                'bit length': 1})
        self.dataModel.addChild(gpio6dir)
        gpio6dir.reference_name = "GPIO 6 Direction"
        gpio6dir.help = "This bit is asserted when this GPIO is configured as an output."
        gpio7dir = register_class.cBooleanDMTerminator(self,
                {'name': 'GPIO 7 Direction',
                'offset': 39,
                'bit length': 1})
        self.dataModel.addChild(gpio7dir)
        gpio7dir.reference_name = "GPIO 7 Direction"
        gpio7dir.help = "This bit is asserted when this GPIO is configured as an output."

        update_function = get_updater_function("gpiostatus_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctxmidbsop_0x73_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'TX Manufactrer Info SOP',
                                           'address': 0x73,
                                           'byte length': 22,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'TX Manufactrer Info SOP',
                                                         'offset': 0,
                                                         'bit length': 176})

        self.setAsShared()
        manufacturerstring = register_class.cHexDMTerminator(self,
                {'name': 'Manufacturer String',
                'offset': 0,
                'bit length': 176})
        self.dataModel.addChild(manufacturerstring)
        manufacturerstring.reference_name = "Manufacturer String"
        manufacturerstring.help = "Manufacturer String as defined in USB PD. This must be a null terminated string. The PD controller always sends all 22 bytes."

        update_function = get_updater_function("txmidbsop_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class crxado_0x74_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Received Alert Data Object',
                                           'address': 0x74,
                                           'byte length': 4,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Received Alert Data Object',
                                                         'offset': 0,
                                                         'bit length': 32})
        extendedalerteventtype = register_class.cListDMTerminator(self,
                {'name': 'Extended Alert Event Type',
                    'offset': 0,
                    'bit length': 4})
        extendedalerteventtype.setReportList(['Reserved', 'Power state change (DFP only)', 'Power button press (UFP only)', 'Power button release (UFP only)', 'Controller initiated wake (UFP only)'])
        self.dataModel.addChild(extendedalerteventtype)
        extendedalerteventtype.reference_name = "Extended Alert Event Type"
        extendedalerteventtype.help = "When the Extended Alert Event bit in the Type of Alert field equals 1, then the Extended Alert Event Type field indicates the event which has occurred"
        extendedalerteventtype.setMaxValue(4)
        hotswappablebatteries = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Hot Swappable Batteries',
                                                             'offset': 16,
                                                             'bit length': 4})
        hotswappablebatteries.setFlagNameList(['Battery 4', 'Battery 5', 'Battery 6', 'Battery 7'])
        hotswappablebatteries.setFlagMask([1, 1, 1, 1, 0, 0, 0, 0])
        hotswappablebatteries.setSpacing(6)
        self.dataModel.addChild(hotswappablebatteries)
        hotswappablebatteries.reference_name = "Hot Swappable Batteries"
        hotswappablebatteries.help = "Status of hot swappable batteries when selected by AlertType"
        fixedbatteries = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Fixed Batteries',
                                                             'offset': 20,
                                                             'bit length': 4})
        fixedbatteries.setFlagNameList(['Battery 0', 'Battery 1', 'Battery 2', 'Battery 3'])
        fixedbatteries.setFlagMask([1, 1, 1, 1, 0, 0, 0, 0])
        fixedbatteries.setSpacing(6)
        self.dataModel.addChild(fixedbatteries)
        fixedbatteries.reference_name = "Fixed Batteries"
        fixedbatteries.help = "Status of fixed batteries when selected by AlertType."
        typeofalert = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Type of Alert',
                                                             'offset': 24,
                                                             'bit length': 8})
        typeofalert.setFlagNameList(['Reserved', 'Battery Status Change', 'OCP', 'OTP', 'Operating Condition Change', 'Source Input Change', 'OVP', 'Extended Alert'])
        typeofalert.setFlagMask([1, 1, 1, 1, 1, 1, 1, 1])
        typeofalert.setSpacing(6)
        self.dataModel.addChild(typeofalert)
        typeofalert.reference_name = "Type of Alert"
        typeofalert.help = "Type of alert as defined by USB PD."

        update_function = get_updater_function("rxado_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctxado_0x75_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'TX Alert Data Object',
                                           'address': 0x75,
                                           'byte length': 4,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'TX Alert Data Object',
                                                         'offset': 0,
                                                         'bit length': 32})

        self.setAsShared()
        extendedalerteventtype = register_class.cListDMTerminator(self,
                {'name': 'Extended Alert Event Type',
                    'offset': 0,
                    'bit length': 4})
        extendedalerteventtype.setReportList(['Reserved', 'Power state change (DFP only)', 'Power button press (UFP only)', 'Power button release (UFP only)', 'Controller initiated wake (UFP only)'])
        self.dataModel.addChild(extendedalerteventtype)
        extendedalerteventtype.reference_name = "Extended Alert Event Type"
        extendedalerteventtype.help = "When the Extended Alert Event bit in the Type of Alert field equals 1, then the Extended Alert Event Type field indicates the event which has occurred"
        extendedalerteventtype.setMaxValue(4)
        hotswappablebatteries = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Hot Swappable Batteries',
                                                             'offset': 16,
                                                             'bit length': 4})
        hotswappablebatteries.setFlagNameList(['Battery 4', 'Battery 5', 'Battery 6', 'Battery 7'])
        hotswappablebatteries.setFlagMask([1, 1, 1, 1, 0, 0, 0, 0])
        hotswappablebatteries.setSpacing(6)
        self.dataModel.addChild(hotswappablebatteries)
        hotswappablebatteries.reference_name = "Hot Swappable Batteries"
        hotswappablebatteries.help = "Status of hot swappable batteries when selected by AlertType"
        fixedbatteries = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Fixed Batteries',
                                                             'offset': 20,
                                                             'bit length': 4})
        fixedbatteries.setFlagNameList(['Battery 0', 'Battery 1', 'Battery 2', 'Battery 3'])
        fixedbatteries.setFlagMask([1, 1, 1, 1, 0, 0, 0, 0])
        fixedbatteries.setSpacing(6)
        self.dataModel.addChild(fixedbatteries)
        fixedbatteries.reference_name = "Fixed Batteries"
        fixedbatteries.help = "Status of fixed batteries when selected by AlertType."
        typeofalert = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Type of Alert',
                                                             'offset': 24,
                                                             'bit length': 8})
        typeofalert.setFlagNameList(['Reserved', 'Battery Status Change', 'OCP', 'OTP', 'Operating Condition Change', 'Source Input Change', 'OVP', 'Extended Alert'])
        typeofalert.setFlagMask([1, 1, 1, 1, 1, 1, 1, 1])
        typeofalert.setSpacing(6)
        self.dataModel.addChild(typeofalert)
        typeofalert.reference_name = "Type of Alert"
        typeofalert.help = "Type of alert as defined by USB PD."

        update_function = get_updater_function("txado_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

def sourcepdp_0x77_fo_104_derived_function(argsList):
    return_value = sourcepdp_derived_function(argsList, argsList[0].valueToInt(),argsList[1].maxpower1, argsList[2].maxpower, argsList[3].maxpower, argsList[4].maxpower, argsList[5].maxpower, argsList[6].maxpower, argsList[7].maxpower)
    return long(return_value)

def sourceeprpdp_0x77_fo_112_derived_function(argsList):
    return_value = sourcepdp_derived_function(argsList, argsList[0].valueToInt(),argsList[1].maxpower, argsList[2].maxpower, argsList[3].maxpower, argsList[4].maxpower, argsList[5].maxpower, argsList[6].maxpower)
    return long(return_value)


class ctxscedb_0x77_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Tx Source Capabilities Extended Data Block',
                                           'address': 0x77,
                                           'byte length': 15,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Tx Source Capabilities Extended Data Block',
                                                         'offset': 0,
                                                         'bit length': 120})

        self.setAsShared()

        VoltageRegulation_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Voltage Regulation',
                                                         'offset': 0,
                                                         'bit length': 3})
        self.dataModel.addChild(VoltageRegulation_dm)

        voltageregulation = register_class.cListDMTerminator(self,
                {'name': 'Load Step',
                    'offset': 0,
                    'bit length': 2})
        voltageregulation.setReportList(['150 mA/us (Default)'])
        VoltageRegulation_dm.addChild(voltageregulation)
        voltageregulation.reference_name = "Load Step"
        voltageregulation.help = "Voltage regulation as defined by the USB PD specification."
        voltageregulation.setMaxValue(0)

        voltageregulation = register_class.cListDMTerminator(self,
                {'name': 'IoC',
                    'offset': 2,
                    'bit length': 1})
        voltageregulation.setReportList(['25% IoC (Default)', '90% IoC'])
        VoltageRegulation_dm.addChild(voltageregulation)
        voltageregulation.reference_name = "IoC"
        voltageregulation.help = "Voltage regulation as defined by the USB PD specification."
        voltageregulation.setMaxValue(1)
        holduptime = register_class.cHexDMTerminator(self,
                {'name': 'Hold Up Time',
                'offset': 8,
                'bit length': 8})
        self.dataModel.addChild(holduptime)
        holduptime.reference_name = "Hold Up Time"
        holduptime.help = "Hold up time as defined by the USB PD specification."

        Compliance_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Compliance',
                                                         'offset': 16,
                                                         'bit length': 19})
        self.dataModel.addChild(Compliance_dm)

        compliance = register_class.cBooleanDMTerminator(self,
                {'name': 'LPS Compliant',
                'offset': 0,
                'bit length': 1})
        Compliance_dm.addChild(compliance)
        compliance.reference_name = "LPS Compliant"
        compliance.help = "Compliance as defined by the USB PD specification."

        compliance = register_class.cBooleanDMTerminator(self,
                {'name': 'PS1 Compliant',
                'offset': 1,
                'bit length': 1})
        Compliance_dm.addChild(compliance)
        compliance.reference_name = "PS1 Compliant"
        compliance.help = "Compliance as defined by the USB PD specification."

        compliance = register_class.cBooleanDMTerminator(self,
                {'name': 'PS2 Compliant',
                'offset': 2,
                'bit length': 1})
        Compliance_dm.addChild(compliance)
        compliance.reference_name = "PS2 Compliant"
        compliance.help = "Compliance as defined by the USB PD specification."

        TouchCurrent_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Touch Current',
                                                         'offset': 24,
                                                         'bit length': 27})
        self.dataModel.addChild(TouchCurrent_dm)

        touchcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Low Touch Current EPS',
                'offset': 0,
                'bit length': 1})
        TouchCurrent_dm.addChild(touchcurrent)
        touchcurrent.reference_name = "Low Touch Current EPS"
        touchcurrent.help = "Touch current as defined by the USB PD specification."

        touchcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Ground Pin Supported',
                'offset': 1,
                'bit length': 1})
        TouchCurrent_dm.addChild(touchcurrent)
        touchcurrent.reference_name = "Ground Pin Supported"
        touchcurrent.help = "Touch current as defined by the USB PD specification."

        touchcurrent = register_class.cBooleanDMTerminator(self,
                {'name': 'Ground Pin Intended for Protective Earth',
                'offset': 2,
                'bit length': 1})
        TouchCurrent_dm.addChild(touchcurrent)
        touchcurrent.reference_name = "Ground Pin Intended for Protective Earth"
        touchcurrent.help = "Touch current as defined by the USB PD specification."

        PeakCurrent1_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Peak Current1',
                                                         'offset': 32,
                                                         'bit length': 48})
        self.dataModel.addChild(PeakCurrent1_dm)

        peakcurrent1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Peak Overload Current',
                                                      'offset': 0,
                                                      'bit length': 5})
        peakcurrent1.dictScaleUnits = {'%': 10.0}
        peakcurrent1.defaultUnit = '%'
        PeakCurrent1_dm.addChild(peakcurrent1)
        peakcurrent1.reference_name = "Peak Overload Current"
        peakcurrent1.help = "Peak Current 1 as defined by the USB PD specification."
        peakcurrent1.setMaxValue(31)
        peakcurrent1.setMinValue(0)

        peakcurrent1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Overload Period',
                                                      'offset': 5,
                                                      'bit length': 6})
        peakcurrent1.dictScaleUnits = {'ms': 20.0}
        peakcurrent1.defaultUnit = 'ms'
        PeakCurrent1_dm.addChild(peakcurrent1)
        peakcurrent1.reference_name = "Overload Period"
        peakcurrent1.help = "Peak Current 1 as defined by the USB PD specification."
        peakcurrent1.setMaxValue(63)
        peakcurrent1.setMinValue(0)

        peakcurrent1 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Duty Cycle',
                                                      'offset': 11,
                                                      'bit length': 4})
        peakcurrent1.dictScaleUnits = {'%': 5.0}
        peakcurrent1.defaultUnit = '%'
        PeakCurrent1_dm.addChild(peakcurrent1)
        peakcurrent1.reference_name = "Duty Cycle"
        peakcurrent1.help = "Peak Current 1 as defined by the USB PD specification."
        peakcurrent1.setMaxValue(15)
        peakcurrent1.setMinValue(0)

        peakcurrent1 = register_class.cBooleanDMTerminator(self,
                {'name': 'VBus Drop',
                'offset': 15,
                'bit length': 1})
        PeakCurrent1_dm.addChild(peakcurrent1)
        peakcurrent1.reference_name = "VBus Drop"
        peakcurrent1.help = "Peak Current 1 as defined by the USB PD specification."

        PeakCurrent2_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Peak Current2',
                                                         'offset': 48,
                                                         'bit length': 64})
        self.dataModel.addChild(PeakCurrent2_dm)

        peakcurrent2 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Peak Overload Current',
                                                      'offset': 0,
                                                      'bit length': 5})
        peakcurrent2.dictScaleUnits = {'%': 10.0}
        peakcurrent2.defaultUnit = '%'
        PeakCurrent2_dm.addChild(peakcurrent2)
        peakcurrent2.reference_name = "Peak Overload Current"
        peakcurrent2.help = "Peak Current 2 as defined by the USB PD specification."
        peakcurrent2.setMaxValue(31)
        peakcurrent2.setMinValue(0)

        peakcurrent2 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Overload Period',
                                                      'offset': 5,
                                                      'bit length': 6})
        peakcurrent2.dictScaleUnits = {'ms': 20.0}
        peakcurrent2.defaultUnit = 'ms'
        PeakCurrent2_dm.addChild(peakcurrent2)
        peakcurrent2.reference_name = "Overload Period"
        peakcurrent2.help = "Peak Current 2 as defined by the USB PD specification."
        peakcurrent2.setMaxValue(63)
        peakcurrent2.setMinValue(0)

        peakcurrent2 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Duty Cycle',
                                                      'offset': 11,
                                                      'bit length': 4})
        peakcurrent2.dictScaleUnits = {'%': 5.0}
        peakcurrent2.defaultUnit = '%'
        PeakCurrent2_dm.addChild(peakcurrent2)
        peakcurrent2.reference_name = "Duty Cycle"
        peakcurrent2.help = "Peak Current 2 as defined by the USB PD specification."
        peakcurrent2.setMaxValue(15)
        peakcurrent2.setMinValue(0)

        peakcurrent2 = register_class.cBooleanDMTerminator(self,
                {'name': 'VBus Drop',
                'offset': 15,
                'bit length': 1})
        PeakCurrent2_dm.addChild(peakcurrent2)
        peakcurrent2.reference_name = "VBus Drop"
        peakcurrent2.help = "Peak Current 2 as defined by the USB PD specification."

        PeakCurrent3_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Peak Current3',
                                                         'offset': 64,
                                                         'bit length': 80})
        self.dataModel.addChild(PeakCurrent3_dm)

        peakcurrent3 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Peak Overload Current',
                                                      'offset': 0,
                                                      'bit length': 5})
        peakcurrent3.dictScaleUnits = {'%': 10.0}
        peakcurrent3.defaultUnit = '%'
        PeakCurrent3_dm.addChild(peakcurrent3)
        peakcurrent3.reference_name = "Peak Overload Current"
        peakcurrent3.help = "Peak Current 3 as defined by the USB PD specification."
        peakcurrent3.setMaxValue(31)
        peakcurrent3.setMinValue(0)

        peakcurrent3 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Overload Period',
                                                      'offset': 5,
                                                      'bit length': 6})
        peakcurrent3.dictScaleUnits = {'ms': 20.0}
        peakcurrent3.defaultUnit = 'ms'
        PeakCurrent3_dm.addChild(peakcurrent3)
        peakcurrent3.reference_name = "Overload Period"
        peakcurrent3.help = "Peak Current 3 as defined by the USB PD specification."
        peakcurrent3.setMaxValue(63)
        peakcurrent3.setMinValue(0)

        peakcurrent3 = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Duty Cycle',
                                                      'offset': 11,
                                                      'bit length': 4})
        peakcurrent3.dictScaleUnits = {'%': 5.0}
        peakcurrent3.defaultUnit = '%'
        PeakCurrent3_dm.addChild(peakcurrent3)
        peakcurrent3.reference_name = "Duty Cycle"
        peakcurrent3.help = "Peak Current 3 as defined by the USB PD specification."
        peakcurrent3.setMaxValue(15)
        peakcurrent3.setMinValue(0)

        peakcurrent3 = register_class.cBooleanDMTerminator(self,
                {'name': 'VBus Drop',
                'offset': 15,
                'bit length': 1})
        PeakCurrent3_dm.addChild(peakcurrent3)
        peakcurrent3.reference_name = "VBus Drop"
        peakcurrent3.help = "Peak Current 3 as defined by the USB PD specification."

        TouchTemperature_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Touch Temperature',
                                                         'offset': 80,
                                                         'bit length': 88})
        self.dataModel.addChild(TouchTemperature_dm)

        touchtemp = register_class.cListDMTerminator(self,
                {'name': 'Touch Temperature',
                    'offset': 0,
                    'bit length': 8})
        touchtemp.setReportList(['IEC 60950-1 Compliant', 'IEC 62368-1 TS1 Compliant', 'IEC 62368-1 TS2 Compliant'])
        TouchTemperature_dm.addChild(touchtemp)
        touchtemp.reference_name = "Touch Temperature"
        touchtemp.help = "Touch temperature as defined by the USB PD specification."
        touchtemp.setMaxValue(2)

        SourceInputs_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Source Inputs',
                                                         'offset': 88,
                                                         'bit length': 91})
        self.dataModel.addChild(SourceInputs_dm)

        sourceinputs = register_class.cBooleanDMTerminator(self,
                {'name': 'External Supply Present',
                'offset': 0,
                'bit length': 1})
        SourceInputs_dm.addChild(sourceinputs)
        sourceinputs.reference_name = "External Supply Present"
        sourceinputs.help = "Source inputs as defined by the USB PD specification. #ph ishcondition=(legacy=filter10) or (legacy=filter11)#The Barrel_Jack_Event GPIO Event can modify bit 0 of this field automatically upon rising and falling edges. The host may choose to set bit 1 of this field to 1 when it enables the Barrel_Jack_Event GPIO Event.#/ph#"

        sourceinputs = register_class.cBooleanDMTerminator(self,
                {'name': 'External Supply is Unconstrained',
                'offset': 1,
                'bit length': 1})
        SourceInputs_dm.addChild(sourceinputs)
        sourceinputs.reference_name = "External Supply is Unconstrained"
        sourceinputs.help = "Source inputs as defined by the USB PD specification. #ph ishcondition=(legacy=filter10) or (legacy=filter11)#The Barrel_Jack_Event GPIO Event can modify bit 0 of this field automatically upon rising and falling edges. The host may choose to set bit 1 of this field to 1 when it enables the Barrel_Jack_Event GPIO Event.#/ph#"

        sourceinputs = register_class.cBooleanDMTerminator(self,
                {'name': 'Internal Battery Present',
                'offset': 2,
                'bit length': 1})
        SourceInputs_dm.addChild(sourceinputs)
        sourceinputs.reference_name = "Internal Battery Present"
        sourceinputs.help = "Source inputs as defined by the USB PD specification. #ph ishcondition=(legacy=filter10) or (legacy=filter11)#The Barrel_Jack_Event GPIO Event can modify bit 0 of this field automatically upon rising and falling edges. The host may choose to set bit 1 of this field to 1 when it enables the Barrel_Jack_Event GPIO Event.#/ph#"

        Battries_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Battries',
                                                         'offset': 96,
                                                         'bit length': 104})
        self.dataModel.addChild(Battries_dm)

        numfixedbatteries = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Fixed Batteries',
                                                      'offset': 0,
                                                      'bit length': 4})
        Battries_dm.addChild(numfixedbatteries)
        numfixedbatteries.reference_name = "Number Fixed Batteries"
        numfixedbatteries.help = "Number of fixed batteries / battery slots as defined by the USB PD specification. (Max of 3)"
        numfixedbatteries.setMaxValue(3)
        numfixedbatteries.setMinValue(0)

        numhotswappablebatteries = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number Hot Swappable Batteries',
                                                      'offset': 4,
                                                      'bit length': 4})
        Battries_dm.addChild(numhotswappablebatteries)
        numhotswappablebatteries.reference_name = "Number Hot Swappable Batteries"
        numhotswappablebatteries.help = "Number of hot swappable batteries / battery slots as defined by the USB PD specification. (Max of 1)"
        numhotswappablebatteries.setMaxValue(1)
        numhotswappablebatteries.setMinValue(0)
        sourcepdp = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source PDP',
                                                      'offset': 104,
                                                      'bit length': 7})
        sourcepdp.dictScaleUnits = {'W': 1.0}
        sourcepdp.defaultUnit = 'W'
        self.dataModel.addChild(sourcepdp)
        sourcepdp.reference_name = "Source PDP"
        sourcepdp.help = "Sources PDP rating as defined by the USB PD specification."
        sourcepdp.lock()
        sourcepdp.setMaxValue(127)
        sourcepdp.setMinValue(0)

        sourcepdp.registerAsDerivedField(sourcepdp_0x77_fo_104_derived_function, None, [['Transmit Source Capabilities', 'Number of Source PDOs', 'Number Valid PDOs'], ['Transmit Source Capabilities', 'Source PDO 1'], ['Transmit Source Capabilities', 'Source PDO 2'], ['Transmit Source Capabilities', 'Source PDO 3'], ['Transmit Source Capabilities', 'Source PDO 4'], ['Transmit Source Capabilities', 'Source PDO 5'], ['Transmit Source Capabilities', 'Source PDO 6'], ['Transmit Source Capabilities', 'Source PDO 7']])

        sourceeprpdp = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Source EPR PDP',
                                                      'offset': 112,
                                                      'bit length': 8})
        sourceeprpdp.dictScaleUnits = {'W': 1.0}
        sourceeprpdp.defaultUnit = 'W'
        self.dataModel.addChild(sourceeprpdp)
        sourceeprpdp.reference_name = "Source EPR PDP"
        sourceeprpdp.help = "Sources EPR PDP rating as defined by the USB PD specification."
        sourceeprpdp.lock()
        sourceeprpdp.setMaxValue(255)
        sourceeprpdp.setMinValue(0)

        sourceeprpdp.registerAsDerivedField(sourceeprpdp_0x77_fo_112_derived_function, None, [['Transmit Source Capabilities', 'Number of Source PDOs', 'TX Source Num Valid EPR PDOs'], ['Transmit Source Capabilities', 'EPR Source PDO 1'], ['Transmit Source Capabilities', 'EPR Source PDO 2'], ['Transmit Source Capabilities', 'EPR Source PDO 3'], ['Transmit Source Capabilities', 'EPR Source PDO 4'], ['Transmit Source Capabilities', 'EPR Source PDO 5'], ['Transmit Source Capabilities', 'EPR Source PDO 6']])


        update_function = get_updater_function("txscedb_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctxsdb_0x79_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Transmitted Status Data Block (SDB) Register',
                                           'address': 0x79,
                                           'byte length': 7,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Transmitted Status Data Block (SDB) Register',
                                                         'offset': 0,
                                                         'bit length': 56})

        SOPStatusDataBlock_dm = register_class.cDataModelArray(self, 2,
                                                        {'name': 'SOP Status Data Block',
                                                         'offset': 0,
                                                         'bit length': 102})
        self.dataModel.addChild(SOPStatusDataBlock_dm)


        SOPStatusMessage_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'SOP Status Message',
                                                         'offset': 0,
                                                         'bit length': 48})
        SOPStatusDataBlock_dm.addChild(SOPStatusMessage_dm)

        internaltemp = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Internal Temperature',
                                                      'offset': 0,
                                                      'bit length': 8})
        internaltemp.dictScaleUnits = {' C': 1.0}
        internaltemp.defaultUnit = ' C'
        SOPStatusMessage_dm.addChild(internaltemp)
        internaltemp.reference_name = "Internal Temperature"
        internaltemp.help = "Internal temperature as defined by the USB PD specification. (1C per LSB)"
        internaltemp.setMaxValue(255)
        internaltemp.setMinValue(0)

        presentinput = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Present Input',
                                                             'offset': 8,
                                                             'bit length': 8})
        presentinput.setFlagNameList(['Temp', 'External Power', 'External Power AC/DC', 'Internal Power from Battery', 'Internal Power from non-Battery'])
        presentinput.setFlagMask([0, 1, 1, 1, 1, 0, 0, 0])
        presentinput.setSpacing(6)
        SOPStatusMessage_dm.addChild(presentinput)
        presentinput.reference_name = "Present Input"
        presentinput.help = "Present input as defined by the USB PD specification."

        presentbatteryinput = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Present Battery Input',
                                                             'offset': 16,
                                                             'bit length': 8})
        presentbatteryinput.setFlagNameList(['Battery 0', 'Battery 1', 'Battery 2', 'Battery 3', 'Battery 4', 'Battery 5', 'Battery 6', 'Battery 7'])
        presentbatteryinput.setFlagMask([1, 1, 1, 1, 1, 1, 1, 1])
        presentbatteryinput.setSpacing(6)
        SOPStatusMessage_dm.addChild(presentbatteryinput)
        presentbatteryinput.reference_name = "Present Battery Input"
        presentbatteryinput.help = "Present battery input as defined by the USB PD specification."

        eventflags = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Event Flags',
                                                             'offset': 24,
                                                             'bit length': 8})
        eventflags.setFlagNameList(['Reserved', 'OCP', 'OTP', 'OVP'])
        eventflags.setFlagMask([1, 1, 1, 1, 0, 0, 0, 0])
        eventflags.setSpacing(6)
        SOPStatusMessage_dm.addChild(eventflags)
        eventflags.reference_name = "Event Flags"
        eventflags.help = "Event flags as defined by the USB PD specification."

        temperaturestatus = register_class.cListDMTerminator(self,
                {'name': 'Temperature Status',
                    'offset': 33,
                    'bit length': 2})
        temperaturestatus.setReportList(['Not Supported', 'Normal', 'Warning', 'Over temperture'])
        SOPStatusMessage_dm.addChild(temperaturestatus)
        temperaturestatus.reference_name = "Temperature Status"
        temperaturestatus.help = "Temperature status as defined by the USB PD specification."
        temperaturestatus.setMaxValue(3)

        powerstatus = register_class.cMultiBooleanDMTerminator(self,
                                                            {'name': 'Power Status',
                                                             'offset': 40,
                                                             'bit length': 8})
        powerstatus.setFlagNameList(['Reserved', 'Cable Supported Current', 'Insufficient Power Available', 'Insufficient External Power', 'Event Flags', 'Temperature'])
        powerstatus.setFlagMask([1, 1, 1, 1, 1, 1, 0, 0])
        powerstatus.setSpacing(6)
        SOPStatusMessage_dm.addChild(powerstatus)
        powerstatus.reference_name = "Power Status"
        powerstatus.help = "Power status as defined by the USB PD specification."


        PowerStateChange_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Power State Change',
                                                         'offset': 48,
                                                         'bit length': 54})
        SOPStatusDataBlock_dm.addChild(PowerStateChange_dm)

        newpowerstate = register_class.cListDMTerminator(self,
                {'name': 'New Power State',
                    'offset': 0,
                    'bit length': 3})
        newpowerstate.setReportList(['Status not supported', 'S0', 'Modern Standby', 'S3', 'S4', 'S5', 'G3', 'Reserved'])
        PowerStateChange_dm.addChild(newpowerstate)
        newpowerstate.reference_name = "New Power State"
        newpowerstate.help = "Power state change as defined by the USB PD specification"
        newpowerstate.setMaxValue(7)

        newpowerstateindicator = register_class.cListDMTerminator(self,
                {'name': 'New Power State Indicator',
                    'offset': 3,
                    'bit length': 3})
        newpowerstateindicator.setReportList(['Off LED', 'On LED', 'Blinking LED', 'Breathing LED'])
        PowerStateChange_dm.addChild(newpowerstateindicator)
        newpowerstateindicator.reference_name = "New Power State Indicator"
        newpowerstateindicator.help = "Power state change as defined by the USB PD specification"
        newpowerstateindicator.setMaxValue(3)

        update_function = get_updater_function("txsdb_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctxppssdb_0x7a_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Trasmitted PPS Status Data Block',
                                           'address': 0x7a,
                                           'byte length': 4,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Trasmitted PPS Status Data Block',
                                                         'offset': 0,
                                                         'bit length': 32})
        outputvoltage = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Output Voltage',
                                                      'offset': 0,
                                                      'bit length': 16})
        outputvoltage.dictScaleUnits = {'V': 0.02}
        outputvoltage.defaultUnit = 'V'
        self.dataModel.addChild(outputvoltage)
        outputvoltage.reference_name = "Output Voltage"
        outputvoltage.help = "Output voltage as defined by the USB PD spec.(20mV per LSB, 0xFFFF = this field not supported)"
        outputvoltage.setMaxValue(65535)
        outputvoltage.setMinValue(0)
        outputcurrent = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Output Current',
                                                      'offset': 16,
                                                      'bit length': 8})
        outputcurrent.dictScaleUnits = {'A': 0.05}
        outputcurrent.defaultUnit = 'A'
        self.dataModel.addChild(outputcurrent)
        outputcurrent.reference_name = "Output Current"
        outputcurrent.help = "Output current as defined by the USB PD spec. (50mA per LSB).  0xFF = this field not supported"
        outputcurrent.setMaxValue(255)
        outputcurrent.setMinValue(0)
        ptf = register_class.cHexDMTerminator(self,
                {'name': 'PTF',
                'offset': 25,
                'bit length': 2})
        self.dataModel.addChild(ptf)
        ptf.reference_name = "PTF"
        ptf.help = "Real Time Flag as defined by the USB PD spec."
        omf = register_class.cBooleanDMTerminator(self,
                {'name': 'OMF',
                'offset': 27,
                'bit length': 1})
        self.dataModel.addChild(omf)
        omf.reference_name = "OMF"
        omf.help = "Real Time Flag as defined by the USB PD spec."

        update_function = get_updater_function("txppssdb_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctxbsdo_0x7b_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Transmitted Battery Status Data Objects (BSDO) Register',
                                           'address': 0x7b,
                                           'byte length': 16,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Transmitted Battery Status Data Objects (BSDO) Register',
                                                         'offset': 0,
                                                         'bit length': 128})

        self.setAsShared()
        fixedbattery0batteryinfo = register_class.cHexDMTerminator(self,
                {'name': 'Fixed Battery 0 Battery Info',
                'offset': 8,
                'bit length': 8})
        self.dataModel.addChild(fixedbattery0batteryinfo)
        fixedbattery0batteryinfo.reference_name = "Fixed Battery 0 Battery Info"
        fixedbattery0batteryinfo.help = "Battery status data object returned for fixed battery index 0."
        fixedbattery0presentcapacity = register_class.cHexDMTerminator(self,
                {'name': 'Fixed Battery 0 Present Capacity',
                'offset': 16,
                'bit length': 16})
        self.dataModel.addChild(fixedbattery0presentcapacity)
        fixedbattery0presentcapacity.reference_name = "Fixed Battery 0 Present Capacity"
        fixedbattery0presentcapacity.help = "Battery status data object returned for fixed battery index 0."
        fixedbattery1batteryinfo = register_class.cHexDMTerminator(self,
                {'name': 'Fixed Battery 1 Battery Info',
                'offset': 40,
                'bit length': 8})
        self.dataModel.addChild(fixedbattery1batteryinfo)
        fixedbattery1batteryinfo.reference_name = "Fixed Battery 1 Battery Info"
        fixedbattery1batteryinfo.help = "Battery status data object returned for fixed battery index 1."
        fixedbattery1presentcapacity = register_class.cHexDMTerminator(self,
                {'name': 'Fixed Battery 1 Present Capacity',
                'offset': 48,
                'bit length': 16})
        self.dataModel.addChild(fixedbattery1presentcapacity)
        fixedbattery1presentcapacity.reference_name = "Fixed Battery 1 Present Capacity"
        fixedbattery1presentcapacity.help = "Battery status data object returned for fixed battery index 0."
        fixedbattery2batteryinfo = register_class.cHexDMTerminator(self,
                {'name': 'Fixed Battery 2 Battery Info',
                'offset': 72,
                'bit length': 8})
        self.dataModel.addChild(fixedbattery2batteryinfo)
        fixedbattery2batteryinfo.reference_name = "Fixed Battery 2 Battery Info"
        fixedbattery2batteryinfo.help = "Battery status data object returned for fixed battery index 2."
        fixedbattery2presentcapacity = register_class.cHexDMTerminator(self,
                {'name': 'Fixed Battery 2 Present Capacity',
                'offset': 80,
                'bit length': 16})
        self.dataModel.addChild(fixedbattery2presentcapacity)
        fixedbattery2presentcapacity.reference_name = "Fixed Battery 2 Present Capacity"
        fixedbattery2presentcapacity.help = "Battery status data object returned for fixed battery index 0."
        hotswappablebattery0batteryinfo = register_class.cHexDMTerminator(self,
                {'name': 'Hot Swappable Battery 0 Battery Info',
                'offset': 104,
                'bit length': 8})
        self.dataModel.addChild(hotswappablebattery0batteryinfo)
        hotswappablebattery0batteryinfo.reference_name = "Hot Swappable Battery 0 Battery Info"
        hotswappablebattery0batteryinfo.help = "Battery status data object returned for hot-swappable battery index 0."
        hotswappablebattery0presentcapacity = register_class.cHexDMTerminator(self,
                {'name': 'Hot Swappable Battery 0 Present Info',
                'offset': 112,
                'bit length': 16})
        self.dataModel.addChild(hotswappablebattery0presentcapacity)
        hotswappablebattery0presentcapacity.reference_name = "Hot Swappable Battery 0 Present Info"
        hotswappablebattery0presentcapacity.help = "Battery status data object returned for fixed battery index 0."

        update_function = get_updater_function("txbsdo_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctxbcdb_0x7d_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Tx Battery Capabilities',
                                           'address': 0x7d,
                                           'byte length': 36,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Tx Battery Capabilities',
                                                         'offset': 0,
                                                         'bit length': 288})

        self.setAsShared()

        FixedBattery1Capabalities_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Fixed Battery #1 Capabalities',
                                                         'offset': 0,
                                                         'bit length': 72})
        self.dataModel.addChild(FixedBattery1Capabalities_dm)

        vid0 = register_class.cHexDMTerminator(self,
                {'name': 'VID 0',
                'offset': 0,
                'bit length': 16})
        FixedBattery1Capabalities_dm.addChild(vid0)
        vid0.reference_name = "VID 0"
        vid0.help = "VID for fixed battery index 0."

        pid0 = register_class.cHexDMTerminator(self,
                {'name': 'PID 0',
                'offset': 16,
                'bit length': 16})
        FixedBattery1Capabalities_dm.addChild(pid0)
        pid0.reference_name = "PID 0"
        pid0.help = "PID for fixed battery index 0."

        batterydesigncapacity0 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Design Capacity',
                'offset': 32,
                'bit length': 16})
        FixedBattery1Capabalities_dm.addChild(batterydesigncapacity0)
        batterydesigncapacity0.reference_name = "Battery Design Capacity"
        batterydesigncapacity0.help = "Battery design capacity for fixed battery index 0."

        batterylastfullchargecapacity0 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Last Full Charge Capacity',
                'offset': 48,
                'bit length': 16})
        FixedBattery1Capabalities_dm.addChild(batterylastfullchargecapacity0)
        batterylastfullchargecapacity0.reference_name = "Battery Last Full Charge Capacity"
        batterylastfullchargecapacity0.help = "Battery last full charge capacity for fixed battery index 0."

        batterytype0 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Type',
                'offset': 64,
                'bit length': 8})
        FixedBattery1Capabalities_dm.addChild(batterytype0)
        batterytype0.reference_name = "Battery Type"
        batterytype0.help = "Battery type for fixed battery index 0."

        FixedBattery2Capabalities_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Fixed Battery #2 Capabalities',
                                                         'offset': 72,
                                                         'bit length': 144})
        self.dataModel.addChild(FixedBattery2Capabalities_dm)

        vid1 = register_class.cHexDMTerminator(self,
                {'name': 'VID 1',
                'offset': 0,
                'bit length': 16})
        FixedBattery2Capabalities_dm.addChild(vid1)
        vid1.reference_name = "VID 1"
        vid1.help = "VID for fixed battery index 1."

        pid1 = register_class.cHexDMTerminator(self,
                {'name': 'PID 1',
                'offset': 16,
                'bit length': 16})
        FixedBattery2Capabalities_dm.addChild(pid1)
        pid1.reference_name = "PID 1"
        pid1.help = "PID for fixed battery index 1."

        batterydesigncapacity1 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Design Capacity',
                'offset': 32,
                'bit length': 16})
        FixedBattery2Capabalities_dm.addChild(batterydesigncapacity1)
        batterydesigncapacity1.reference_name = "Battery Design Capacity"
        batterydesigncapacity1.help = "Battery design capacity for fixed battery index 1."

        batterylastfullchargecapacity1 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Last Full Charge Capacity',
                'offset': 48,
                'bit length': 16})
        FixedBattery2Capabalities_dm.addChild(batterylastfullchargecapacity1)
        batterylastfullchargecapacity1.reference_name = "Battery Last Full Charge Capacity"
        batterylastfullchargecapacity1.help = "Battery last full charge capacity for fixed battery index 1."

        batterytype1 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Type',
                'offset': 64,
                'bit length': 8})
        FixedBattery2Capabalities_dm.addChild(batterytype1)
        batterytype1.reference_name = "Battery Type"
        batterytype1.help = "Battery type for fixed battery index 1."

        FixedBattery3Capabalities_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Fixed Battery #3 Capabalities',
                                                         'offset': 144,
                                                         'bit length': 216})
        self.dataModel.addChild(FixedBattery3Capabalities_dm)

        vid2 = register_class.cHexDMTerminator(self,
                {'name': 'VID 2',
                'offset': 0,
                'bit length': 16})
        FixedBattery3Capabalities_dm.addChild(vid2)
        vid2.reference_name = "VID 2"
        vid2.help = "VID for fixed battery index 2."

        pid2 = register_class.cHexDMTerminator(self,
                {'name': 'PID 2',
                'offset': 16,
                'bit length': 16})
        FixedBattery3Capabalities_dm.addChild(pid2)
        pid2.reference_name = "PID 2"
        pid2.help = "PID for fixed battery index 2."

        batterydesigncapacity2 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Design Capacity',
                'offset': 32,
                'bit length': 16})
        FixedBattery3Capabalities_dm.addChild(batterydesigncapacity2)
        batterydesigncapacity2.reference_name = "Battery Design Capacity"
        batterydesigncapacity2.help = "Battery design capacity for fixed battery index 2."

        batterylastfullchargecapacity2 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Last Full Charge Capacity',
                'offset': 48,
                'bit length': 16})
        FixedBattery3Capabalities_dm.addChild(batterylastfullchargecapacity2)
        batterylastfullchargecapacity2.reference_name = "Battery Last Full Charge Capacity"
        batterylastfullchargecapacity2.help = "Battery last full charge capacity for fixed battery index 2."

        batterytype2 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Type',
                'offset': 64,
                'bit length': 8})
        FixedBattery3Capabalities_dm.addChild(batterytype2)
        batterytype2.reference_name = "Battery Type"
        batterytype2.help = "Battery type for fixed battery index 2."

        HotPluggableBattery1Capabilities_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Hot Pluggable Battery #1 Capabilities',
                                                         'offset': 216,
                                                         'bit length': 288})
        self.dataModel.addChild(HotPluggableBattery1Capabilities_dm)

        vid3 = register_class.cHexDMTerminator(self,
                {'name': 'VID 3',
                'offset': 0,
                'bit length': 16})
        HotPluggableBattery1Capabilities_dm.addChild(vid3)
        vid3.reference_name = "VID 3"
        vid3.help = "VID for hot-swappable battery index 0."

        pid3 = register_class.cHexDMTerminator(self,
                {'name': 'PID 3',
                'offset': 16,
                'bit length': 16})
        HotPluggableBattery1Capabilities_dm.addChild(pid3)
        pid3.reference_name = "PID 3"
        pid3.help = "PID for hot-swappable battery index 0."

        batterydesigncapacity3 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Design Capacity',
                'offset': 32,
                'bit length': 16})
        HotPluggableBattery1Capabilities_dm.addChild(batterydesigncapacity3)
        batterydesigncapacity3.reference_name = "Battery Design Capacity"
        batterydesigncapacity3.help = "Battery design capacity for hot-swappable battery index 0."

        batterylastfullchargecapacity3 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Last Full Charge Capacity',
                'offset': 48,
                'bit length': 16})
        HotPluggableBattery1Capabilities_dm.addChild(batterylastfullchargecapacity3)
        batterylastfullchargecapacity3.reference_name = "Battery Last Full Charge Capacity"
        batterylastfullchargecapacity3.help = "Battery last full charge capacity for hot-swappable battery index 0."

        batterytype3 = register_class.cHexDMTerminator(self,
                {'name': 'Battery Type',
                'offset': 64,
                'bit length': 8})
        HotPluggableBattery1Capabilities_dm.addChild(batterytype3)
        batterytype3.reference_name = "Battery Type"
        batterytype3.help = "Battery type for hot-swappable battery index 0."

        update_function = get_updater_function("txbcdb_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ctxskedb_0x7e_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'Transmit Sink Capabilities Extended Data Block',
                                           'address': 0x7e,
                                           'byte length': 14,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'Transmit Sink Capabilities Extended Data Block',
                                                         'offset': 0,
                                                         'bit length': 112})

        self.setAsShared()
        skedbversion = register_class.cDictDMTerminator(self,
                                                     {'name': 'SKEDB Version',
                                                      'offset': 0,
                                                      'bit length': 8})
        skedbversion.setReportDict(OrderedDict([(1, 'Version 1.0')]))
        self.dataModel.addChild(skedbversion)
        skedbversion.reference_name = "SKEDB Version"
        skedbversion.help = "SKEDB Version as defined in the USB PD specification."
        skedbversion.setMaxValue(1)
        loadstep = register_class.cListDMTerminator(self,
                {'name': 'Load Step',
                    'offset': 8,
                    'bit length': 8})
        loadstep.setReportList(['150 mA/uS', '500 mA/uS'])
        self.dataModel.addChild(loadstep)
        loadstep.reference_name = "Load Step"
        loadstep.help = "Load step as defined in the USB PD specification."
        loadstep.setMaxValue(1)

        SinkLoadCharacteristics_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink Load Characteristics',
                                                         'offset': 16,
                                                         'bit length': 32})
        self.dataModel.addChild(SinkLoadCharacteristics_dm)

        sinkloadchar = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Percent Overload',
                                                      'offset': 0,
                                                      'bit length': 5})
        sinkloadchar.dictScaleUnits = {'%': 10.0}
        sinkloadchar.defaultUnit = '%'
        SinkLoadCharacteristics_dm.addChild(sinkloadchar)
        sinkloadchar.reference_name = "Percent Overload"
        sinkloadchar.help = "Sink load characteristics as defined in the USB PD specification."
        sinkloadchar.setMaxValue(25)
        sinkloadchar.setMinValue(0)

        sinkloadchar = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Overload Period',
                                                      'offset': 5,
                                                      'bit length': 6})
        sinkloadchar.dictScaleUnits = {'ms': 20.0}
        sinkloadchar.defaultUnit = 'ms'
        SinkLoadCharacteristics_dm.addChild(sinkloadchar)
        sinkloadchar.reference_name = "Overload Period"
        sinkloadchar.help = "Sink load characteristics as defined in the USB PD specification."
        sinkloadchar.setMaxValue(63)
        sinkloadchar.setMinValue(0)

        sinkloadchar = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Overload Period2',
                                                      'offset': 11,
                                                      'bit length': 4})
        sinkloadchar.dictScaleUnits = {'%': 5.0}
        sinkloadchar.defaultUnit = '%'
        SinkLoadCharacteristics_dm.addChild(sinkloadchar)
        sinkloadchar.reference_name = "Overload Period2"
        sinkloadchar.help = "Sink load characteristics as defined in the USB PD specification."
        sinkloadchar.setMaxValue(15)
        sinkloadchar.setMinValue(0)

        sinkloadchar = register_class.cBooleanDMTerminator(self,
                {'name': 'Can Tolerate VBUS Voltage Drop',
                'offset': 15,
                'bit length': 1})
        SinkLoadCharacteristics_dm.addChild(sinkloadchar)
        sinkloadchar.reference_name = "Can Tolerate VBUS Voltage Drop"
        sinkloadchar.help = "Sink load characteristics as defined in the USB PD specification."

        Compliance_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Compliance',
                                                         'offset': 32,
                                                         'bit length': 35})
        self.dataModel.addChild(Compliance_dm)

        compliance = register_class.cBooleanDMTerminator(self,
                {'name': 'Requires LPS Compliant',
                'offset': 0,
                'bit length': 1})
        Compliance_dm.addChild(compliance)
        compliance.reference_name = "Requires LPS Compliant"
        compliance.help = "Compliance as defined by the USB PD specification."

        compliance = register_class.cBooleanDMTerminator(self,
                {'name': 'Requires PS1 Compliant',
                'offset': 1,
                'bit length': 1})
        Compliance_dm.addChild(compliance)
        compliance.reference_name = "Requires PS1 Compliant"
        compliance.help = "Compliance as defined by the USB PD specification."

        compliance = register_class.cBooleanDMTerminator(self,
                {'name': 'Requires PS2 Compliant',
                'offset': 2,
                'bit length': 1})
        Compliance_dm.addChild(compliance)
        compliance.reference_name = "Requires PS2 Compliant"
        compliance.help = "Compliance as defined by the USB PD specification."

        TouchTemperature_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Touch Temperature',
                                                         'offset': 40,
                                                         'bit length': 48})
        self.dataModel.addChild(TouchTemperature_dm)

        touchtemp = register_class.cListDMTerminator(self,
                {'name': 'Touch Temprature',
                    'offset': 0,
                    'bit length': 8})
        touchtemp.setReportList(['IEC 60950-1 Compliant', 'IEC 62368-1 TS1 Compliant', 'IEC 62368-1 TS2 Compliant'])
        TouchTemperature_dm.addChild(touchtemp)
        touchtemp.reference_name = "Touch Temprature"
        touchtemp.help = "Touch temperature as defined by the USB PD specification."
        touchtemp.setMaxValue(2)

        NumberofBatteries_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Number of Batteries',
                                                         'offset': 48,
                                                         'bit length': 56})
        self.dataModel.addChild(NumberofBatteries_dm)

        batteryinfo = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number of Fixed Batteries',
                                                      'offset': 0,
                                                      'bit length': 4})
        NumberofBatteries_dm.addChild(batteryinfo)
        batteryinfo.reference_name = "Number of Fixed Batteries"
        batteryinfo.help = "Battery information as defined in the USB PD specification."
        batteryinfo.setMaxValue(15)
        batteryinfo.setMinValue(0)

        batteryinfo = register_class.cDecimalDMTerminator(self,
                                                     {'name': 'Number of Hot-Swappable Batteries',
                                                      'offset': 4,
                                                      'bit length': 4})
        NumberofBatteries_dm.addChild(batteryinfo)
        batteryinfo.reference_name = "Number of Hot-Swappable Batteries"
        batteryinfo.help = "Battery information as defined in the USB PD specification."
        batteryinfo.setMaxValue(15)
        batteryinfo.setMinValue(0)

        SinkModes_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'Sink Modes',
                                                         'offset': 56,
                                                         'bit length': 61})
        self.dataModel.addChild(SinkModes_dm)

        sinkmodes = register_class.cBooleanDMTerminator(self,
                {'name': 'PPS Charging Supported',
                'offset': 0,
                'bit length': 1})
        SinkModes_dm.addChild(sinkmodes)
        sinkmodes.reference_name = "PPS Charging Supported"
        sinkmodes.help = "Sink modes as defined in the USB PD specification."

        sinkmodes = register_class.cBooleanDMTerminator(self,
                {'name': 'VBUS Powered',
                'offset': 1,
                'bit length': 1})
        SinkModes_dm.addChild(sinkmodes)
        sinkmodes.reference_name = "VBUS Powered"
        sinkmodes.help = "Sink modes as defined in the USB PD specification."

        sinkmodes = register_class.cBooleanDMTerminator(self,
                {'name': 'Mains Powered',
                'offset': 2,
                'bit length': 1})
        SinkModes_dm.addChild(sinkmodes)
        sinkmodes.reference_name = "Mains Powered"
        sinkmodes.help = "Sink modes as defined in the USB PD specification."

        sinkmodes = register_class.cBooleanDMTerminator(self,
                {'name': 'Battery Powered',
                'offset': 3,
                'bit length': 1})
        SinkModes_dm.addChild(sinkmodes)
        sinkmodes.reference_name = "Battery Powered"
        sinkmodes.help = "Sink modes as defined in the USB PD specification."

        sinkmodes = register_class.cBooleanDMTerminator(self,
                {'name': 'Battery Essentially Unlimited',
                'offset': 4,
                'bit length': 1})
        SinkModes_dm.addChild(sinkmodes)
        sinkmodes.reference_name = "Battery Essentially Unlimited"
        sinkmodes.help = "Sink modes as defined in the USB PD specification."
        sinkminimumpdp = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Sink Minimum PDP',
                                                      'offset': 64,
                                                      'bit length': 8})
        sinkminimumpdp.dictScaleUnits = {'W': 1.0}
        sinkminimumpdp.defaultUnit = 'W'
        self.dataModel.addChild(sinkminimumpdp)
        sinkminimumpdp.reference_name = "Sink Minimum PDP"
        sinkminimumpdp.help = "Sink minimum PDP as defined in the USB PD specification."
        sinkminimumpdp.setMaxValue(127)
        sinkminimumpdp.setMinValue(0)
        sinkoperationalpdp = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Sink Operational PDP',
                                                      'offset': 72,
                                                      'bit length': 8})
        sinkoperationalpdp.dictScaleUnits = {'W': 1.0}
        sinkoperationalpdp.defaultUnit = 'W'
        self.dataModel.addChild(sinkoperationalpdp)
        sinkoperationalpdp.reference_name = "Sink Operational PDP"
        sinkoperationalpdp.help = "Sink operational PDP as defined in the USB PD specification."
        sinkoperationalpdp.setMaxValue(127)
        sinkoperationalpdp.setMinValue(0)
        sinkmaximumpdp = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Sink Maximum PDP',
                                                      'offset': 80,
                                                      'bit length': 8})
        sinkmaximumpdp.dictScaleUnits = {'W': 1.0}
        sinkmaximumpdp.defaultUnit = 'W'
        self.dataModel.addChild(sinkmaximumpdp)
        sinkmaximumpdp.reference_name = "Sink Maximum PDP"
        sinkmaximumpdp.help = "Sink maximum PDP as defined in the USB PD specification."
        sinkmaximumpdp.setMaxValue(127)
        sinkmaximumpdp.setMinValue(0)
        eprsinkminimumpdp = register_class.cHexDMTerminator(self,
                {'name': 'EPR Sink Minimum PDP',
                'offset': 88,
                'bit length': 8})
        self.dataModel.addChild(eprsinkminimumpdp)
        eprsinkminimumpdp.reference_name = "EPR Sink Minimum PDP"
        eprsinkoperationalpdp = register_class.cHexDMTerminator(self,
                {'name': 'EPR Sink Operational PDP',
                'offset': 96,
                'bit length': 8})
        self.dataModel.addChild(eprsinkoperationalpdp)
        eprsinkoperationalpdp.reference_name = "EPR Sink Operational PDP"
        eprsinkmaximumpdp = register_class.cHexDMTerminator(self,
                {'name': 'EPR Sink Maximum PDP',
                'offset': 104,
                'bit length': 8})
        self.dataModel.addChild(eprsinkmaximumpdp)
        eprsinkmaximumpdp.reference_name = "EPR Sink Maximum PDP"

        update_function = get_updater_function("txskedb_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cuuidhandle_0x80_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'UUID Handle',
                                           'address': 0x80,
                                           'byte length': 16,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'UUID Handle',
                                                         'offset': 0,
                                                         'bit length': 128})

        self.setAsShared()

        UUIDHandle_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'UUID Handle',
                                                         'offset': 0,
                                                         'bit length': 128})
        self.dataModel.addChild(UUIDHandle_dm)

        uuidhandle = register_class.cHexDMTerminator(self,
                {'name': 'UUID Handle',
                'offset': 0,
                'bit length': 128})
        UUIDHandle_dm.addChild(uuidhandle)
        uuidhandle.reference_name = "UUID Handle"
        uuidhandle.help = "BR/GR UUID"

        update_function = get_updater_function("uuidhandle_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cextdcdcstat_0x94_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'External DCDC Status',
                                           'address': 0x94,
                                           'byte length': 1,
                                           'permission': 'DRO'})

        self.dataModel = register_class.cDataModelArray(self, 1,
                                                        {'name': 'External DCDC Status',
                                                         'offset': 0,
                                                         'bit length': 8})
        status = register_class.cListDMTerminator(self,
                {'name': 'Status',
                    'offset': 0,
                    'bit length': 2})
        status.setReportList(['Boost', 'Buck', 'Buck-Boost', 'Reserved'])
        self.dataModel.addChild(status)
        status.reference_name = "Status"
        status.help = "Operating Status"
        status.setMaxValue(3)
        tsd = register_class.cListDMTerminator(self,
                {'name': 'TSD',
                    'offset': 4,
                    'bit length': 1})
        tsd.setReportList(['No TSD', 'TSD occurred.  Reset back to 0 once read'])
        self.dataModel.addChild(tsd)
        tsd.reference_name = "TSD"
        tsd.help = "Thermal ShutDown"
        tsd.setMaxValue(1)
        ovp = register_class.cListDMTerminator(self,
                {'name': 'OVP',
                    'offset': 5,
                    'bit length': 1})
        ovp.setReportList(['No OVP', 'Output voltage exceeds the OVP threshold.  Reset b'])
        self.dataModel.addChild(ovp)
        ovp.reference_name = "OVP"
        ovp.help = "Over Voltage Protection"
        ovp.setMaxValue(1)
        ocp = register_class.cListDMTerminator(self,
                {'name': 'OCP',
                    'offset': 6,
                    'bit length': 1})
        ocp.setReportList(['No OCP', 'Output current reached ILIM sensed at ISP and ISN'])
        self.dataModel.addChild(ocp)
        ocp.reference_name = "OCP"
        ocp.help = "Over Current Protection"
        ocp.setMaxValue(1)
        scp = register_class.cBooleanDMTerminator(self,
                {'name': 'SCP',
                'offset': 7,
                'bit length': 1})
        self.dataModel.addChild(scp)
        scp.reference_name = "SCP"
        scp.help = "Short Circuit Protection"

        update_function = get_updater_function("extdcdcstat_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class cextdcdcparams_0x95_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'External DCDC Parameters',
                                           'address': 0x95,
                                           'byte length': 41,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'External DCDC Parameters',
                                                         'offset': 0,
                                                         'bit length': 328})

        ExternalDCDCParameters_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'External DCDC Parameters',
                                                         'offset': 0,
                                                         'bit length': 327})
        self.dataModel.addChild(ExternalDCDCParameters_dm)

        vlsbuv = register_class.cScalingDMTerminator(self,
                                                     {'name': 'LSB Voltage',
                                                      'offset': 0,
                                                      'bit length': 32})
        vlsbuv.dictScaleUnits = {' uV/code': 1.0}
        vlsbuv.defaultUnit = ' uV/code'
        ExternalDCDCParameters_dm.addChild(vlsbuv)
        vlsbuv.reference_name = "LSB Voltage"
        vlsbuv.help = "LSB of DCDC in uV/code for generating desired VOUT (Slope (m) for the line) (+/-1 uV/code per LSB as uV/code)"
        vlsbuv.setMaxValue(2147483647)
        vlsbuv.setMinValue(-2147483647)

        vcode0uv = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Code 0 Voltage',
                                                      'offset': 32,
                                                      'bit length': 32})
        vcode0uv.dictScaleUnits = {' uV': 1.0}
        vcode0uv.defaultUnit = ' uV'
        ExternalDCDCParameters_dm.addChild(vcode0uv)
        vcode0uv.reference_name = "Code 0 Voltage"
        vcode0uv.help = "VOUT of DCDC in uV when writing 0 code to Voltage field (Y intersection (c) for the line) (+/-1 uV per LSB as uV)"
        vcode0uv.setMaxValue(2147483647)
        vcode0uv.setMinValue(-2147483647)

        ilsbua = register_class.cScalingDMTerminator(self,
                                                     {'name': 'LSB Current',
                                                      'offset': 64,
                                                      'bit length': 32})
        ilsbua.dictScaleUnits = {' uA/code': 1.0}
        ilsbua.defaultUnit = ' uA/code'
        ExternalDCDCParameters_dm.addChild(ilsbua)
        ilsbua.reference_name = "LSB Current"
        ilsbua.help = "LSB of DCDC in uA/code for setting desired ILIM (Slope (m) for the line) (+/-1 uA/code per LSB as uA/code)"
        ilsbua.setMaxValue(2147483647)
        ilsbua.setMinValue(-2147483647)

        icode0ua = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Code 0 Current',
                                                      'offset': 96,
                                                      'bit length': 32})
        icode0ua.dictScaleUnits = {' uA': 1.0}
        icode0ua.defaultUnit = ' uA'
        ExternalDCDCParameters_dm.addChild(icode0ua)
        icode0ua.reference_name = "Code 0 Current"
        icode0ua.help = "ILIM of DCDC in uA when writing 0 code to ILIM field (Y intersection (c) for the line) (+/-1 uA per LSB as uA)"
        icode0ua.setMaxValue(2147483647)
        icode0ua.setMinValue(-2147483647)

        vcodebit0offsetinvoutcontainer = register_class.cHexDMTerminator(self,
                {'name': 'Voltage Code Offset',
                'offset': 128,
                'bit length': 8})
        ExternalDCDCParameters_dm.addChild(vcodebit0offsetinvoutcontainer)
        vcodebit0offsetinvoutcontainer.reference_name = "Voltage Code Offset"
        vcodebit0offsetinvoutcontainer.help = "At what bit offset should the FW inject the calcuated VOUT code in I2C_CONTROLLER_EVENT__EXTDCDC_SET_VOUT_CONTAINER data buffer?"

        vcodebitlengthinvoutcontainer = register_class.cHexDMTerminator(self,
                {'name': 'Voltage Code Length',
                'offset': 136,
                'bit length': 8})
        ExternalDCDCParameters_dm.addChild(vcodebitlengthinvoutcontainer)
        vcodebitlengthinvoutcontainer.reference_name = "Voltage Code Length"
        vcodebitlengthinvoutcontainer.help = "What is the length of the VOUT field in I2C_CONTROLLER_EVENT__EXTDCDC_SET_VOUT_CONTAINER data buffer in bits?"

        icodebit0offsetinilimcontainer = register_class.cHexDMTerminator(self,
                {'name': 'Current Code Offset',
                'offset': 144,
                'bit length': 8})
        ExternalDCDCParameters_dm.addChild(icodebit0offsetinilimcontainer)
        icodebit0offsetinilimcontainer.reference_name = "Current Code Offset"
        icodebit0offsetinilimcontainer.help = "At what bit offset should the FW inject the calcuated ILIM code in I2C_CONTROLLER_EVENT__EXTDCDC_SET_ILIM_CONTAINER data buffer?"

        icodebitlengthinilimcontainer = register_class.cHexDMTerminator(self,
                {'name': 'Current Code Length',
                'offset': 152,
                'bit length': 8})
        ExternalDCDCParameters_dm.addChild(icodebitlengthinilimcontainer)
        icodebitlengthinilimcontainer.reference_name = "Current Code Length"
        icodebitlengthinilimcontainer.help = "What is the length of the ILIM field in I2C_CONTROLLER_EVENT__EXTDCDC_SET_ILIM_CONTAINER data buffer in bits?"

        codeendiannessmsbfirst = register_class.cBooleanDMTerminator(self,
                {'name': 'Big Endian',
                'offset': 160,
                'bit length': 1})
        ExternalDCDCParameters_dm.addChild(codeendiannessmsbfirst)
        codeendiannessmsbfirst.reference_name = "Big Endian"
        codeendiannessmsbfirst.help = "Set this bit to indicate FW to inject the calculated code for V and I in in the respective container in MSB First endianness. When not set, code is injected in LSB first endianness."

        enablecalibration = register_class.cBooleanDMTerminator(self,
                {'name': 'Enable Calibration',
                'offset': 161,
                'bit length': 1})
        ExternalDCDCParameters_dm.addChild(enablecalibration)
        enablecalibration.reference_name = "Enable Calibration"
        enablecalibration.help = "Shall be enabled only for LM5176 based EPR-SRC systems. Else, shall be disabled. FW doesnt explicitly check for all these conditions when enabling the calibration for LM51756."

        vlsbac = register_class.cScalingDMTerminator(self,
                                                     {'name': 'LSB Voltage VAC',
                                                      'offset': 232,
                                                      'bit length': 32})
        vlsbac.dictScaleUnits = {' uV/code': 1.0}
        vlsbac.defaultUnit = ' uV/code'
        ExternalDCDCParameters_dm.addChild(vlsbac)
        vlsbac.reference_name = "LSB Voltage VAC"
        vlsbac.help = "LSB of DCDC in uV/code for generating desired VOUT (Slope (m) for the line) (+/-1 uV/code per LSB as uV/code)"
        vlsbac.setMaxValue(2147483647)
        vlsbac.setMinValue(-2147483647)

        vcode0uv_vac = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Code 0 Voltage VAC',
                                                      'offset': 168,
                                                      'bit length': 32})
        vcode0uv_vac.dictScaleUnits = {' uV': 1.0}
        vcode0uv_vac.defaultUnit = ' uV'
        ExternalDCDCParameters_dm.addChild(vcode0uv_vac)
        vcode0uv_vac.reference_name = "Code 0 Voltage VAC"
        vcode0uv_vac.help = "VOUT VAC of DCDC in uV when writing 0 code to Voltage field (Y intersection (c) for the line) (+/-1 uV per LSB as uV)"
        vcode0uv_vac.setMaxValue(2147483647)
        vcode0uv_vac.setMinValue(-2147483647)

        ilsbua_iac = register_class.cScalingDMTerminator(self,
                                                     {'name': 'LSB Current',
                                                      'offset': 264,
                                                      'bit length': 32})
        ilsbua_iac.dictScaleUnits = {' uA/code': 1.0}
        ilsbua_iac.defaultUnit = ' uA/code'
        ExternalDCDCParameters_dm.addChild(ilsbua_iac)
        ilsbua_iac.reference_name = "LSB Current"
        ilsbua_iac.help = "LSB of DCDC in uA/code for setting desired ILIM (Slope (m) for the line) (+/-1 uA/code per LSB as uA/code)"
        ilsbua_iac.setMaxValue(2147483647)
        ilsbua_iac.setMinValue(-2147483647)        

        icode0ua_iac = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Code 0 Current IAC',
                                                      'offset': 200,
                                                      'bit length': 32})
        icode0ua_iac.dictScaleUnits = {' uA': 1.0}
        icode0ua_iac.defaultUnit = ' uA'
        ExternalDCDCParameters_dm.addChild(icode0ua_iac)
        icode0ua_iac.reference_name = "Code 0 Current IAC"
        icode0ua_iac.help = "ILIM IAC of DCDC in uA when writing 0 code to ILIM field (Y intersection (c) for the line) (+/-1 uA per LSB as uA)"
        icode0ua_iac.setMaxValue(2147483647)
        icode0ua_iac.setMinValue(-2147483647)

        vcodebit0offsetinvoutcontainer_vac = register_class.cHexDMTerminator(self,
                {'name': 'Voltage Code Offset VAC',
                'offset': 296,
                'bit length': 8})
        ExternalDCDCParameters_dm.addChild(vcodebit0offsetinvoutcontainer_vac)
        vcodebit0offsetinvoutcontainer_vac.reference_name = "Voltage Code Offset VAC"
        vcodebit0offsetinvoutcontainer_vac.help = "At what bit offset should the FW inject the calcuated VOUT code in I2C_CONTROLLER_EVENT__EXTDCDC_SET_VOUT_CONTAINER data buffer?"

        vcodebitlengthinvoutcontainer_vac = register_class.cHexDMTerminator(self,
                {'name': 'Voltage Code Length VAC',
                'offset': 312,
                'bit length': 8})
        ExternalDCDCParameters_dm.addChild(vcodebitlengthinvoutcontainer_vac)
        vcodebitlengthinvoutcontainer_vac.reference_name = "Voltage Code Length VAC"
        vcodebitlengthinvoutcontainer_vac.help = "What is the length of the VOUT field in I2C_CONTROLLER_EVENT__EXTDCDC_SET_VOUT_CONTAINER data buffer in bits?"

        icodebit0offsetinilimcontainer_IAC = register_class.cHexDMTerminator(self,
                {'name': 'Current Code Offset IAC',
                'offset': 304,
                'bit length': 8})
        ExternalDCDCParameters_dm.addChild(icodebit0offsetinilimcontainer_IAC)
        icodebit0offsetinilimcontainer_IAC.reference_name = "Current Code Offset IAC"
        icodebit0offsetinilimcontainer_IAC.help = "At what bit offset should the FW inject the calcuated ILIM code in I2C_CONTROLLER_EVENT__EXTDCDC_SET_ILIM_CONTAINER data buffer?"

        icodebitlengthinilimcontainer_IAC = register_class.cHexDMTerminator(self,
                {'name': 'Current Code Length IAC',
                'offset': 320,
                'bit length': 8})
        ExternalDCDCParameters_dm.addChild(icodebitlengthinilimcontainer_IAC)
        icodebitlengthinilimcontainer_IAC.reference_name = "Current Code Length IAC"
        icodebitlengthinilimcontainer_IAC.help = "What is the length of the ILIM field in I2C_CONTROLLER_EVENT__EXTDCDC_SET_ILIM_CONTAINER data buffer in bits?"        

        update_function = get_updater_function("extdcdcparams_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()


class ceprconfig_0x97_register(register_class.cRegister):
    def __init__(self):
        register_class.cRegister.__init__(self,
                                          {'register name': 'EPR Config',
                                           'address': 0x97,
                                           'byte length': 5,
                                           'permission': 'RW'})

        self.dataModel = register_class.cDataModelArray(self, 2,
                                                        {'name': 'EPR Config',
                                                         'offset': 0,
                                                         'bit length': 40})

        EPRConfig_dm = register_class.cDataModelArray(self, 1,
                                                        {'name': 'EPR Config',
                                                         'offset': 0,
                                                         'bit length': 40})
        self.dataModel.addChild(EPRConfig_dm)

        voltagedividerturnoninms = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage Divider Turn On',
                                                      'offset': 0,
                                                      'bit length': 8})
        voltagedividerturnoninms.dictScaleUnits = {' ms': 1.0}
        voltagedividerturnoninms.defaultUnit = ' ms'
        EPRConfig_dm.addChild(voltagedividerturnoninms)
        voltagedividerturnoninms.reference_name = "Voltage Divider Turn On"
        voltagedividerturnoninms.help = "Voltage Divider Turn On In ms (1 ms per LSB as ms)"
        voltagedividerturnoninms.setMaxValue(255)
        voltagedividerturnoninms.setMinValue(0)

        voltagedividerturnoffinms = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage Divider Turn Off',
                                                      'offset': 8,
                                                      'bit length': 8})
        voltagedividerturnoffinms.dictScaleUnits = {' ms': 1.0}
        voltagedividerturnoffinms.defaultUnit = ' ms'
        EPRConfig_dm.addChild(voltagedividerturnoffinms)
        voltagedividerturnoffinms.reference_name = "Voltage Divider Turn Off"
        voltagedividerturnoffinms.help = "Voltage Divider Turn Off In ms (1 ms per LSB as ms)"
        voltagedividerturnoffinms.setMaxValue(255)
        voltagedividerturnoffinms.setMinValue(0)

        voltagedividerturnonsmallinms = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Voltage Divider Turn On Small',
                                                      'offset': 16,
                                                      'bit length': 8})
        voltagedividerturnonsmallinms.dictScaleUnits = {' ms': 1.0}
        voltagedividerturnonsmallinms.defaultUnit = ' ms'
        EPRConfig_dm.addChild(voltagedividerturnonsmallinms)
        voltagedividerturnonsmallinms.reference_name = "Voltage Divider Turn On Small"
        voltagedividerturnonsmallinms.help = "Voltage Divider Turn On Small In ms (1 ms per LSB as ms)"
        voltagedividerturnonsmallinms.setMaxValue(255)
        voltagedividerturnonsmallinms.setMinValue(0)

        vbusthresholdmargin = register_class.cHexDMTerminator(self,
                {'name': 'Vbus Threshold Margin',
                'offset': 24,
                'bit length': 8})
        EPRConfig_dm.addChild(vbusthresholdmargin)
        vbusthresholdmargin.reference_name = "Vbus Threshold Margin"
        vbusthresholdmargin.help = "VBUS Threshold Margin"

        dividerratio = register_class.cScalingDMTerminator(self,
                                                     {'name': 'Divider Ratio',
                                                      'offset': 32,
                                                      'bit length': 8})
        dividerratio.dictScaleUnits = {' %': 0.78125}
        dividerratio.defaultUnit = ' %'
        EPRConfig_dm.addChild(dividerratio)
        dividerratio.reference_name = "Divider Ratio"
        dividerratio.help = "VBUS divider ratio (0.78125 % per LSB)"
        dividerratio.setMaxValue(255)
        dividerratio.setMinValue(0)

        update_function = get_updater_function("eprconfig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

# -------------------- END OF REGISTER DEFINITIONS --------------------------------

# -------------------- 4CC DEFINITIONS -----------------------------------

class cAMDs(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"startalternatemodediscovery"',
                                                 '4cc': 'AMDs',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("AMDs_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cAMEn(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"sendentermode"',
                                                 '4cc': 'AMEn',
                                                 'inargs byte length': 3,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 24})
        self.setInputModel(InputParameters_dm)

        SVIDTarget = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'SVIDTarget',
                'offset': 8,
                'bit length': 16})
        InputParameters_dm.addChild(SVIDTarget)
        SVIDTarget.reference_name = "SVIDTarget"

        ObjPos = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'ObjPos',
                'offset': 5,
                'bit length': 3})
        InputParameters_dm.addChild(ObjPos)
        ObjPos.reference_name = "ObjPos"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 0,
                'bit length': 5})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("AMEn_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cAMEx(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"sendexitmode"',
                                                 '4cc': 'AMEx',
                                                 'inargs byte length': 3,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 24})
        self.setInputModel(InputParameters_dm)

        SVIDTarget = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'SVIDTarget',
                'offset': 8,
                'bit length': 16})
        InputParameters_dm.addChild(SVIDTarget)
        SVIDTarget.reference_name = "SVIDTarget"

        ObjPos = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'ObjPos',
                'offset': 5,
                'bit length': 3})
        InputParameters_dm.addChild(ObjPos)
        ObjPos.reference_name = "ObjPos"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 0,
                'bit length': 5})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("AMEx_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFWrq(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"Firmware Update Request"',
                                                 '4cc': 'FWrq',
                                                 'inargs byte length': 5,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 40})
        self.setInputModel(InputParameters_dm)

        DataSize = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'DataSize',
                'offset': 24,
                'bit length': 16})
        InputParameters_dm.addChild(DataSize)
        DataSize.reference_name = "DataSize"

        BuffOffset = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'BuffOffset',
                'offset': 8,
                'bit length': 16})
        InputParameters_dm.addChild(BuffOffset)
        BuffOffset.reference_name = "BuffOffset"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 2,
                'bit length': 6})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        SOPTarget = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'SOPTarget',
                    'offset': 0,
                    'bit length': 2})
        SOPTarget.setReportList(['SOP', 'Reserved'])
        InputParameters_dm.addChild(SOPTarget)
        SOPTarget.reference_name = "SOPTarget"
        SOPTarget.setMaxValue(1)

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("FWrq_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFWRs(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"Firmware Update Response"',
                                                 '4cc': 'FWRs',
                                                 'inargs byte length': 5,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 40})
        self.setInputModel(InputParameters_dm)

        DataSize = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'DataSize',
                'offset': 24,
                'bit length': 16})
        InputParameters_dm.addChild(DataSize)
        DataSize.reference_name = "DataSize"

        BuffOffset = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'BuffOffset',
                'offset': 8,
                'bit length': 16})
        InputParameters_dm.addChild(BuffOffset)
        BuffOffset.reference_name = "BuffOffset"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 2,
                'bit length': 6})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        SOPTarget = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'SOPTarget',
                    'offset': 0,
                    'bit length': 2})
        SOPTarget.setReportList(['SOP', 'Reserved'])
        InputParameters_dm.addChild(SOPTarget)
        SOPTarget.reference_name = "SOPTarget"
        SOPTarget.setMaxValue(1)

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("FWRs_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cGCdm(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"getdiscoveredmodes"',
                                                 '4cc': 'GCdm',
                                                 'inargs byte length': 3,
                                                 'outargs byte length': 35})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 24})
        self.setInputModel(InputParameters_dm)

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 0,
                'bit length': 8})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        SVID = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'SVID',
                'offset': 8,
                'bit length': 16})
        InputParameters_dm.addChild(SVID)
        SVID.reference_name = "SVID"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 280})
        self.setOutputModel(OutputParameters_dm)

        VDOMode1 = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode1',
                'offset': 0,
                'bit length': 32})
        OutputParameters_dm.addChild(VDOMode1)
        VDOMode1.reference_name = "VDOMode1"

        VDOMode1Pos = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode1Pos',
                'offset': 32,
                'bit length': 8})
        OutputParameters_dm.addChild(VDOMode1Pos)
        VDOMode1Pos.reference_name = "VDOMode1Pos"

        VDOMode2 = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode2',
                'offset': 40,
                'bit length': 32})
        OutputParameters_dm.addChild(VDOMode2)
        VDOMode2.reference_name = "VDOMode2"

        VDOMode2Pos = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode2Pos',
                'offset': 72,
                'bit length': 8})
        OutputParameters_dm.addChild(VDOMode2Pos)
        VDOMode2Pos.reference_name = "VDOMode2Pos"

        VDOMode3 = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode3',
                'offset': 80,
                'bit length': 32})
        OutputParameters_dm.addChild(VDOMode3)
        VDOMode3.reference_name = "VDOMode3"

        VDOMode3Pos = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode3Pos',
                'offset': 112,
                'bit length': 8})
        OutputParameters_dm.addChild(VDOMode3Pos)
        VDOMode3Pos.reference_name = "VDOMode3Pos"

        VDOMode4 = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode4',
                'offset': 120,
                'bit length': 32})
        OutputParameters_dm.addChild(VDOMode4)
        VDOMode4.reference_name = "VDOMode4"

        VDOMode4Pos = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode4Pos',
                'offset': 152,
                'bit length': 8})
        OutputParameters_dm.addChild(VDOMode4Pos)
        VDOMode4Pos.reference_name = "VDOMode4Pos"

        VDOMode5 = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode5',
                'offset': 160,
                'bit length': 32})
        OutputParameters_dm.addChild(VDOMode5)
        VDOMode5.reference_name = "VDOMode5"

        VDOMode5Pos = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode5Pos',
                'offset': 192,
                'bit length': 8})
        OutputParameters_dm.addChild(VDOMode5Pos)
        VDOMode5Pos.reference_name = "VDOMode5Pos"

        VDOMode6 = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode6',
                'offset': 200,
                'bit length': 32})
        OutputParameters_dm.addChild(VDOMode6)
        VDOMode6.reference_name = "VDOMode6"

        VDOMode6Pos = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode6Pos',
                'offset': 232,
                'bit length': 8})
        OutputParameters_dm.addChild(VDOMode6Pos)
        VDOMode6Pos.reference_name = "VDOMode6Pos"

        VDOMode7 = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode7',
                'offset': 240,
                'bit length': 32})
        OutputParameters_dm.addChild(VDOMode7)
        VDOMode7.reference_name = "VDOMode7"

        VDOMode7Pos = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'VDOMode7Pos',
                'offset': 272,
                'bit length': 8})
        OutputParameters_dm.addChild(VDOMode7Pos)
        VDOMode7Pos.reference_name = "VDOMode7Pos"

        update_function = get_updater_function("GCdm_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cGaid(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"reset"',
                                                 '4cc': 'Gaid',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 0})                                            


        self.inargsDataModel = None

        self.outargsDataModel = None

        update_function = get_updater_function("Gaid_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cGAID(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"sysreset"',
                                                 '4cc': 'GAID',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 0})                                            


        self.inargsDataModel = None

        self.outargsDataModel = None

        update_function = get_updater_function("GAID_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cDBGc(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"clearfwstatehistory"',
                                                 '4cc': 'DBGc',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 0})                                            


        self.inargsDataModel = None

        self.outargsDataModel = None

        update_function = get_updater_function("DBGc_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cDBGi(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"SendStateTracerAddress"',
                                                 '4cc': 'DBGi',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 36})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 288})
        self.setOutputModel(OutputParameters_dm)

        Debug = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Debug',
                'offset': 0,
                'bit length': 288})
        OutputParameters_dm.addChild(Debug)
        Debug.reference_name = "Debug"

        update_function = get_updater_function("DBGi_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cDBGr(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"getfwstatehistory"',
                                                 '4cc': 'DBGr',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 64})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 512})
        self.setOutputModel(OutputParameters_dm)

        Debug = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Debug',
                'offset': 0,
                'bit length': 512})
        OutputParameters_dm.addChild(Debug)
        Debug.reference_name = "Debug"

        update_function = get_updater_function("DBGr_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cDTRr(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"getTraceWarnings"',
                                                 '4cc': 'DTRr',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 64})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 64})
        self.setOutputModel(OutputParameters_dm)

        TraceWarningsConfig = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'TraceWarningsConfig',
                'offset': 0,
                'bit length': 32})
        OutputParameters_dm.addChild(TraceWarningsConfig)
        TraceWarningsConfig.reference_name = "TraceWarningsConfig"

        TraceWarnings = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'TraceWarnings',
                'offset': 32,
                'bit length': 32})
        OutputParameters_dm.addChild(TraceWarnings)
        TraceWarnings.reference_name = "TraceWarnings"

        update_function = get_updater_function("DTRr_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cDTRw(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"setTraceWarningConfig"',
                                                 '4cc': 'DTRw',
                                                 'inargs byte length': 32,
                                                 'outargs byte length': 0})                                            


        self.outargsDataModel = None

        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 32})
        self.setInputModel(InputParameters_dm)

        TraceWarningsConfig = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'TraceWarningsConfig',
                'offset': 0,
                'bit length': 32})
        InputParameters_dm.addChild(TraceWarningsConfig)
        TraceWarningsConfig.reference_name = "TraceWarningsConfig"

        update_function = get_updater_function("DTRw_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cMEMr(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"memoryread"',
                                                 '4cc': 'MEMr',
                                                 'inargs byte length': 4,
                                                 'outargs byte length': 4})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 32})
        self.setInputModel(InputParameters_dm)

        MemAddr = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'MemAddr',
                'offset': 0,
                'bit length': 32})
        InputParameters_dm.addChild(MemAddr)
        MemAddr.reference_name = "MemAddr"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 32})
        self.setOutputModel(OutputParameters_dm)

        MemData = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'MemData',
                'offset': 0,
                'bit length': 32})
        OutputParameters_dm.addChild(MemData)
        MemData.reference_name = "MemData"

        update_function = get_updater_function("MEMr_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cMEMw(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"memorywrite"',
                                                 '4cc': 'MEMw',
                                                 'inargs byte length': 8,
                                                 'outargs byte length': 0})                                            


        self.outargsDataModel = None

        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 64})
        self.setInputModel(InputParameters_dm)

        MemAddr = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'MemAddr',
                'offset': 0,
                'bit length': 32})
        InputParameters_dm.addChild(MemAddr)
        MemAddr.reference_name = "MemAddr"

        MemData = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'MemData',
                'offset': 32,
                'bit length': 32})
        InputParameters_dm.addChild(MemData)
        MemData.reference_name = "MemData"

        update_function = get_updater_function("MEMw_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFLad(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"flashstartaddress"',
                                                 '4cc': 'FLad',
                                                 'inargs byte length': 4,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 32})
        self.setInputModel(InputParameters_dm)

        FlashAddress = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Flash Address',
                'offset': 0,
                'bit length': 32})
        InputParameters_dm.addChild(FlashAddress)
        FlashAddress.reference_name = "Flash Address"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("FLad_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFLem(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"flasherasememory"',
                                                 '4cc': 'FLem',
                                                 'inargs byte length': 5,
                                                 'outargs byte length': 0})                                            


        self.outargsDataModel = None

        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 40})
        self.setInputModel(InputParameters_dm)

        NumSectors = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'NumSectors',
                'offset': 32,
                'bit length': 8})
        InputParameters_dm.addChild(NumSectors)
        NumSectors.reference_name = "NumSectors"

        FlashAddress = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'FlashAddress',
                'offset': 0,
                'bit length': 32})
        InputParameters_dm.addChild(FlashAddress)
        FlashAddress.reference_name = "FlashAddress"

        update_function = get_updater_function("FLem_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFLer(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"flasheraseregion"',
                                                 '4cc': 'FLer',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 0})                                            


        self.outargsDataModel = None

        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setInputModel(InputParameters_dm)

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 1,
                'bit length': 7})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        RegionNum = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'RegionNum',
                    'offset': 0,
                    'bit length': 1})
        RegionNum.setReportList(['Region 0', 'Region 1'])
        InputParameters_dm.addChild(RegionNum)
        RegionNum.reference_name = "RegionNum"
        RegionNum.setMaxValue(1)

        update_function = get_updater_function("FLer_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFLrd(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"flashread"',
                                                 '4cc': 'FLrd',
                                                 'inargs byte length': 4,
                                                 'outargs byte length': 16})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 32})
        self.setInputModel(InputParameters_dm)

        FlashAddress = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Flash Address',
                'offset': 0,
                'bit length': 32})
        InputParameters_dm.addChild(FlashAddress)
        FlashAddress.reference_name = "Flash Address"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 128})
        self.setOutputModel(OutputParameters_dm)

        MemoryContents = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Memory Contents',
                'offset': 0,
                'bit length': 128})
        OutputParameters_dm.addChild(MemoryContents)
        MemoryContents.reference_name = "Memory Contents"

        update_function = get_updater_function("FLrd_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFLrr(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"flashreadregion"',
                                                 '4cc': 'FLrr',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 4})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setInputModel(InputParameters_dm)

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 1,
                'bit length': 7})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        RegionNum = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'RegionNum',
                    'offset': 0,
                    'bit length': 1})
        RegionNum.setReportList(['Region 0', 'Region 1'])
        InputParameters_dm.addChild(RegionNum)
        RegionNum.reference_name = "RegionNum"
        RegionNum.setMaxValue(1)

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 32})
        self.setOutputModel(OutputParameters_dm)

        ReadRegionAddr = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'ReadRegionAddr',
                'offset': 0,
                'bit length': 32})
        OutputParameters_dm.addChild(ReadRegionAddr)
        ReadRegionAddr.reference_name = "ReadRegionAddr"

        update_function = get_updater_function("FLrr_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFLvy(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"flashverify"',
                                                 '4cc': 'FLvy',
                                                 'inargs byte length': 4,
                                                 'outargs byte length': 0})                                            


        self.outargsDataModel = None

        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 32})
        self.setInputModel(InputParameters_dm)

        FlashAddress = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Flash Address',
                'offset': 0,
                'bit length': 32})
        InputParameters_dm.addChild(FlashAddress)
        FlashAddress.reference_name = "Flash Address"

        update_function = get_updater_function("FLvy_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFLwd(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"flashwrite"',
                                                 '4cc': 'FLwd',
                                                 'inargs byte length': 64,
                                                 'outargs byte length': 0})                                            


        self.outargsDataModel = None

        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 512})
        self.setInputModel(InputParameters_dm)

        FlashAddress = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Flash Address',
                'offset': 0,
                'bit length': 512})
        InputParameters_dm.addChild(FlashAddress)
        FlashAddress.reference_name = "Flash Address"

        update_function = get_updater_function("FLwd_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cPBMs(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"patchburststart"',
                                                 '4cc': 'PBMs',
                                                 'inargs byte length': 6,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 48})
        self.setInputModel(InputParameters_dm)

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 46,
                'bit length': 2})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        Timeoutvalue = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Timeout value',
                'offset': 40,
                'bit length': 6})
        InputParameters_dm.addChild(Timeoutvalue)
        Timeoutvalue.reference_name = "Timeout value"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 39,
                'bit length': 1})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        I2CSlaveAddress = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'I2C Slave Address',
                'offset': 32,
                'bit length': 7})
        InputParameters_dm.addChild(I2CSlaveAddress)
        I2CSlaveAddress.reference_name = "I2C Slave Address"

        Byte4ofbundlesize = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Byte4 of bundle size',
                'offset': 24,
                'bit length': 8})
        InputParameters_dm.addChild(Byte4ofbundlesize)
        Byte4ofbundlesize.reference_name = "Byte4 of bundle size"

        Byte3ofbundlesize = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Byte3 of bundle size',
                'offset': 16,
                'bit length': 8})
        InputParameters_dm.addChild(Byte3ofbundlesize)
        Byte3ofbundlesize.reference_name = "Byte3 of bundle size"

        Byte2ofbundlesize = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Byte2 of bundle size',
                'offset': 8,
                'bit length': 8})
        InputParameters_dm.addChild(Byte2ofbundlesize)
        Byte2ofbundlesize.reference_name = "Byte2 of bundle size"

        Byte1ofbundlesize = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Byte1 of bundle size',
                'offset': 0,
                'bit length': 8})
        InputParameters_dm.addChild(Byte1ofbundlesize)
        Byte1ofbundlesize.reference_name = "Byte1 of bundle size"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        PatchStartStatus = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'PatchStartStatus',
                                                      'offset': 0,
                                                      'bit length': 8})
        PatchStartStatus.setReportDict(OrderedDict([(0, 'Patch start success'), (4, 'Invalid bundle size'), (5, 'Invalid slave address'), (6, 'Invalid Timeout value')]))
        OutputParameters_dm.addChild(PatchStartStatus)
        PatchStartStatus.reference_name = "PatchStartStatus"
        PatchStartStatus.setMaxValue(6)

        update_function = get_updater_function("PBMs_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cPBMc(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"patchburstcomplete"',
                                                 '4cc': 'PBMc',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 40})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 320})
        self.setOutputModel(OutputParameters_dm)

        acCalculatedCRC = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'acCalculatedCRC',
                'offset': 288,
                'bit length': 32})
        OutputParameters_dm.addChild(acCalculatedCRC)
        acCalculatedCRC.reference_name = "acCalculatedCRC"

        acTransferredCRC = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'acTransferredCRC',
                'offset': 256,
                'bit length': 32})
        OutputParameters_dm.addChild(acTransferredCRC)
        acTransferredCRC.reference_name = "acTransferredCRC"

        Reserved = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Reserved',
                'offset': 240,
                'bit length': 16})
        OutputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        acIndicatedDataSize = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'acIndicatedDataSize',
                'offset': 224,
                'bit length': 16})
        OutputParameters_dm.addChild(acIndicatedDataSize)
        acIndicatedDataSize.reference_name = "acIndicatedDataSize"

        acHeaderVersion = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'acHeaderVersion',
                'offset': 216,
                'bit length': 8})
        OutputParameters_dm.addChild(acHeaderVersion)
        acHeaderVersion.reference_name = "acHeaderVersion"

        acFailCode = register_class.cListDMTerminator(self.outargsMiniReg,
                {'name': 'acFailCode',
                    'offset': 208,
                    'bit length': 8})
        acFailCode.setReportList(['AC_FAIL_NONE: No failure', 'AC_FAIL_WRONG_HEADER_VERSION: The header version is expected to be 1 and was not', 'AC_FAIL_TOO_MUCH_DATA: The DataSize field indicates that you are trying to load more configuration data that there is allocated SRAM for', 'AC_FAIL_CRC_CHECK_FAIL: The CRC comparison failed'])
        OutputParameters_dm.addChild(acFailCode)
        acFailCode.reference_name = "acFailCode"
        acFailCode.setMaxValue(3)

        acState = register_class.cListDMTerminator(self.outargsMiniReg,
                {'name': 'acState',
                    'offset': 200,
                    'bit length': 8})
        acState.setReportList(["AC_NODATA: No configuration data found yet, because we haven't started looking", 'AC_LOADING_DEFAULT: Attempting to load configuration data from a factory default', 'AC_LOADING_SRAM: Attempting to load configuration data from SRAM', 'AC_LOADING_FLASH: Attempting to load configuration data from Flash', 'AC_LOADING_I2C: Attempting to load configuration data from I2C', 'AC_LOADING_DONE: Done loading configuration data, we found valid data', 'AC_ERROR: A generic error state', 'AC_DONE_SUCCESS: Completely done with the app customization process and the records were applied successfully', 'AC_DONE_FAIL: Completely done with the app customization process and the records were not applied'])
        OutputParameters_dm.addChild(acState)
        acState.reference_name = "acState"
        acState.setMaxValue(8)

        configBundleGood = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'configBundleGood',
                'offset': 192,
                'bit length': 8})
        OutputParameters_dm.addChild(configBundleGood)
        configBundleGood.reference_name = "configBundleGood"

        rpRomVersionExpected = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'rpRomVersionExpected',
                'offset': 160,
                'bit length': 32})
        OutputParameters_dm.addChild(rpRomVersionExpected)
        rpRomVersionExpected.reference_name = "rpRomVersionExpected"

        rpBundleTotalSize = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'rpBundleTotalSize',
                'offset': 144,
                'bit length': 16})
        OutputParameters_dm.addChild(rpBundleTotalSize)
        rpBundleTotalSize.reference_name = "rpBundleTotalSize"

        rpBundleFlags = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'rpBundleFlags',
                'offset': 128,
                'bit length': 16})
        OutputParameters_dm.addChild(rpBundleFlags)
        rpBundleFlags.reference_name = "rpBundleFlags"

        rpPatchBodyCrc = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'rpPatchBodyCrc',
                'offset': 96,
                'bit length': 32})
        OutputParameters_dm.addChild(rpPatchBodyCrc)
        rpPatchBodyCrc.reference_name = "rpPatchBodyCrc"

        rpPatchHeaderCrc = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'rpPatchHeaderCrc',
                'offset': 64,
                'bit length': 32})
        OutputParameters_dm.addChild(rpPatchHeaderCrc)
        rpPatchHeaderCrc.reference_name = "rpPatchHeaderCrc"

        rpBundleSignature = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'rpBundleSignature',
                'offset': 48,
                'bit length': 8})
        OutputParameters_dm.addChild(rpBundleSignature)
        rpBundleSignature.reference_name = "rpBundleSignature"

        rpState = register_class.cListDMTerminator(self.outargsMiniReg,
                {'name': 'rpState',
                    'offset': 40,
                    'bit length': 8})
        rpState.setReportList(['RP_NOPATCH: No patch has been loaded', 'RP_LOADING: In the process of loading patch data', 'RP_LOADINGDONE: All patch data has been received', 'RP_RUNNING: A patch has been loaded and is running', 'RP_EARLYLOAD_SKIPPED: Indicates that the early boot process does not need to wait for a patch over I2C', 'RP_UARTBOOTED: Checking for a patch in RAM', 'RP_ERROR: A generic error state'])
        OutputParameters_dm.addChild(rpState)
        rpState.reference_name = "rpState"
        rpState.setMaxValue(6)

        patchBundleGood = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'patchBundleGood',
                'offset': 32,
                'bit length': 8})
        OutputParameters_dm.addChild(patchBundleGood)
        patchBundleGood.reference_name = "patchBundleGood"

        AppConfigPatchCompleteStatus = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'AppConfigPatchCompleteStatus',
                                                      'offset': 24,
                                                      'bit length': 8})
        AppConfigPatchCompleteStatus.setReportDict(OrderedDict([(64, 'Warning'), (128, 'Failure')]))
        OutputParameters_dm.addChild(AppConfigPatchCompleteStatus)
        AppConfigPatchCompleteStatus.reference_name = "AppConfigPatchCompleteStatus"
        AppConfigPatchCompleteStatus.setMaxValue(128)

        DevicePatchCompleteStatus = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'DevicePatchCompleteStatus',
                                                      'offset': 16,
                                                      'bit length': 8})
        DevicePatchCompleteStatus.setReportDict(OrderedDict([(0, 'Success'), (32, 'Not ready'), (64, 'Not a patch'), (65, 'Patch header checksum mismatch'), (66, 'Patch not compatible with this version of ROM'), (67, 'Patch code checksum mismatch'), (68, 'Null patch received'), (69, 'Error patch received')]))
        OutputParameters_dm.addChild(DevicePatchCompleteStatus)
        DevicePatchCompleteStatus.reference_name = "DevicePatchCompleteStatus"
        DevicePatchCompleteStatus.setMaxValue(69)

        cpReturn = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'cpReturn',
                'offset': 8,
                'bit length': 8})
        OutputParameters_dm.addChild(cpReturn)
        cpReturn.reference_name = "cpReturn"

        rpReturnIndicator = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'rpReturnIndicator',
                                                      'offset': 4,
                                                      'bit length': 4})
        rpReturnIndicator.setReportDict(OrderedDict([(0, 'Success'), (2, 'Informational'), (4, 'Warning'), (8, 'Error')]))
        OutputParameters_dm.addChild(rpReturnIndicator)
        rpReturnIndicator.reference_name = "rpReturnIndicator"
        rpReturnIndicator.setMaxValue(8)

        acReturnIndicator = register_class.cDictDMTerminator(self.outargsMiniReg,
                                                     {'name': 'acReturnIndicator',
                                                      'offset': 0,
                                                      'bit length': 4})
        acReturnIndicator.setReportDict(OrderedDict([(0, 'Success'), (2, 'Informational'), (4, 'Warning'), (8, 'Error')]))
        OutputParameters_dm.addChild(acReturnIndicator)
        acReturnIndicator.reference_name = "acReturnIndicator"
        acReturnIndicator.setMaxValue(8)

        update_function = get_updater_function("PBMc_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cPBMe(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"patchburstexit"',
                                                 '4cc': 'PBMe',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("PBMe_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cGO2P(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"go to patch mode"',
                                                 '4cc': 'GO2P',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("GO2P_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cALRT(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"alertmessage"',
                                                 '4cc': 'ALRT',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("ALRT_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cCRST(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"cablereset"',
                                                 '4cc': 'CRST',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("CRST_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cGPPI(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"getportpartnerinfo"',
                                                 '4cc': 'GPPI',
                                                 'inargs byte length': 2,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 16})
        self.setInputModel(InputParameters_dm)

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 15,
                'bit length': 1})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        FrameType = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'FrameType',
                    'offset': 13,
                    'bit length': 2})
        FrameType.setReportList(['SOP', "SOP'", "SOP''", 'Reserved_0x3'])
        InputParameters_dm.addChild(FrameType)
        FrameType.reference_name = "FrameType"
        FrameType.setMaxValue(3)

        NumBytes = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'NumBytes',
                'offset': 8,
                'bit length': 5})
        InputParameters_dm.addChild(NumBytes)
        NumBytes.reference_name = "NumBytes"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 7,
                'bit length': 1})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        MessageCategory = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'MessageCategory',
                    'offset': 5,
                    'bit length': 2})
        MessageCategory.setReportList(['Control message (no payload)', 'Data message (requires payload)', 'Extended message (requires payload)', 'Reserved_0x3'])
        InputParameters_dm.addChild(MessageCategory)
        MessageCategory.reference_name = "MessageCategory"
        MessageCategory.setMaxValue(3)

        MessageType = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'MessageType',
                'offset': 0,
                'bit length': 5})
        InputParameters_dm.addChild(MessageType)
        MessageType.reference_name = "MessageType"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("GPPI_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cGSkC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"getsinkcap"',
                                                 '4cc': 'GSkC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("GSkC_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cGSrC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"getsourcecap"',
                                                 '4cc': 'GSrC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("GSrC_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cESkC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"EPRGetSinkCapabilities"',
                                                 '4cc': 'ESkC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("ESkC_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cESrC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"EPRGetSourceCapabilities"',
                                                 '4cc': 'ESrC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("ESrC_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cEPRm(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"EPRMode"',
                                                 '4cc': 'EPRm',
                                                 'inargs byte length': 5,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 40})
        self.setInputModel(InputParameters_dm)

        EPRDO = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EPRDO',
                'offset': 8,
                'bit length': 32})
        InputParameters_dm.addChild(EPRDO)
        EPRDO.reference_name = "EPRDO"

        ManualEPRMDO = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'ManualEPRMDO',
                'offset': 7,
                'bit length': 1})
        InputParameters_dm.addChild(ManualEPRMDO)
        ManualEPRMDO.reference_name = "ManualEPRMDO"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 1,
                'bit length': 6})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        EnterEPR = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnterEPR',
                'offset': 0,
                'bit length': 1})
        InputParameters_dm.addChild(EnterEPR)
        EnterEPR.reference_name = "EnterEPR"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("EPRm_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cHRST(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"hardreset"',
                                                 '4cc': 'HRST',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("HRST_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cMBRd(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"messagebuffread"',
                                                 '4cc': 'MBRd',
                                                 'inargs byte length': 3,
                                                 'outargs byte length': 64})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 24})
        self.setInputModel(InputParameters_dm)

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 23,
                'bit length': 1})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        UnlockRxBuffer = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'UnlockRxBuffer',
                    'offset': 22,
                    'bit length': 1})
        UnlockRxBuffer.setReportList(["Do not clear the internal buffer, another 'MBRd' Task may be used later", 'Clear the internal buffer after this Task completes and the requested data is in the DATAx register'])
        InputParameters_dm.addChild(UnlockRxBuffer)
        UnlockRxBuffer.reference_name = "UnlockRxBuffer"
        UnlockRxBuffer.setMaxValue(1)

        DataSize = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'DataSize',
                'offset': 16,
                'bit length': 6})
        InputParameters_dm.addChild(DataSize)
        DataSize.reference_name = "DataSize"

        BuffOffset = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'BuffOffset',
                'offset': 0,
                'bit length': 16})
        InputParameters_dm.addChild(BuffOffset)
        BuffOffset.reference_name = "BuffOffset"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 512})
        self.setOutputModel(OutputParameters_dm)

        DataByte1 = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'DataByte1',
                'offset': 16,
                'bit length': 496})
        OutputParameters_dm.addChild(DataByte1)
        DataByte1.reference_name = "DataByte1"

        MessageSize = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'MessageSize',
                'offset': 0,
                'bit length': 16})
        OutputParameters_dm.addChild(MessageSize)
        MessageSize.reference_name = "MessageSize"

        update_function = get_updater_function("MBRd_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cSSrC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"sendsourcecap"',
                                                 '4cc': 'SSrC',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("SSrC_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cSWDF(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"swap2dfp"',
                                                 '4cc': 'SWDF',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("SWDF_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cSWSk(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"swap2sink"',
                                                 '4cc': 'SWSk',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("SWSk_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cSWSr(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"swap2source"',
                                                 '4cc': 'SWSr',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("SWSr_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cSWUF(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"swap2ufp"',
                                                 '4cc': 'SWUF',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("SWUF_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cTrig(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"triggerinputgpio"',
                                                 '4cc': 'Trig',
                                                 'inargs byte length': 2,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 16})
        self.setInputModel(InputParameters_dm)

        GPIOEvent = register_class.cDictDMTerminator(self.inargsMiniReg,
                                                     {'name': 'GPIO Event',
                                                      'offset': 8,
                                                      'bit length': 8})
        GPIOEvent.setReportDict(OrderedDict([(69, 'MRESET: No assumption is made about the initial state of this virtual GPIO'), (56, 'I2C3_MASTER_IRQ_EVENT: No assumption is made about the initial state of this virtual GPIO'), (47, "Prevent_High_Current_Contract_Event: This virtual GPIO is assumed to be high until 'Trig' is received"), (42, "Retimer_SoC_OVR_Force_PWR_Event: This virtual GPIO is assumed to be low until 'Trig' is received with EdgeType set to 1b"), (34, "Fault_Input_Event_Port2: This virtual GPIO is assumed to be high until 'Trig' is received with EdgeType set to 0b"), (33, "Fault_Input_Event_Port1: This virtual GPIO is assumed to be high until 'Trig' is received with EdgeType set to 0b")]))
        InputParameters_dm.addChild(GPIOEvent)
        GPIOEvent.reference_name = "GPIO Event"
        GPIOEvent.setMaxValue(69)

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 1,
                'bit length': 7})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        EdgeType = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'EdgeType',
                    'offset': 0,
                    'bit length': 1})
        EdgeType.setReportList(['Falling edge', 'Rising edge'])
        InputParameters_dm.addChild(EdgeType)
        EdgeType.reference_name = "EdgeType"
        EdgeType.setMaxValue(1)

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("Trig_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cVDMs(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"sendvdm"',
                                                 '4cc': 'VDMs',
                                                 'inargs byte length': 31,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 248})
        self.setInputModel(InputParameters_dm)

        InitiatorWaitTimer = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'InitiatorWaitTimer',
                'offset': 240,
                'bit length': 8})
        InputParameters_dm.addChild(InitiatorWaitTimer)
        InitiatorWaitTimer.reference_name = "InitiatorWaitTimer"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 233,
                'bit length': 7})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        InitiatorResponder = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'InitiatorResponder',
                    'offset': 232,
                    'bit length': 1})
        InitiatorResponder.setReportList(['This is a response so the PD controller will transmit the message regardless of the collision avoidance Rp value', 'This is initiating a VDM sequence, so the PD controller will follow USB PD collision avoidance requirements'])
        InputParameters_dm.addChild(InitiatorResponder)
        InitiatorResponder.reference_name = "InitiatorResponder"
        InitiatorResponder.setMaxValue(1)

        VDO7 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'VDO7',
                'offset': 200,
                'bit length': 32})
        InputParameters_dm.addChild(VDO7)
        VDO7.reference_name = "VDO7"

        VDO6 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'VDO6',
                'offset': 168,
                'bit length': 32})
        InputParameters_dm.addChild(VDO6)
        VDO6.reference_name = "VDO6"

        VDO5 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'VDO5',
                'offset': 136,
                'bit length': 32})
        InputParameters_dm.addChild(VDO5)
        VDO5.reference_name = "VDO5"

        VDO4 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'VDO4',
                'offset': 104,
                'bit length': 32})
        InputParameters_dm.addChild(VDO4)
        VDO4.reference_name = "VDO4"

        VDO3 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'VDO3',
                'offset': 72,
                'bit length': 32})
        InputParameters_dm.addChild(VDO3)
        VDO3.reference_name = "VDO3"

        VDO2 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'VDO2',
                'offset': 40,
                'bit length': 32})
        InputParameters_dm.addChild(VDO2)
        VDO2.reference_name = "VDO2"

        VDO1 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'VDO1',
                'offset': 8,
                'bit length': 32})
        InputParameters_dm.addChild(VDO1)
        VDO1.reference_name = "VDO1"

        AMIntrusiveModeResponse = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'AMIntrusiveModeResponse',
                'offset': 7,
                'bit length': 1})
        InputParameters_dm.addChild(AMIntrusiveModeResponse)
        AMIntrusiveModeResponse.reference_name = "AMIntrusiveModeResponse"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 6,
                'bit length': 1})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        SOPTarget = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'SOPTarget',
                    'offset': 4,
                    'bit length': 2})
        SOPTarget.setReportList(['SOP', "SOP'", "SOP''", "SOP*_Debug (SOP'_Debug for Source, SOP''_Debug for Sink)"])
        InputParameters_dm.addChild(SOPTarget)
        SOPTarget.reference_name = "SOPTarget"
        SOPTarget.setMaxValue(3)

        Version = register_class.cListDMTerminator(self.inargsMiniReg,
                {'name': 'Version',
                    'offset': 3,
                    'bit length': 1})
        Version.setReportList(['VDMs version 1 (ignores bytes 30-31)', 'VDMs version 2 (implements bytes 30-31)'])
        InputParameters_dm.addChild(Version)
        Version.reference_name = "Version"
        Version.setMaxValue(1)

        NumDOs = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'NumDOs',
                'offset': 0,
                'bit length': 3})
        InputParameters_dm.addChild(NumDOs)
        NumDOs.reference_name = "NumDOs"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("VDMs_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cABRT(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"abortcurrenttask"',
                                                 '4cc': 'ABRT',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("ABRT_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cANeg(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"antonegotiatesink"',
                                                 '4cc': 'ANeg',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("ANeg_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cDBfg(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"cleardeadbattery"',
                                                 '4cc': 'DBfg',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 0})                                            


        self.inargsDataModel = None

        self.outargsDataModel = None

        update_function = get_updater_function("DBfg_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cDISC(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"portdisconnect"',
                                                 '4cc': 'DISC',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setInputModel(InputParameters_dm)

        DISCdelay = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'DISCdelay',
                'offset': 0,
                'bit length': 8})
        InputParameters_dm.addChild(DISCdelay)
        DISCdelay.reference_name = "DISCdelay"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("DISC_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cI2Cr(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"I2CRead"',
                                                 '4cc': 'I2Cr',
                                                 'inargs byte length': 3,
                                                 'outargs byte length': 65})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 24})
        self.setInputModel(InputParameters_dm)

        NumBytes = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'NumBytes',
                'offset': 16,
                'bit length': 8})
        InputParameters_dm.addChild(NumBytes)
        NumBytes.reference_name = "NumBytes"

        RegisterOffset = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'RegisterOffset',
                'offset': 8,
                'bit length': 8})
        InputParameters_dm.addChild(RegisterOffset)
        RegisterOffset.reference_name = "RegisterOffset"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 7,
                'bit length': 1})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        Slavetouseforthetransaction = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Slave to use for the transaction.',
                'offset': 0,
                'bit length': 7})
        InputParameters_dm.addChild(Slavetouseforthetransaction)
        Slavetouseforthetransaction.reference_name = "Slave to use for the transaction."

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 520})
        self.setOutputModel(OutputParameters_dm)

        Data = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Data',
                'offset': 8,
                'bit length': 512})
        OutputParameters_dm.addChild(Data)
        Data.reference_name = "Data"

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("I2Cr_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cI2Cw(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"I2CWrite"',
                                                 '4cc': 'I2Cw',
                                                 'inargs byte length': 14,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 112})
        self.setInputModel(InputParameters_dm)

        PayloadfortheI2Ctransaction = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Payload for the I2C transaction',
                'offset': 32,
                'bit length': 80})
        InputParameters_dm.addChild(PayloadfortheI2Ctransaction)
        PayloadfortheI2Ctransaction.reference_name = "Payload for the I2C transaction"

        Registeroffset = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Register offset',
                'offset': 24,
                'bit length': 8})
        InputParameters_dm.addChild(Registeroffset)
        Registeroffset.reference_name = "Register offset"

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 16,
                'bit length': 8})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        Numberofbytesinthetransactionpayload = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Number of bytes in the transaction payload.',
                'offset': 8,
                'bit length': 8})
        InputParameters_dm.addChild(Numberofbytesinthetransactionpayload)
        Numberofbytesinthetransactionpayload.reference_name = "Number of bytes in the transaction payload."

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 7,
                'bit length': 1})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        Targettouseforthetransaction = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Target to use for the transaction.',
                'offset': 0,
                'bit length': 7})
        InputParameters_dm.addChild(Targettouseforthetransaction)
        Targettouseforthetransaction.reference_name = "Target to use for the transaction."

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("I2Cw_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cMuxR(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"Muxr"',
                                                 '4cc': 'MuxR',
                                                 'inargs byte length': 2,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 15})
        self.setInputModel(InputParameters_dm)

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 11,
                'bit length': 4})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        SafeStateRetryForCrossbarMux = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'SafeStateRetryForCrossbarMux',
                'offset': 10,
                'bit length': 1})
        InputParameters_dm.addChild(SafeStateRetryForCrossbarMux)
        SafeStateRetryForCrossbarMux.reference_name = "SafeStateRetryForCrossbarMux"

        USB3RetryForCrossbarMux = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'USB3RetryForCrossbarMux',
                'offset': 9,
                'bit length': 1})
        InputParameters_dm.addChild(USB3RetryForCrossbarMux)
        USB3RetryForCrossbarMux.reference_name = "USB3RetryForCrossbarMux"

        EnRetryOnSlaveAddrTbt = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnRetryOnSlaveAddrTbt',
                'offset': 8,
                'bit length': 1})
        InputParameters_dm.addChild(EnRetryOnSlaveAddrTbt)
        EnRetryOnSlaveAddrTbt.reference_name = "EnRetryOnSlaveAddrTbt"

        EnRetryOnSlaveAddr8 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnRetryOnSlaveAddr8',
                'offset': 7,
                'bit length': 1})
        InputParameters_dm.addChild(EnRetryOnSlaveAddr8)
        EnRetryOnSlaveAddr8.reference_name = "EnRetryOnSlaveAddr8"

        EnRetryOnSlaveAddr7 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnRetryOnSlaveAddr7',
                'offset': 6,
                'bit length': 1})
        InputParameters_dm.addChild(EnRetryOnSlaveAddr7)
        EnRetryOnSlaveAddr7.reference_name = "EnRetryOnSlaveAddr7"

        EnRetryOnSlaveAddr6 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnRetryOnSlaveAddr6',
                'offset': 5,
                'bit length': 1})
        InputParameters_dm.addChild(EnRetryOnSlaveAddr6)
        EnRetryOnSlaveAddr6.reference_name = "EnRetryOnSlaveAddr6"

        EnRetryOnSlaveAddr5 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnRetryOnSlaveAddr5',
                'offset': 4,
                'bit length': 1})
        InputParameters_dm.addChild(EnRetryOnSlaveAddr5)
        EnRetryOnSlaveAddr5.reference_name = "EnRetryOnSlaveAddr5"

        EnRetryOnSlaveAddr4 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnRetryOnSlaveAddr4',
                'offset': 3,
                'bit length': 1})
        InputParameters_dm.addChild(EnRetryOnSlaveAddr4)
        EnRetryOnSlaveAddr4.reference_name = "EnRetryOnSlaveAddr4"

        EnRetryOnSlaveAddr3 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnRetryOnSlaveAddr3',
                'offset': 2,
                'bit length': 1})
        InputParameters_dm.addChild(EnRetryOnSlaveAddr3)
        EnRetryOnSlaveAddr3.reference_name = "EnRetryOnSlaveAddr3"

        EnRetryOnSlaveAddr2 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnRetryOnSlaveAddr2',
                'offset': 1,
                'bit length': 1})
        InputParameters_dm.addChild(EnRetryOnSlaveAddr2)
        EnRetryOnSlaveAddr2.reference_name = "EnRetryOnSlaveAddr2"

        EnRetryOnSlaveAddr1 = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'EnRetryOnSlaveAddr1',
                'offset': 0,
                'bit length': 1})
        InputParameters_dm.addChild(EnRetryOnSlaveAddr1)
        EnRetryOnSlaveAddr1.reference_name = "EnRetryOnSlaveAddr1"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("MuxR_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cSRDY(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"systemready2sink"',
                                                 '4cc': 'SRDY',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setInputModel(InputParameters_dm)

        Reserved = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'Reserved',
                'offset': 3,
                'bit length': 5})
        InputParameters_dm.addChild(Reserved)
        Reserved.reference_name = "Reserved"

        SwitchSelect = register_class.cDictDMTerminator(self.inargsMiniReg,
                                                     {'name': 'SwitchSelect',
                                                      'offset': 0,
                                                      'bit length': 3})
        SwitchSelect.setReportDict(OrderedDict([(0, 'PP1 (PP_5V1)'), (1, 'PP2 (PP_5V2)'), (2, 'PP3 (PP_EXT1)'), (3, 'PP4 (PP_EXT2)'), (4, 'Reserved'), (6, 'Automatically-selected by the PP*Config field in the GLOBAL_SYSTEM_CONFIG register (0x27)'), (7, 'Automatically-selected by PD Controller policy')]))
        InputParameters_dm.addChild(SwitchSelect)
        SwitchSelect.reference_name = "SwitchSelect"
        SwitchSelect.setMaxValue(7)

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("SRDY_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cSRYR(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"resetsrdy"',
                                                 '4cc': 'SRYR',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("SRYR_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cDRST(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"datareset"',
                                                 '4cc': 'DRST',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 1})                                            


        self.inargsDataModel = None

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("DRST_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cFRSw(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"frswap"',
                                                 '4cc': 'FRSw',
                                                 'inargs byte length': 0,
                                                 'outargs byte length': 0})                                            


        self.inargsDataModel = None

        self.outargsDataModel = None

        update_function = get_updater_function("FRSw_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cGPsh(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"gpiosetoutputhigh"',
                                                 '4cc': 'GPsh',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setInputModel(InputParameters_dm)

        GPIOnum = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'GPIOnum',
                'offset': 0,
                'bit length': 8})
        InputParameters_dm.addChild(GPIOnum)
        GPIOnum.reference_name = "GPIOnum"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("GPsh_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

class cGPsl(function_class.cFunction):
    def __init__(self):
        function_class.cFunction.__init__(self, {'function name': '"gpiosetoutputlow"',
                                                 '4cc': 'GPsl',
                                                 'inargs byte length': 1,
                                                 'outargs byte length': 1})                                            


        InputParameters_dm = register_class.cDataModelArray(self.inargsMiniReg, 1,
                                                        {'name': 'Input Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setInputModel(InputParameters_dm)

        GPIOnum = register_class.cHexDMTerminator(self.inargsMiniReg,
                {'name': 'GPIOnum',
                'offset': 0,
                'bit length': 8})
        InputParameters_dm.addChild(GPIOnum)
        GPIOnum.reference_name = "GPIOnum"

        OutputParameters_dm = register_class.cDataModelArray(self.outargsMiniReg, 1,
                                                        {'name': 'Output Parameters',
                                                         'offset': 0,
                                                         'bit length': 8})
        self.setOutputModel(OutputParameters_dm)

        StandardTaskReturnCode = register_class.cHexDMTerminator(self.outargsMiniReg,
                {'name': 'Standard Task Return Code',
                'offset': 0,
                'bit length': 8})
        OutputParameters_dm.addChild(StandardTaskReturnCode)
        StandardTaskReturnCode.reference_name = "Standard Task Return Code"

        update_function = get_updater_function("GPsl_updater")
        if update_function is not None:
            self.update_fxn = types.MethodType(update_function, self, self)
            self.update_fxn()

# -------------------- END OF 4CC DEFINITIONS -----------------------------------

# -------------------- DEVICE DEFINITIONS -----------------------------------------

allAceDevice = register_class.cDevice({'I2C address' : 0x00, 'strapping' : deviceStrappingListOfDict, 'ports' : devicePortsListOfDict })
allAceDevice.configureDerivedFields()
allAceDevice.hide()

NUM_BINARY_RECORDS = 50
binaryRecordTable = bintable_class.cBinaryRecordTable({})

# first record for country code
binaryRecordTable.addRecord(bintable_class.cBinaryTableRecord({'name': 'Record index 0',
                                                               'byte length': 64}))

for i in range(NUM_BINARY_RECORDS - 1):
    binaryRecordTable.addRecord(cI2C_binaryRecord({'name': 'Record index %d' % (i + 1),
                                                   'byte length': 64}))


NUM_PHYSICAL_DEVICES = 4
oneAceDeviceList = []
for i in range(NUM_PHYSICAL_DEVICES):
    device = register_class.cDevice({
                            'I2C address': i,
                            'strapping': deviceStrappingListOfDict,
                            'ports': devicePortsListOfDict})

    update_function = get_updater_function("device_updater")
    if update_function is not None:
        device.update_fxn = types.MethodType(update_function, device, register_class.cDevice)
        device.update_fxn()

    device.addRegister(cvid_0x0_register())
    device.addRegister(cdid_0x1_register())
    device.addRegister(cprotover_0x2_register())
    device.addRegister(cmode_0x3_register())
    device.addRegister(ctype_0x4_register())
    device.addRegister(cuid_0x5_register())
    device.addRegister(ccustuse_0x6_register())
    device.addRegister(ccmd1_0x8_register())
    device.addRegister(cdata1_0x9_register())
    device.addRegister(cdevicecapabilities_0xd_register())
    device.addRegister(cversion_0xf_register())
    device.addRegister(ccmd2_0x10_register())
    device.addRegister(cdata2_0x11_register())
    extcmd_0x12_obj = cextcmd_0x12_register()
    extcmd_0x12_obj.hide()
    device.addRegister(extcmd_0x12_obj)
    extdata_0x13_obj = cextdata_0x13_register()
    extdata_0x13_obj.hide()
    device.addRegister(extdata_0x13_obj)
    device.addRegister(cintevent1_0x14_register())
    device.addRegister(cintevent2_0x15_register())
    device.addRegister(cintmask1_0x16_register())
    device.addRegister(cintmask2_0x17_register())
    device.addRegister(cintclear1_0x18_register())
    device.addRegister(cintclear2_0x19_register())
    device.addRegister(cstatus_0x1a_register())
    device.addRegister(csxconfig_0x1f_register())
    device.addRegister(csetsxappconfig_0x20_register())
    device.addRegister(cdiscoveredsvids_0x21_register())
    device.addRegister(cconnectionmanagerstatus_0x22_register())
    device.addRegister(cusbconfig_0x23_register())
    device.addRegister(cusbstatus_0x24_register())
    device.addRegister(cconnectionmanagercontrol_0x25_register())
    device.addRegister(cpowerpathstatus_0x26_register())
    device.addRegister(cglobalsystemconfig_0x27_register())
    device.addRegister(cportconfig_0x28_register())
    device.addRegister(cportcontrol_0x29_register())
    misccontrol_0x2b_obj = cmisccontrol_0x2b_register()
    misccontrol_0x2b_obj.hide()
    device.addRegister(misccontrol_0x2b_obj)
    device.addRegister(cbootstatus_0x2d_register())
    device.addRegister(cbuilddescription_0x2e_register())
    device.addRegister(cdeviceinfo_0x2f_register())
    device.addRegister(crxsourcecaps_0x30_register())
    device.addRegister(crxsinkcaps_0x31_register())
    device.addRegister(ctxsourcecaps_0x32_register())
    device.addRegister(ctxsinkcaps_0x33_register())
    device.addRegister(cactivecontractpdo_0x34_register())
    device.addRegister(cactivecontractrdo_0x35_register())
    device.addRegister(cautonegotiatesink_0x37_register())
    device.addRegister(csrptospminfo_0x3d_register())
    device.addRegister(cpowerstatus_0x3f_register())
    device.addRegister(cpdstatus_0x40_register())
    device.addRegister(cpd3status_0x41_register())
    device.addRegister(cpd3config_0x42_register())
    device.addRegister(cdelayconfig_0x43_register())
    device.addRegister(ctxidentity_0x47_register())
    device.addRegister(crxidentitysop_0x48_register())
    device.addRegister(crxidentitysopp_0x49_register())
    device.addRegister(cuservidconfig_0x4a_register())
    device.addRegister(crxattentionvdm_0x4e_register())
    device.addRegister(crxothervdm_0x4f_register())
    device.addRegister(cdatacontrol_0x50_register())
    device.addRegister(cdpsidconfig_0x51_register())
    device.addRegister(ctbtconfig_0x52_register())
    device.addRegister(cspecialconfig_0x55_register())
    device.addRegister(cprochotconfig_0x56_register())
    device.addRegister(cuservidstatus_0x57_register())
    device.addRegister(cdpsidstatus_0x58_register())
    device.addRegister(cintelvidstatus_0x59_register())
    device.addRegister(cgpioconfig_0x5c_register())
    device.addRegister(cretimerdebugmode_0x5d_register())
    device.addRegister(cdatastatus_0x5f_register())
    device.addRegister(crxusersvidattnvdm_0x60_register())
    device.addRegister(crxusersvidothervdm_0x61_register())
    device.addRegister(cbinarydataindices_0x62_register())
    device.addRegister(cmipividstatus_0x63_register())
    device.addRegister(ci2ccontrollerconfig_0x64_register())
    device.addRegister(ctypecstate_0x69_register())
    device.addRegister(cadcresults_0x6a_register())
    device.addRegister(ceventconfiguration_0x6c_register())
    stateconfig_0x6f_obj = cstateconfig_0x6f_register()
    stateconfig_0x6f_obj.hide()
    device.addRegister(stateconfig_0x6f_obj)
    device.addRegister(csleepconfig_0x70_register())
    device.addRegister(cgpiostatus_0x72_register())
    device.addRegister(ctxmidbsop_0x73_register())
    device.addRegister(crxado_0x74_register())
    device.addRegister(ctxado_0x75_register())
    device.addRegister(ctxscedb_0x77_register())
    device.addRegister(ctxsdb_0x79_register())
    device.addRegister(ctxppssdb_0x7a_register())
    device.addRegister(ctxbsdo_0x7b_register())
    device.addRegister(ctxbcdb_0x7d_register())
    device.addRegister(ctxskedb_0x7e_register())
    device.addRegister(cuuidhandle_0x80_register())
    device.addRegister(cextdcdcstat_0x94_register())
    device.addRegister(cextdcdcparams_0x95_register())
    device.addRegister(ceprconfig_0x97_register())



    device.addHIFunction(function_class.cRawRead())
    device.addHIFunction(function_class.cRawWrite())
    device.addHIFunction(cAMDs())
    device.addHIFunction(cAMEn())
    device.addHIFunction(cAMEx())
    device.addHIFunction(cFWrq())
    device.addHIFunction(cFWRs())
    device.addHIFunction(cGCdm())
    device.addHIFunction(cGaid())
    device.addHIFunction(cGAID())
    device.addHIFunction(cDBGc())
    device.addHIFunction(cDBGi())
    device.addHIFunction(cDBGr())
    device.addHIFunction(cDTRr())
    device.addHIFunction(cDTRw())
    device.addHIFunction(cMEMr())
    device.addHIFunction(cMEMw())
    device.addHIFunction(cFLad())
    device.addHIFunction(cFLem())
    device.addHIFunction(cFLer())
    device.addHIFunction(cFLrd())
    device.addHIFunction(cFLrr())
    device.addHIFunction(cFLvy())
    device.addHIFunction(cFLwd())
    device.addHIFunction(cPBMs())
    device.addHIFunction(cPBMc())
    device.addHIFunction(cPBMe())
    device.addHIFunction(cGO2P())
    device.addHIFunction(cALRT())
    device.addHIFunction(cCRST())
    device.addHIFunction(cGPPI())
    device.addHIFunction(cGSkC())
    device.addHIFunction(cGSrC())
    device.addHIFunction(cESkC())
    device.addHIFunction(cESrC())
    device.addHIFunction(cEPRm())
    device.addHIFunction(cHRST())
    device.addHIFunction(cMBRd())
    device.addHIFunction(cSSrC())
    device.addHIFunction(cSWDF())
    device.addHIFunction(cSWSk())
    device.addHIFunction(cSWSr())
    device.addHIFunction(cSWUF())
    device.addHIFunction(cTrig())
    device.addHIFunction(cVDMs())
    device.addHIFunction(cABRT())
    device.addHIFunction(cANeg())
    device.addHIFunction(cDBfg())
    device.addHIFunction(cDISC())
    device.addHIFunction(cI2Cr())
    device.addHIFunction(cI2Cw())
    device.addHIFunction(cMuxR())
    device.addHIFunction(cSRDY())
    device.addHIFunction(cSRYR())
    device.addHIFunction(cDRST())
    device.addHIFunction(cFRSw())
    device.addHIFunction(cGPsh())
    device.addHIFunction(cGPsl())


    device.configureDerivedFields()
    oneAceDeviceList.append(device)

NUM_VIRTUAL_DEVICES = 6
virtualDeviceList = []
for i in range(NUM_PHYSICAL_DEVICES, NUM_PHYSICAL_DEVICES + NUM_VIRTUAL_DEVICES) :
    device = register_class.cDevice({'I2C address' : NUM_PHYSICAL_DEVICES + i, 'ports' : virtualPortsListOfDict, 'strapping' : virtualStrappingListOfDict, 'is virtual' : True })

    vid_0x0_obj = cvid_0x0_register()
    vid_0x0_obj.unselect()
    device.addRegister(vid_0x0_obj)
    did_0x1_obj = cdid_0x1_register()
    did_0x1_obj.unselect()
    device.addRegister(did_0x1_obj)
    protover_0x2_obj = cprotover_0x2_register()
    protover_0x2_obj.unselect()
    device.addRegister(protover_0x2_obj)
    mode_0x3_obj = cmode_0x3_register()
    mode_0x3_obj.unselect()
    device.addRegister(mode_0x3_obj)
    type_0x4_obj = ctype_0x4_register()
    type_0x4_obj.unselect()
    device.addRegister(type_0x4_obj)
    uid_0x5_obj = cuid_0x5_register()
    uid_0x5_obj.unselect()
    device.addRegister(uid_0x5_obj)
    custuse_0x6_obj = ccustuse_0x6_register()
    custuse_0x6_obj.unselect()
    device.addRegister(custuse_0x6_obj)
    cmd1_0x8_obj = ccmd1_0x8_register()
    cmd1_0x8_obj.unselect()
    device.addRegister(cmd1_0x8_obj)
    data1_0x9_obj = cdata1_0x9_register()
    data1_0x9_obj.unselect()
    device.addRegister(data1_0x9_obj)
    devicecapabilities_0xd_obj = cdevicecapabilities_0xd_register()
    devicecapabilities_0xd_obj.unselect()
    device.addRegister(devicecapabilities_0xd_obj)
    version_0xf_obj = cversion_0xf_register()
    version_0xf_obj.unselect()
    device.addRegister(version_0xf_obj)
    cmd2_0x10_obj = ccmd2_0x10_register()
    cmd2_0x10_obj.unselect()
    device.addRegister(cmd2_0x10_obj)
    data2_0x11_obj = cdata2_0x11_register()
    data2_0x11_obj.unselect()
    device.addRegister(data2_0x11_obj)
    extcmd_0x12_obj = cextcmd_0x12_register()
    extcmd_0x12_obj.unselect()
    device.addRegister(extcmd_0x12_obj)
    extdata_0x13_obj = cextdata_0x13_register()
    extdata_0x13_obj.unselect()
    device.addRegister(extdata_0x13_obj)
    intevent1_0x14_obj = cintevent1_0x14_register()
    intevent1_0x14_obj.unselect()
    device.addRegister(intevent1_0x14_obj)
    intevent2_0x15_obj = cintevent2_0x15_register()
    intevent2_0x15_obj.unselect()
    device.addRegister(intevent2_0x15_obj)
    intmask1_0x16_obj = cintmask1_0x16_register()
    intmask1_0x16_obj.unselect()
    device.addRegister(intmask1_0x16_obj)
    intmask2_0x17_obj = cintmask2_0x17_register()
    intmask2_0x17_obj.unselect()
    device.addRegister(intmask2_0x17_obj)
    intclear1_0x18_obj = cintclear1_0x18_register()
    intclear1_0x18_obj.unselect()
    device.addRegister(intclear1_0x18_obj)
    intclear2_0x19_obj = cintclear2_0x19_register()
    intclear2_0x19_obj.unselect()
    device.addRegister(intclear2_0x19_obj)
    status_0x1a_obj = cstatus_0x1a_register()
    status_0x1a_obj.unselect()
    device.addRegister(status_0x1a_obj)
    sxconfig_0x1f_obj = csxconfig_0x1f_register()
    sxconfig_0x1f_obj.unselect()
    device.addRegister(sxconfig_0x1f_obj)
    setsxappconfig_0x20_obj = csetsxappconfig_0x20_register()
    setsxappconfig_0x20_obj.unselect()
    device.addRegister(setsxappconfig_0x20_obj)
    discoveredsvids_0x21_obj = cdiscoveredsvids_0x21_register()
    discoveredsvids_0x21_obj.unselect()
    device.addRegister(discoveredsvids_0x21_obj)
    connectionmanagerstatus_0x22_obj = cconnectionmanagerstatus_0x22_register()
    connectionmanagerstatus_0x22_obj.unselect()
    device.addRegister(connectionmanagerstatus_0x22_obj)
    usbconfig_0x23_obj = cusbconfig_0x23_register()
    usbconfig_0x23_obj.unselect()
    device.addRegister(usbconfig_0x23_obj)
    usbstatus_0x24_obj = cusbstatus_0x24_register()
    usbstatus_0x24_obj.unselect()
    device.addRegister(usbstatus_0x24_obj)
    connectionmanagercontrol_0x25_obj = cconnectionmanagercontrol_0x25_register()
    connectionmanagercontrol_0x25_obj.unselect()
    device.addRegister(connectionmanagercontrol_0x25_obj)
    powerpathstatus_0x26_obj = cpowerpathstatus_0x26_register()
    powerpathstatus_0x26_obj.unselect()
    device.addRegister(powerpathstatus_0x26_obj)
    globalsystemconfig_0x27_obj = cglobalsystemconfig_0x27_register()
    globalsystemconfig_0x27_obj.unselect()
    device.addRegister(globalsystemconfig_0x27_obj)
    portconfig_0x28_obj = cportconfig_0x28_register()
    portconfig_0x28_obj.unselect()
    device.addRegister(portconfig_0x28_obj)
    portcontrol_0x29_obj = cportcontrol_0x29_register()
    portcontrol_0x29_obj.unselect()
    device.addRegister(portcontrol_0x29_obj)
    misccontrol_0x2b_obj = cmisccontrol_0x2b_register()
    misccontrol_0x2b_obj.unselect()
    device.addRegister(misccontrol_0x2b_obj)
    bootstatus_0x2d_obj = cbootstatus_0x2d_register()
    bootstatus_0x2d_obj.unselect()
    device.addRegister(bootstatus_0x2d_obj)
    builddescription_0x2e_obj = cbuilddescription_0x2e_register()
    builddescription_0x2e_obj.unselect()
    device.addRegister(builddescription_0x2e_obj)
    deviceinfo_0x2f_obj = cdeviceinfo_0x2f_register()
    deviceinfo_0x2f_obj.unselect()
    device.addRegister(deviceinfo_0x2f_obj)
    rxsourcecaps_0x30_obj = crxsourcecaps_0x30_register()
    rxsourcecaps_0x30_obj.unselect()
    device.addRegister(rxsourcecaps_0x30_obj)
    rxsinkcaps_0x31_obj = crxsinkcaps_0x31_register()
    rxsinkcaps_0x31_obj.unselect()
    device.addRegister(rxsinkcaps_0x31_obj)
    txsourcecaps_0x32_obj = ctxsourcecaps_0x32_register()
    txsourcecaps_0x32_obj.unselect()
    device.addRegister(txsourcecaps_0x32_obj)
    txsinkcaps_0x33_obj = ctxsinkcaps_0x33_register()
    txsinkcaps_0x33_obj.unselect()
    device.addRegister(txsinkcaps_0x33_obj)
    activecontractpdo_0x34_obj = cactivecontractpdo_0x34_register()
    activecontractpdo_0x34_obj.unselect()
    device.addRegister(activecontractpdo_0x34_obj)
    activecontractrdo_0x35_obj = cactivecontractrdo_0x35_register()
    activecontractrdo_0x35_obj.unselect()
    device.addRegister(activecontractrdo_0x35_obj)
    autonegotiatesink_0x37_obj = cautonegotiatesink_0x37_register()
    autonegotiatesink_0x37_obj.unselect()
    device.addRegister(autonegotiatesink_0x37_obj)
    srptospminfo_0x3d_obj = csrptospminfo_0x3d_register()
    srptospminfo_0x3d_obj.unselect()
    device.addRegister(srptospminfo_0x3d_obj)
    powerstatus_0x3f_obj = cpowerstatus_0x3f_register()
    powerstatus_0x3f_obj.unselect()
    device.addRegister(powerstatus_0x3f_obj)
    pdstatus_0x40_obj = cpdstatus_0x40_register()
    pdstatus_0x40_obj.unselect()
    device.addRegister(pdstatus_0x40_obj)
    pd3status_0x41_obj = cpd3status_0x41_register()
    pd3status_0x41_obj.unselect()
    device.addRegister(pd3status_0x41_obj)
    pd3config_0x42_obj = cpd3config_0x42_register()
    pd3config_0x42_obj.unselect()
    device.addRegister(pd3config_0x42_obj)
    delayconfig_0x43_obj = cdelayconfig_0x43_register()
    delayconfig_0x43_obj.unselect()
    device.addRegister(delayconfig_0x43_obj)
    txidentity_0x47_obj = ctxidentity_0x47_register()
    txidentity_0x47_obj.unselect()
    device.addRegister(txidentity_0x47_obj)
    rxidentitysop_0x48_obj = crxidentitysop_0x48_register()
    rxidentitysop_0x48_obj.unselect()
    device.addRegister(rxidentitysop_0x48_obj)
    rxidentitysopp_0x49_obj = crxidentitysopp_0x49_register()
    rxidentitysopp_0x49_obj.unselect()
    device.addRegister(rxidentitysopp_0x49_obj)
    uservidconfig_0x4a_obj = cuservidconfig_0x4a_register()
    uservidconfig_0x4a_obj.unselect()
    device.addRegister(uservidconfig_0x4a_obj)
    rxattentionvdm_0x4e_obj = crxattentionvdm_0x4e_register()
    rxattentionvdm_0x4e_obj.unselect()
    device.addRegister(rxattentionvdm_0x4e_obj)
    rxothervdm_0x4f_obj = crxothervdm_0x4f_register()
    rxothervdm_0x4f_obj.unselect()
    device.addRegister(rxothervdm_0x4f_obj)
    datacontrol_0x50_obj = cdatacontrol_0x50_register()
    datacontrol_0x50_obj.unselect()
    device.addRegister(datacontrol_0x50_obj)
    dpsidconfig_0x51_obj = cdpsidconfig_0x51_register()
    dpsidconfig_0x51_obj.unselect()
    device.addRegister(dpsidconfig_0x51_obj)
    tbtconfig_0x52_obj = ctbtconfig_0x52_register()
    tbtconfig_0x52_obj.unselect()
    device.addRegister(tbtconfig_0x52_obj)
    specialconfig_0x55_obj = cspecialconfig_0x55_register()
    specialconfig_0x55_obj.unselect()
    device.addRegister(specialconfig_0x55_obj)
    prochotconfig_0x56_obj = cprochotconfig_0x56_register()
    prochotconfig_0x56_obj.unselect()
    device.addRegister(prochotconfig_0x56_obj)
    uservidstatus_0x57_obj = cuservidstatus_0x57_register()
    uservidstatus_0x57_obj.unselect()
    device.addRegister(uservidstatus_0x57_obj)
    dpsidstatus_0x58_obj = cdpsidstatus_0x58_register()
    dpsidstatus_0x58_obj.unselect()
    device.addRegister(dpsidstatus_0x58_obj)
    intelvidstatus_0x59_obj = cintelvidstatus_0x59_register()
    intelvidstatus_0x59_obj.unselect()
    device.addRegister(intelvidstatus_0x59_obj)
    gpioconfig_0x5c_obj = cgpioconfig_0x5c_register()
    gpioconfig_0x5c_obj.unselect()
    device.addRegister(gpioconfig_0x5c_obj)
    retimerdebugmode_0x5d_obj = cretimerdebugmode_0x5d_register()
    retimerdebugmode_0x5d_obj.unselect()
    device.addRegister(retimerdebugmode_0x5d_obj)
    datastatus_0x5f_obj = cdatastatus_0x5f_register()
    datastatus_0x5f_obj.unselect()
    device.addRegister(datastatus_0x5f_obj)
    rxusersvidattnvdm_0x60_obj = crxusersvidattnvdm_0x60_register()
    rxusersvidattnvdm_0x60_obj.unselect()
    device.addRegister(rxusersvidattnvdm_0x60_obj)
    rxusersvidothervdm_0x61_obj = crxusersvidothervdm_0x61_register()
    rxusersvidothervdm_0x61_obj.unselect()
    device.addRegister(rxusersvidothervdm_0x61_obj)
    binarydataindices_0x62_obj = cbinarydataindices_0x62_register()
    binarydataindices_0x62_obj.unselect()
    device.addRegister(binarydataindices_0x62_obj)
    mipividstatus_0x63_obj = cmipividstatus_0x63_register()
    mipividstatus_0x63_obj.unselect()
    device.addRegister(mipividstatus_0x63_obj)
    i2ccontrollerconfig_0x64_obj = ci2ccontrollerconfig_0x64_register()
    i2ccontrollerconfig_0x64_obj.unselect()
    device.addRegister(i2ccontrollerconfig_0x64_obj)
    typecstate_0x69_obj = ctypecstate_0x69_register()
    typecstate_0x69_obj.unselect()
    device.addRegister(typecstate_0x69_obj)
    adcresults_0x6a_obj = cadcresults_0x6a_register()
    adcresults_0x6a_obj.unselect()
    device.addRegister(adcresults_0x6a_obj)
    eventconfiguration_0x6c_obj = ceventconfiguration_0x6c_register()
    eventconfiguration_0x6c_obj.unselect()
    device.addRegister(eventconfiguration_0x6c_obj)
    stateconfig_0x6f_obj = cstateconfig_0x6f_register()
    stateconfig_0x6f_obj.unselect()
    device.addRegister(stateconfig_0x6f_obj)
    sleepconfig_0x70_obj = csleepconfig_0x70_register()
    sleepconfig_0x70_obj.unselect()
    device.addRegister(sleepconfig_0x70_obj)
    gpiostatus_0x72_obj = cgpiostatus_0x72_register()
    gpiostatus_0x72_obj.unselect()
    device.addRegister(gpiostatus_0x72_obj)
    txmidbsop_0x73_obj = ctxmidbsop_0x73_register()
    txmidbsop_0x73_obj.unselect()
    device.addRegister(txmidbsop_0x73_obj)
    rxado_0x74_obj = crxado_0x74_register()
    rxado_0x74_obj.unselect()
    device.addRegister(rxado_0x74_obj)
    txado_0x75_obj = ctxado_0x75_register()
    txado_0x75_obj.unselect()
    device.addRegister(txado_0x75_obj)
    txscedb_0x77_obj = ctxscedb_0x77_register()
    txscedb_0x77_obj.unselect()
    device.addRegister(txscedb_0x77_obj)
    txsdb_0x79_obj = ctxsdb_0x79_register()
    txsdb_0x79_obj.unselect()
    device.addRegister(txsdb_0x79_obj)
    txppssdb_0x7a_obj = ctxppssdb_0x7a_register()
    txppssdb_0x7a_obj.unselect()
    device.addRegister(txppssdb_0x7a_obj)
    txbsdo_0x7b_obj = ctxbsdo_0x7b_register()
    txbsdo_0x7b_obj.unselect()
    device.addRegister(txbsdo_0x7b_obj)
    txbcdb_0x7d_obj = ctxbcdb_0x7d_register()
    txbcdb_0x7d_obj.unselect()
    device.addRegister(txbcdb_0x7d_obj)
    txskedb_0x7e_obj = ctxskedb_0x7e_register()
    txskedb_0x7e_obj.unselect()
    device.addRegister(txskedb_0x7e_obj)
    uuidhandle_0x80_obj = cuuidhandle_0x80_register()
    uuidhandle_0x80_obj.unselect()
    device.addRegister(uuidhandle_0x80_obj)
    extdcdcstat_0x94_obj = cextdcdcstat_0x94_register()
    extdcdcstat_0x94_obj.unselect()
    device.addRegister(extdcdcstat_0x94_obj)
    extdcdcparams_0x95_obj = cextdcdcparams_0x95_register()
    extdcdcparams_0x95_obj.unselect()
    device.addRegister(extdcdcparams_0x95_obj)
    eprconfig_0x97_obj = ceprconfig_0x97_register()
    eprconfig_0x97_obj.unselect()
    device.addRegister(eprconfig_0x97_obj)


    device.configureDerivedFields()
    virtualDeviceList.append(device)

# -------------------- END OF DEVICE DEFINITIONS -----------------------------------

ACE_register_definition_metadata_json_delimiter{
    "virtual device list of dict": [
        {
            "show": 0, 
            "name": "Virtual Device 1", 
            "addr": 2
        }, 
        {
            "show": 0, 
            "name": "Virtual Device 2", 
            "addr": 3
        }, 
        {
            "show": 0, 
            "name": "Virtual Device 3", 
            "addr": 4
        }, 
        {
            "show": 0, 
            "name": "Virtual Device 4", 
            "addr": 5
        }, 
        {
            "show": 0, 
            "name": "Virtual Device 5", 
            "addr": 6
        }, 
        {
            "show": 0, 
            "name": "Virtual Device 6", 
            "addr": 7
        }
    ], 
    "firmware filename": "..\\..\\..\\..\\Users\\a0500988\\Documents\\TPS25751_Support\\Harman\\Jiras\\PI_USBC-8372_PPHV_For_All_PDOs\\ENG_Patches\\TPS65992_ENG_F809.11.A7.bin", 
    "device list of dict": [
        {
            "show": 1, 
            "name": "Device 1", 
            "addr": 1
        }, 
        {
            "show": 0, 
            "name": "Device 2", 
            "addr": 1
        }, 
        {
            "show": 0, 
            "name": "Device 3", 
            "addr": 2
        }, 
        {
            "show": 0, 
            "name": "Device 4", 
            "addr": 3
        }
    ], 
    "configuration values": "{\"meta\": {\"project\": 1, \"version\": 1}, \"data\": {\"every_ace\": [], \"header\": {\"usb_if_xid\": 0, \"unlock_code\": 1, \"customer_version\": 0, \"protection_flags\": 250}, \"bin_table\": [{\"rights\": 0, \"register\": 0, \"data\": [], \"offset\": 0}, {\"rights\": 0, \"register\": 1, \"data\": [35, 2, 0, 16, 0], \"offset\": 0}, {\"rights\": 0, \"register\": 2, \"data\": [35, 2, 0, 20, 28], \"offset\": 0}, {\"rights\": 0, \"register\": 3, \"data\": [35, 2, 0, 17, 0], \"offset\": 0}, {\"rights\": 0, \"register\": 4, \"data\": [35, 2, 0, 18, 128], \"offset\": 0}, {\"rights\": 0, \"register\": 5, \"data\": [35, 2, 0, 8, 6], \"offset\": 0}, {\"rights\": 0, \"register\": 6, \"data\": [35, 2, 0, 9, 5], \"offset\": 0}, {\"rights\": 0, \"register\": 7, \"data\": [35, 3, 0, 1, 3, 62], \"offset\": 0}, {\"rights\": 0, \"register\": 8, \"data\": [35, 3, 0, 3, 1, 44], \"offset\": 0}, {\"rights\": 0, \"register\": 9, \"data\": [37, 2, 0, 16, 0], \"offset\": 0}, {\"rights\": 0, \"register\": 10, \"data\": [37, 2, 0, 20, 28], \"offset\": 0}, {\"rights\": 0, \"register\": 11, \"data\": [37, 2, 0, 17, 0], \"offset\": 0}, {\"rights\": 0, \"register\": 12, \"data\": [37, 2, 0, 18, 128], \"offset\": 0}, {\"rights\": 0, \"register\": 13, \"data\": [37, 2, 0, 8, 6], \"offset\": 0}, {\"rights\": 0, \"register\": 14, \"data\": [37, 2, 0, 9, 5], \"offset\": 0}, {\"rights\": 0, \"register\": 15, \"data\": [37, 3, 0, 1, 3, 62], \"offset\": 0}, {\"rights\": 0, \"register\": 16, \"data\": [37, 3, 0, 3, 1, 44], \"offset\": 0}, {\"rights\": 0, \"register\": 17, \"data\": [36, 2, 0, 16, 0], \"offset\": 0}, {\"rights\": 0, \"register\": 18, \"data\": [36, 2, 0, 20, 28], \"offset\": 0}, {\"rights\": 0, \"register\": 19, \"data\": [36, 2, 0, 17, 0], \"offset\": 0}, {\"rights\": 0, \"register\": 20, \"data\": [36, 2, 0, 18, 128], \"offset\": 0}, {\"rights\": 0, \"register\": 21, \"data\": [36, 2, 0, 8, 6], \"offset\": 0}, {\"rights\": 0, \"register\": 22, \"data\": [36, 2, 0, 9, 5], \"offset\": 0}, {\"rights\": 0, \"register\": 23, \"data\": [36, 3, 0, 1, 3, 62], \"offset\": 0}, {\"rights\": 0, \"register\": 24, \"data\": [36, 3, 0, 3, 1, 44], \"offset\": 0}, {\"rights\": 0, \"register\": 25, \"data\": [126, 2, 0, 20, 28], \"offset\": 0}, {\"rights\": 0, \"register\": 26, \"data\": [127, 3, 0, 11, 7, 255], \"offset\": 0}, {\"rights\": 0, \"register\": 27, \"data\": [130, 2, 0, 13, 0], \"offset\": 0}, {\"rights\": 0, \"register\": 28, \"data\": [126, 2, 0, 18, 192], \"offset\": 0}, {\"rights\": 0, \"register\": 29, \"data\": [131, 2, 0, 18, 192], \"offset\": 0}, {\"rights\": 0, \"register\": 30, \"data\": [148, 2, 0, 5, 255], \"offset\": 0}, {\"rights\": 0, \"register\": 31, \"data\": [147, 3, 0, 6, 1, 255], \"offset\": 0}, {\"rights\": 0, \"register\": 32, \"data\": [35, 2, 0, 10, 101], \"offset\": 0}, {\"rights\": 0, \"register\": 33, \"data\": [35, 2, 0, 13, 128], \"offset\": 0}, {\"rights\": 0, \"register\": 34, \"data\": [37, 2, 0, 10, 101], \"offset\": 0}, {\"rights\": 0, \"register\": 35, \"data\": [37, 2, 0, 13, 128], \"offset\": 0}, {\"rights\": 0, \"register\": 36, \"data\": [36, 2, 0, 10, 101], \"offset\": 0}, {\"rights\": 0, \"register\": 37, \"data\": [36, 2, 0, 13, 128], \"offset\": 0}, {\"rights\": 0, \"register\": 38, \"data\": [35, 2, 0, 46, 128], \"offset\": 0}, {\"rights\": 0, \"register\": 39, \"data\": [37, 2, 0, 46, 128], \"offset\": 0}, {\"rights\": 0, \"register\": 40, \"data\": [36, 2, 0, 46, 128], \"offset\": 0}, {\"rights\": 0, \"register\": 41, \"data\": [35, 3, 0, 11, 0, 220], \"offset\": 0}, {\"rights\": 0, \"register\": 42, \"data\": [37, 3, 0, 11, 0, 220], \"offset\": 0}, {\"rights\": 0, \"register\": 43, \"data\": [47, 2, 0, 5, 112], \"offset\": 0}, {\"rights\": 0, \"register\": 44, \"data\": [48, 2, 0, 5, 138], \"offset\": 0}, {\"rights\": 0, \"register\": 45, \"data\": [49, 2, 0, 5, 180], \"offset\": 0}, {\"rights\": 0, \"register\": 46, \"data\": [], \"offset\": 0}, {\"rights\": 0, \"register\": 47, \"data\": [], \"offset\": 0}, {\"rights\": 0, \"register\": 48, \"data\": [], \"offset\": 0}, {\"rights\": 0, \"register\": 49, \"data\": [], \"offset\": 0}], \"strings\": [], \"selected_ace\": [{\"rights\": 0, \"register\": 6, \"data\": [68, 51, 34, 17, 221, 204, 187, 170], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 22, \"data\": [10, 56, 48, 205, 0, 64, 0, 15, 0, 0, 3], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 23, \"data\": [8, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 31, \"data\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 32, \"data\": [0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 35, \"data\": [0, 32, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 37, \"data\": [0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 39, \"data\": [0, 129, 196, 140, 25, 23, 26, 0, 80, 81, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 40, \"data\": [2, 72, 35, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 41, \"data\": [80, 16, 129, 219], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 43, \"data\": [0, 3, 0, 12, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 50, \"data\": [5, 170, 42, 44, 145, 1, 38, 200, 208, 2, 0, 120, 176, 4, 0, 90, 64, 6, 0, 40, 50, 220, 192, 23, 50, 64, 193, 18, 50, 164, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170, 10, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 51, \"data\": [3, 44, 145, 1, 16, 44, 209, 2, 0, 44, 193, 3, 0, 44, 177, 4, 0, 44, 65, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 55, \"data\": [62, 80, 20, 65, 144, 145, 1, 0, 7, 0, 0, 0, 30, 132, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 66, \"data\": [26, 45, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 67, \"data\": [25, 25, 25, 25, 25, 25, 50, 25, 34, 2, 0, 25, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 71, \"data\": [3, 81, 4, 64, 149, 81, 4, 0, 0, 5, 9, 0, 0, 27, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 74, \"data\": [0, 0, 81, 4, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 81, \"data\": [0, 6, 28, 0, 0, 1], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 82, \"data\": [0, 128, 0, 0, 0, 0, 2, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 85, \"data\": [0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 86, \"data\": [63, 128], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 92, \"data\": [7, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 48, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 93, \"data\": [0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 98, \"data\": [0, 0, 0, 0, 1, 40, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 100, \"data\": [107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 108, \"data\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 111, \"data\": [0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 112, \"data\": [1], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 115, \"data\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 117, \"data\": [0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 119, \"data\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 121, \"data\": [0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 122, \"data\": [0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 123, \"data\": [0, 2, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 125, \"data\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 126, \"data\": [1, 0, 0, 0, 1, 1, 1, 11, 7, 45, 65, 65, 65, 65], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 128, \"data\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 149, \"data\": [16, 39, 0, 0, 224, 50, 41, 0, 64, 156, 0, 0, 0, 0, 0, 0, 16, 11, 8, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 66, 173, 1, 0, 16, 39, 0, 0, 8, 16, 8, 9], \"offset\": 0, \"address\": [15]}, {\"rights\": 0, \"register\": 151, \"data\": [10, 1, 1, 0, 54], \"offset\": 0, \"address\": [15]}]}}", 
    "binary optimization table": {
        "register list": [
            {
                "register": 40, 
                "optimization": "B1", 
                "address": [
                    240
                ]
            }, 
            {
                "register": 86, 
                "optimization": "B1", 
                "address": [
                    240
                ]
            }, 
            {
                "register": 106, 
                "optimization": "B1", 
                "address": [
                    240
                ]
            }
        ]
    }, 
    "debug settings": {
        "adapter": "TIVA"
    }, 
    "devices use same config": true, 
    "template properties": {
        "Mux Type": "USB3.x and DisplayPort", 
        "Description": "TPS65992D BG Dual-Role Port\n\nConfigured for TPS65992D BG EVM. Supports one dual-role port. The port is configured to supply 5V, 9V, 15V or 20V via adjustable power supply with a maximum of 3A.", 
        "Template Version": "6.5.18", 
        "Port Type": "All", 
        "Category Type": "Advanced Customer Project", 
        "Device Type": "TPS65992D BG", 
        "Display As": "TPS65992D BG Harman", 
        "Question List": [
            {
                "Answer": "TPS65992D BG", 
                "Question": "Which device are you using?"
            }, 
            {
                "Answer": "Advanced", 
                "Question": "Which template type do you want to start with?"
            }, 
            {
                "Answer": "TPS65992DBG EVM", 
                "Question": "What host platform are you using?"
            }, 
            {
                "Answer": "Mass Market", 
                "Question": "Which customer template would you like to use?"
            }
        ]
    }
}